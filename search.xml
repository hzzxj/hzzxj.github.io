<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[git-cmd]]></title>
    <url>%2F2019%2F07%2F03%2Fgit-cmd%2F</url>
    <content type="text"><![CDATA[git 常用命令git add 文件名：追踪指定文件git add .：追踪所有文件git commit -m ‘注释’：提交到本地仓库git push：推送远程仓库git pull：拉取git status：查看当前提交状态git branch：查看分支git branch 分支名：创建分支，不切换git branch -d：删除分支git checkout 分支名：切换到某个分支git checkout -b 分支名：创建分支，并切换到该分支git merge 分支名：合并分支git reset HEAD – file：清空add命令向暂存区提交的关于file文件的修改git reset –hard HEAD：版本回退git reflog：查看所有操作日志git stash：将文件放入暂存区git stash list：查看暂存区文件git stash applly 暂存区id：将文件从暂存区取出git stash pop：将文件从暂存区取出,并删除暂存区的文件git stash clear：清除暂存区git stash branch 分支名称：暂存区创建分支git diff 文件名：比较工作目录和暂存区的不同git diff –cached 文件名：比较暂存区和远程仓库的不同git diff commitID 文件名：比较工作目录和远程仓库的不同git tag -a 标签名称 -m ‘注释’：创建标签git tag：查看标签git push origin 标签名称：推送标签到远程仓库git push origin –tags：推送所有的标签到远程仓库]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java-ArrayList根据某个属性去重]]></title>
    <url>%2F2019%2F07%2F01%2Fjava-removal%2F</url>
    <content type="text"><![CDATA[实体类12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152public class Student&#123; private String sno; private String name; private int sex; public Student(String sno, String name, int sex) &#123; this.sno = sno; this.name = name; this.sex = sex; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getSno() &#123; return sno; &#125; public void setSno(String sno) &#123; this.sno = sno; &#125; public int getSex() &#123; return sex; &#125; public void setSex(int sex) &#123; this.sex = sex; &#125; @Override public String toString() &#123; return "Student [name=" + name + ", sno=" + sno + ", sex=" + sex + "]"; &#125;&#125; 根据sno字段去重1234567891011List&lt;Student&gt; list = new ArrayList&lt;Student&gt;();for (int i = 0; i &lt; 3; i++)&#123; list.add(new Student("123", "name", i));&#125;list = list.stream().collect( Collectors.collectingAndThen( Collectors.toCollection(() -&gt; new TreeSet&lt;&gt;(Comparator.comparing(Student::getSno))), ArrayList::new));]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker部署nginx]]></title>
    <url>%2F2019%2F06%2F29%2Fdocker-nginx%2F</url>
    <content type="text"><![CDATA[官方文档链接https://hub.docker.com/_/nginx docker官方镜像(镜像名:版本号，默认latest)1$ docker pull nginx:1.14 查看镜像列表1$ docker images 简单的反向代理新编辑/opt/nginx/myweb.conf配置文件 1234567891011121314upstream myweb &#123; server 47.97.195.164:8080;&#125;server &#123; listen 80; server_name 47.97.195.164; location / &#123; proxy_pass http://myweb; index index.html index.htm; &#125;&#125; 初始化容器 1$ docker run -itd --name=nginx -v /opt/nginx/myweb.conf:/etc/nginx/conf.d/myweb.conf -p 80:80 --privileged=true nginx:1.14 简单的反向代理 + 静态资源服务器新编辑/opt/nginx/myweb.conf配置文件1234567891011121314151617181920upstream myweb &#123; server 47.97.195.164:8080 weight=3; server 47.97.195.165:8080 weight=4;;&#125;server &#123; listen 80; server_name 47.97.195.164; location /zxj/ &#123; alias /opt/resource/myweb/; add_header Access-Control-Allow-Origin *; &#125; location / &#123; proxy_pass http://myweb; index index.html index.htm; &#125;&#125; 修改nginx.conf 这里开启gzip压缩，不用的可以略过这步获取默认的nginx.cong配置文件 1$ docker run -i --rm nginx:1.14 cat /etc/nginx/nginx.conf &gt; nginx.conf 修改如下（gzip） 123456789101112131415161718192021222324252627282930313233343536373839user nginx;worker_processes 1;error_log /var/log/nginx/error.log warn;pid /var/run/nginx.pid;events &#123; worker_connections 1024;&#125;http &#123; include /etc/nginx/mime.types; default_type application/octet-stream; log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos; &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;; access_log /var/log/nginx/access.log main; sendfile on; #tcp_nopush on; keepalive_timeout 65; #gzip on; gzip on; gzip_min_length 1k; gzip_buffers 4 16k; #gzip_http_version 1.0; gzip_comp_level 2; gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png; gzip_vary off; gzip_disable &quot;MSIE [1-6]\.&quot;; include /etc/nginx/conf.d/*.conf;&#125; 初始化容器1$ docker run -itd --name=nginx -v /opt/nginx/nginx.conf:/etc/nginx/nginx.conf -v /opt/nginx/myweb.conf:/etc/nginx/conf.d/myweb.conf -v /opt/resource/:/opt/resource -p 80:80 --privileged=true nginx:1.14 注意目录的对应。/opt/resource/：静态资源的目录]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx反向代理、静态资源、负载均衡配置]]></title>
    <url>%2F2019%2F06%2F21%2Fnginx-proxy-config%2F</url>
    <content type="text"><![CDATA[nginx配置文件结构 全局块（main）该部分配置主要影响Nginx全局，通常包括下面几个部分： 配置运行Nginx服务器用户（组） worker process数 Nginx进程PID存放路径 错误日志的存放路径 配置文件的引入 events块该部分配置主要影响Nginx服务器与用户的网络连接，主要包括： 设置网络连接的序列化 是否允许同时接收多个网络连接 事件驱动模型的选择 最大连接数的配置 http块 定义MIMI-Type 自定义服务日志 允许sendfile方式传输文件 连接超时时间 单连接请求数上限 server块 配置网络监听 基于名称的虚拟主机配置 基于IP的虚拟主机配置 location块 location配置 请求根目录配置 更改location的URI 网站默认首页配置 简单的配置（基本都是默认配置）123456789101112131415161718192021222324252627282930313233343536373839user nginx;worker_processes 1;error_log /var/log/nginx/error.log warn;pid /var/run/nginx.pid;events &#123; worker_connections 1024;&#125;http &#123; include /etc/nginx/mime.types; default_type application/octet-stream; log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos; &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;; access_log /var/log/nginx/access.log main; sendfile on; #tcp_nopush on; keepalive_timeout 65; #gzip on; gzip on; gzip_min_length 1k; gzip_buffers 4 16k; #gzip_http_version 1.0; gzip_comp_level 2; gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png; gzip_vary off; gzip_disable &quot;MSIE [1-6]\.&quot;; include /etc/nginx/conf.d/*.conf;&#125; user nginx：运行Nginx服务器用户/组 user nobody nobody则默认所有用户都可以启动Nginx进程 worker_processes：进程数，Nginx服务器实现并发处理服务的关键 error_log：错误日志存放路径 pid：Nginx进程是作为系统守护进程在运行，需要在某文件中保存当前运行程序的主进程号，Nginx支持该保存文件路径的自定义 worker_connections：每一个worker process可以同时开启的最大连接数 include default_type：MIME-Type指的是网络资源的媒体类型，即前端请求的资源类型，include指令将mime.types文件包含进来 log_format：自定义一个名为main的日志格式 access_log：自定义服务日志 路径+格式（可选） sendfile：开启高效文件传输模式（zero copy 方式），避免内核缓冲区数据和用户缓冲区数据之间的拷贝。 keepalive_timeout：timeout 表示server端对连接的保持时间 gzip：打开gzip压缩 include /etc/nginx/conf.d/*.conf：将其他配置文件包含进来 主要配置（放到上面/etc/nginx/conf.d/目录下）1234567891011121314151617181920upstream myweb &#123; server 192.168.3.125:8081 weight=3; server 192.168.3.124:8081 weight=4;&#125;server &#123; listen 80; server_name 192.168.3.123; location /zxj/ &#123; alias /opt/resource/myweb/; add_header Access-Control-Allow-Origin *; &#125; location / &#123; proxy_pass http://myweb; index index.html index.htm; &#125;&#125; upstream：设置负载均衡服务器，后端服务器地址及权重 server： listen：服务端口 server_name：ip/域名，多个用逗号分开 location：地址匹配设置，支持正则匹配，也支持条件匹配。从上到下优先匹配。 alias：别名。将/zxj/映射目录/opt/resource/myweb/ add_header：允许跨域 proxy_pass：反向代理 上面配置效果： -http://192.168.3.123:80/zxj/xxx =&gt; 192.168.3.123该服务器下 /opt/resource/myweb/目录下xxx -http://192.168.3.123:80/ccc/xxx =&gt; http://192.168.3.124:8081/ccc/xxx 或 http://192.168.3.125:8081/ccc/xxx （比例3:4，ccc处不能为zxj，会匹配到上一个） alias那里也可以用root，试了一些配置路径都没映射成功，马克一下。小服务器，暂时不用考虑性能优化了。有时间再去研究研究~]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正向代理和反向代理的区别]]></title>
    <url>%2F2019%2F06%2F21%2Fnginx-proxy%2F</url>
    <content type="text"><![CDATA[(转载)正向代理和反向代理的区别 本文转载自：http://blog.csdn.net/m13666368773/article/details/8060481 正向代理是一个位于客户端和原始服务器之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端需要进行一些特别的设置才能使用正向代理。 反向代理服务器根据客户端的请求，从其关联的一组或多组后端服务器（如Web服务器）上获取资源，然后再将这些资源返回给客户端，客户端只会得知反向代理的IP地址，而不知道在代理服务器后面的服务器簇的存在 正向代理和反向代理的区别从用途上来讲：正向代理的典型用途是为在防火墙内的局域网客户端提供访问Internet的途径。正向代理还可以使用缓冲特性减少网络使用率。反向代理的典型用途是将防火墙后面的服务器提供给Internet用户访 问。反向代理还可以为后端的多台服务器提供负载平衡，或为后端较慢的服务器提供缓冲服务。另外，反向代理还可以启用高级URL策略和管理技术，从而使处于不同web服务器系统的web页面同时存在于同一个URL空间下。 从安全性来讲：正向代理允许客户端通过它访问任意网站并且隐藏客户端自身，因此你必须采取安全措施以确保仅为经过授权的客户端提供服务。反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。打个比方，a,b,c三个人，正向代理是a通过b向C借钱，a知道c的存在 。反向代理是a向b借钱，b又向C借，a不知道c的存在。]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker部署springboot]]></title>
    <url>%2F2019%2F06%2F20%2Fdocker-springboot%2F</url>
    <content type="text"><![CDATA[将springboot项目打包成jar包略 Dockerfile文件12345678FROM java:8VOLUME /tmpCOPY myweb-0.0.1-SNAPSHOT.jar /opt/web/app.jarCOPY /config/application.yml /opt/web/config/application.ymlWORKDIR /opt/webRUN bash -c "touch /app.jar"EXPOSE 8080ENTRYPOINT ["java", "-jar", "app.jar"] FROM：拉取java8为基础对象VOLUME：指定临时文件目录为/tmp。其效果是在主机 /var/lib/docker 目录下创建了一个临时文件，并链接到容器的/tmp。改步骤是可选的，如果涉及到文件系统的应用就很有必要了。/tmp目录用来持久化到Docker 数据文件夹，因为 Spring Boot 使用的内嵌 Tomcat 容器默认使用/tmp作为工作目录（感觉没什么用啊，在主机该目录下是空的。）COPY：目录下springboot的jar包及配置文件复制到docker镜像内WORKDIR：切换工作目录RUN：执行命令（touch /app.jar）EXPOSE：暴露8080端口ENTRYPOINT：执行命令（java -jar app.jar） 生成镜像将jar包、Dockerfile放到同一目录下（如：/opt/web），yml文件放到下级目录config（与Dockerfile中对应，如：/opt/web/config）生成镜像1$ docker build -t myweb:v1 . -t：代表要构建的镜像的tag，上文的镜像名为myweb，版本为v1 启动容器1$ docker run -itd --name=myweb -p 8080:8080 -v /opt/web/config/application.yml:/opt/web/config/application.yml -v /opt/web/logs/:/opt/web/logs --privileged=true myweb:v1 挂载配置文件和日志文件。其实在生成镜像的时候，就已经把目录下的配置文件放进去了。不过还是需要挂载出来，不然需要改配置的时候太麻烦了，这个基础镜像里没有yum和vim。。。]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker部署redis]]></title>
    <url>%2F2019%2F06%2F20%2Fdocker-redis%2F</url>
    <content type="text"><![CDATA[官方文档链接https://hub.docker.com/_/redis docker官方镜像(镜像名:版本号，默认latest)1$ docker pull redis:5.0.4 docker中国镜像加速(官方镜像慢的话可以用这个)1$ docker pull registry.docker-cn.com/library/redis 查看镜像列表1$ docker images 简单启动容器1$ docker run -itd -p 6380:6379 –name="redis" docker.io/redis -it：以交互模式运行容器，并为容器分配一个伪终端-p：端口映射，主机端口:容器端口–name：为容器指定名称 挂载外部配置及数据持久化修改redis.conf daemonize no：注释掉注释掉注释掉（用守护线程启动） requirepass：设置密码 bind：限制ip访问，注释掉 appendonly yes：数据持久化 启动容器1$ docker run -itd --privileged=true -p 6379:6379 -v /root/redis/redis.conf:/usr/local/etc/redis/redis.conf -v /root/redis/data:/data --name redis redis:5.0.4 redis-server /usr/local/etc/redis/redis.conf --appendonly yes redis-server …：按照指定配置文件启动–appendonly yes：数据持久化上面的配置文件路径（根据实际情况修改）：/root/redis/redis.conf上面的挂载持久化路径（根据实际情况修改）：/root/redis/data]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker部署postgres]]></title>
    <url>%2F2019%2F06%2F19%2Fdocker-postgresql%2F</url>
    <content type="text"><![CDATA[官方文档链接https://hub.docker.com/_/postgres docker官方镜像(镜像名:版本号，默认latest)1$ docker pull postgres:11 docker中国镜像加速(官方镜像慢的话可以用这个)1$ docker pull registry.docker-cn.com/library/postgres 查看镜像列表1$ docker images 简单启动容器1$ docker run -itd -p 5432:5432 -name="postgres" -e POSTGRES_PASSWORD=zhaoxinjie postgres:11 -it：以交互模式运行容器，并为容器分配一个伪终端-p：端口映射，主机端口:容器端口–name：为容器指定名称-e POSTGRES_PASSWORD：设置环境变量。设置postgres用户的密码 挂载外部配置及数据获取默认的配置文件并放到/root/postgres/目录下1$ docker run -i --rm postgres cat /usr/share/postgresql/postgresql.conf.sample &gt; /root/postgres/postgres.conf 根据自定义配置文件启动及挂载数据到容器外1$ docker run -itd --name postgres -p 5432:5432 -e POSTGRES_PASSWORD=zhaoxinjie --privileged=true -v /root/postgres/data/:/var/lib/postgresql/data -v /root/postgres/postgres.conf:/etc/postgresql/postgresql.conf postgres:11 -c 'config_file=/etc/postgresql/postgresql.conf' –privileged=true：容器内的root拥有真正的权限，否则容器内的root只是外部普通用户权限（不设置启动会报错）-v：挂载文件上面的配置文件路径（根据实际情况修改）：/root/postgres/postgres.conf上面的挂载数据路径（根据实际情况修改）：/root/postgres/data/]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>postgresql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7下docker安装]]></title>
    <url>%2F2019%2F06%2F19%2Fdocker-install%2F</url>
    <content type="text"><![CDATA[检查Linux内核版本，docker要求3.10及以上1$ uname -r 安装docker1$ yum install docker 启动docker1$ systemctl start docker 查看docker版本1$ docker -v 停止docker1$ systemctl stop docker 开机启动docker1$ systemctl enable docker]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
</search>
