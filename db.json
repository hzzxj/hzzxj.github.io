{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/nginx.png","path":"images/nginx.png","modified":0,"renderable":0},{"_id":"source/images/linux/useradd.png","path":"images/linux/useradd.png","modified":0,"renderable":0},{"_id":"source/images/linux/nload.png","path":"images/linux/nload.png","modified":0,"renderable":0},{"_id":"source/images/ftp/ftp1.png","path":"images/ftp/ftp1.png","modified":0,"renderable":0},{"_id":"source/images/mysql/3.png","path":"images/mysql/3.png","modified":0,"renderable":0},{"_id":"source/images/mysql/5.png","path":"images/mysql/5.png","modified":0,"renderable":0},{"_id":"source/images/mysql/6.png","path":"images/mysql/6.png","modified":0,"renderable":0},{"_id":"source/images/mysql/8.png","path":"images/mysql/8.png","modified":0,"renderable":0},{"_id":"source/images/mysql/1.png","path":"images/mysql/1.png","modified":0,"renderable":0},{"_id":"source/images/git/1.png","path":"images/git/1.png","modified":0,"renderable":0},{"_id":"source/images/mysql/2.png","path":"images/mysql/2.png","modified":0,"renderable":0},{"_id":"source/images/git/11.png","path":"images/git/11.png","modified":0,"renderable":0},{"_id":"source/images/git/10.png","path":"images/git/10.png","modified":0,"renderable":0},{"_id":"source/images/git/12.png","path":"images/git/12.png","modified":0,"renderable":0},{"_id":"source/images/git/13.png","path":"images/git/13.png","modified":0,"renderable":0},{"_id":"source/images/mysql/7.png","path":"images/mysql/7.png","modified":0,"renderable":0},{"_id":"source/images/git/16.png","path":"images/git/16.png","modified":0,"renderable":0},{"_id":"source/images/git/15.png","path":"images/git/15.png","modified":0,"renderable":0},{"_id":"source/images/git/20.png","path":"images/git/20.png","modified":0,"renderable":0},{"_id":"source/images/git/2.png","path":"images/git/2.png","modified":0,"renderable":0},{"_id":"source/images/git/19.png","path":"images/git/19.png","modified":0,"renderable":0},{"_id":"source/images/git/18.png","path":"images/git/18.png","modified":0,"renderable":0},{"_id":"source/images/git/21.png","path":"images/git/21.png","modified":0,"renderable":0},{"_id":"source/images/git/23.png","path":"images/git/23.png","modified":0,"renderable":0},{"_id":"source/images/git/22.png","path":"images/git/22.png","modified":0,"renderable":0},{"_id":"source/images/git/25.png","path":"images/git/25.png","modified":0,"renderable":0},{"_id":"source/images/git/17.png","path":"images/git/17.png","modified":0,"renderable":0},{"_id":"source/images/git/26.png","path":"images/git/26.png","modified":0,"renderable":0},{"_id":"source/images/git/24_1.png","path":"images/git/24_1.png","modified":0,"renderable":0},{"_id":"source/images/git/24.png","path":"images/git/24.png","modified":0,"renderable":0},{"_id":"source/images/git/28.png","path":"images/git/28.png","modified":0,"renderable":0},{"_id":"source/images/git/29.png","path":"images/git/29.png","modified":0,"renderable":0},{"_id":"source/images/git/24_2.png","path":"images/git/24_2.png","modified":0,"renderable":0},{"_id":"source/images/git/30.png","path":"images/git/30.png","modified":0,"renderable":0},{"_id":"source/images/git/32.png","path":"images/git/32.png","modified":0,"renderable":0},{"_id":"source/images/git/3.png","path":"images/git/3.png","modified":0,"renderable":0},{"_id":"source/images/git/31.png","path":"images/git/31.png","modified":0,"renderable":0},{"_id":"source/images/git/33.png","path":"images/git/33.png","modified":0,"renderable":0},{"_id":"source/images/git/34.png","path":"images/git/34.png","modified":0,"renderable":0},{"_id":"source/images/git/35.png","path":"images/git/35.png","modified":0,"renderable":0},{"_id":"source/images/git/36.png","path":"images/git/36.png","modified":0,"renderable":0},{"_id":"source/images/git/27.png","path":"images/git/27.png","modified":0,"renderable":0},{"_id":"source/images/git/37.png","path":"images/git/37.png","modified":0,"renderable":0},{"_id":"source/images/git/38.png","path":"images/git/38.png","modified":0,"renderable":0},{"_id":"source/images/git/39.png","path":"images/git/39.png","modified":0,"renderable":0},{"_id":"source/images/git/4.png","path":"images/git/4.png","modified":0,"renderable":0},{"_id":"source/images/git/40.png","path":"images/git/40.png","modified":0,"renderable":0},{"_id":"source/images/git/42.png","path":"images/git/42.png","modified":0,"renderable":0},{"_id":"source/images/git/41.png","path":"images/git/41.png","modified":0,"renderable":0},{"_id":"source/images/git/5.png","path":"images/git/5.png","modified":0,"renderable":0},{"_id":"source/images/git/43.png","path":"images/git/43.png","modified":0,"renderable":0},{"_id":"source/images/git/44.png","path":"images/git/44.png","modified":0,"renderable":0},{"_id":"source/images/git/6.png","path":"images/git/6.png","modified":0,"renderable":0},{"_id":"source/images/git/relation.png","path":"images/git/relation.png","modified":0,"renderable":0},{"_id":"source/images/redis/redis1.png","path":"images/redis/redis1.png","modified":0,"renderable":0},{"_id":"source/images/git/9.png","path":"images/git/9.png","modified":0,"renderable":0},{"_id":"source/images/redis/redis2.png","path":"images/redis/redis2.png","modified":0,"renderable":0},{"_id":"source/images/git/7.png","path":"images/git/7.png","modified":0,"renderable":0},{"_id":"source/images/git/8.png","path":"images/git/8.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/affix.js","path":"js/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/exturl.js","path":"js/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"source/images/mysql/4.png","path":"images/mysql/4.png","modified":0,"renderable":0},{"_id":"source/images/git/14.png","path":"images/git/14.png","modified":0,"renderable":0},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/LICENSE","path":"lib/Han/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/README.md","path":"lib/Han/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"source/images/redis/courgette.log","path":"images/redis/courgette.log","modified":0,"renderable":0},{"_id":"source/images/redis/redis-master4.png","path":"images/redis/redis-master4.png","modified":0,"renderable":0},{"_id":"source/images/redis/redis-master2.png","path":"images/redis/redis-master2.png","modified":0,"renderable":0},{"_id":"source/images/redis/redis-master1.png","path":"images/redis/redis-master1.png","modified":0,"renderable":0},{"_id":"source/images/redis/redis-sentinel1.png","path":"images/redis/redis-sentinel1.png","modified":0,"renderable":0},{"_id":"source/images/redis/redis-sentinel5.png","path":"images/redis/redis-sentinel5.png","modified":0,"renderable":0},{"_id":"source/images/redis/redis-sentinel6.png","path":"images/redis/redis-sentinel6.png","modified":0,"renderable":0},{"_id":"source/images/redis/redis-sentinel7.png","path":"images/redis/redis-sentinel7.png","modified":0,"renderable":0},{"_id":"source/images/redis/redis-sentinel2.png","path":"images/redis/redis-sentinel2.png","modified":0,"renderable":0},{"_id":"source/images/redis/reids-master3.png","path":"images/redis/reids-master3.png","modified":0,"renderable":0},{"_id":"source/images/redis/redis-sentinel3.png","path":"images/redis/redis-sentinel3.png","modified":0,"renderable":0},{"_id":"source/images/redis/redis-sentinel4.png","path":"images/redis/redis-sentinel4.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1560908796444},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1560908796444},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1560908796444},{"_id":"themes/next/.gitignore","hash":"8bf1bfc917aa8dd2d886fd36f764447a2b561e1e","modified":1560908796454},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1560908796444},{"_id":"themes/next/.all-contributorsrc","hash":"43eb0149c78e464c695f0dd758bb8c59353182b3","modified":1560908796444},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1560908796454},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1560908796454},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1560908796454},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1560908796454},{"_id":"themes/next/README.md","hash":"3f72e5a5051ca2bdaccdda684c46dc4fdb4413a6","modified":1560908796454},{"_id":"themes/next/_config.yml","hash":"976a3207115a1eaa3233f75f9c37357ed6747d36","modified":1561982622629},{"_id":"themes/next/bower.json","hash":"8076a6e58a99d1188d335a6456a0de0fda163338","modified":1560908796454},{"_id":"themes/next/gulpfile.coffee","hash":"6407d9063bd88ede299ff7c2a59cf2c82e079476","modified":1560908796464},{"_id":"themes/next/package.json","hash":"037ed50fbce1520918bf8c3a1c14b6e07676783e","modified":1560908796484},{"_id":"source/_posts/docker-redis.md","hash":"1933291435a6e26fd8056a4551d4a5f575132768","modified":1647325308733},{"_id":"source/_posts/docker-install.md","hash":"455b913d65ea9c0cf2ec80f219eafd53eb5a9901","modified":1561032077996},{"_id":"source/_posts/design-pattern.md","hash":"e65240d33fd2aedef9212d9291205cb6a72c4a7d","modified":1565059787454},{"_id":"source/_posts/docker-mysql.md","hash":"6a49bd42fba99aa1dd634b2359f4eb2bf265e8c2","modified":1565344792728},{"_id":"source/_posts/docker-nginx.md","hash":"09b416c357c88f62c2ba684da34ea2c564ecb5bd","modified":1608254158005},{"_id":"source/_posts/git-bash.md","hash":"e7c52cf8ea2d7bce21369d364ebe71524124c9ed","modified":1565251462832},{"_id":"source/_posts/docker-postgresql.md","hash":"5fcaf4569ba8f0651a275671378b9b66ddfc0634","modified":1561024491262},{"_id":"source/_posts/docker-springboot.md","hash":"8d7f042ccc945ac11f899a4f47ed8e7b495ad5f4","modified":1561033169843},{"_id":"source/_posts/git-cmd.md","hash":"d9445e28a7b008404c99f32f198130fa857ec6e9","modified":1562201616713},{"_id":"source/_posts/linux-user.md","hash":"a41ab0a4444633bd0ea43a9410227fb8f4bbe6d6","modified":1646708836906},{"_id":"source/_posts/java-removal.md","hash":"bc41c1ca76711c179babae5a21db5cbe6fe84e21","modified":1562055148831},{"_id":"source/_posts/docker-vsftpd.md","hash":"1b053e0f1c4650c0274a9da195c2cf0d0003019d","modified":1608198154632},{"_id":"source/_posts/nginx-proxy.md","hash":"a4559475b06008faba2d65e723c1824c1a85a3f7","modified":1561088533039},{"_id":"source/_posts/nginx-proxy-config.md","hash":"1b52b1af153928a17646ee7a6b0f0cd5f0001560","modified":1561947747364},{"_id":"source/_posts/postgresql-locktable.md","hash":"0b428921d5fc30addafaeda4500c2583425be8dc","modified":1569810333154},{"_id":"source/_posts/linux-nload.md","hash":"a41ab0a4444633bd0ea43a9410227fb8f4bbe6d6","modified":1646655798963},{"_id":"source/about/index.md","hash":"23fe7b15fdab7b14df3178259e54375980b8c371","modified":1561012676262},{"_id":"source/achives/index.md","hash":"128ee6e0a5287397a4458898d81f50e153cea315","modified":1561012535115},{"_id":"source/images/avatar.jpg","hash":"db2402e91fb3ba900b58ce898ad6b25ab08f4bbf","modified":1560911068560},{"_id":"source/_posts/mysql-install.md","hash":"3d9ec18b5893ee66df6eebf0a9d779cea93e26d9","modified":1571749006800},{"_id":"source/categories/index.md","hash":"e5dc05bcffc41dc155db7ad14bdb80d13447d2d1","modified":1561012499440},{"_id":"source/tags/index.md","hash":"6a6ca39662a869ed7e23e98509249aa8d30d71f6","modified":1561012544851},{"_id":"source/_posts/web-security_2.md","hash":"df13b8f013543ee2fbf19ddf0fb0c3772f1588ed","modified":1621908730593},{"_id":"source/images/nginx.png","hash":"5b2064231f047ab4fd9c7d46aa99edcdf6b650ef","modified":1561100696732},{"_id":"source/_posts/web-security_1.md","hash":"f7f197140092d16f063e1d3a5ce85242a0d6768c","modified":1621845495390},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1560908796454},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"1e49c08b446678336b2eacc8bf581faca969f34b","modified":1560908796454},{"_id":"themes/next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1560908796454},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"721a1aa9feed1b580ab99af8e69ed22699121e88","modified":1560908796454},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1560908796454},{"_id":"themes/next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1560908796454},{"_id":"themes/next/docs/MATH.md","hash":"7d0330c250082a86897d1c96fbb4ef5df59538af","modified":1560908796454},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1560908796454},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1560908796464},{"_id":"themes/next/languages/de.yml","hash":"79b3221344da335743b5ef5a82efa9338d64feb0","modified":1560908796464},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1560908796464},{"_id":"themes/next/languages/es.yml","hash":"db1a9f2af477212544c830c2dd986400e26ddd6a","modified":1560908796464},{"_id":"themes/next/languages/fr.yml","hash":"2429c90dad5bb865e3a969be2b373f19b3a77b3b","modified":1560908796464},{"_id":"themes/next/languages/fa.yml","hash":"3227072c7e1bfb16ec0517394b60632f4be921dd","modified":1560908796464},{"_id":"themes/next/languages/id.yml","hash":"f3302a4dfdc9be38a52d6e081411574b1ea01671","modified":1560908796464},{"_id":"themes/next/languages/ja.yml","hash":"3f25eca504ee5a519987b4402731f1bb7f5191c9","modified":1560908796464},{"_id":"themes/next/languages/ko.yml","hash":"75f2fe142f76bf623e34ed3570598226f55f2b8b","modified":1560908796464},{"_id":"themes/next/languages/it.yml","hash":"31eb878b53d60ff47e3e534cdd7a839c8801ac6e","modified":1560908796464},{"_id":"themes/next/languages/nl.yml","hash":"08f16ce395dacc88847fc30dc6b985ce22fb8948","modified":1560908796464},{"_id":"themes/next/languages/pt-BR.yml","hash":"c7de8b77f44e75be4f04423088a1c891537aa601","modified":1560908796464},{"_id":"themes/next/languages/pt.yml","hash":"ca5072c967e5eb1178ffed91827459eda6e4e6e2","modified":1560908796464},{"_id":"themes/next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1560908796464},{"_id":"themes/next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1560908796464},{"_id":"themes/next/languages/uk.yml","hash":"6320439c6e9ff81e5b8f8129ca16e9a744b37032","modified":1560908796464},{"_id":"themes/next/languages/vi.yml","hash":"e2f0dd7f020a36aa6b73ed4d00dcc4259a7e5e9d","modified":1560908796464},{"_id":"themes/next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1560908796464},{"_id":"themes/next/languages/zh-CN.yml","hash":"069f15da910d6f9756be448167c07ea5aa5dc346","modified":1560927899646},{"_id":"themes/next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1560908796464},{"_id":"themes/next/layout/archive.swig","hash":"61bc56e77e653684fc834f63dcbdadf18687c748","modified":1560908796484},{"_id":"themes/next/layout/index.swig","hash":"bdcc9f57adef49706b16b107791cacecbc23c1dc","modified":1560908796484},{"_id":"themes/next/layout/_layout.swig","hash":"ba786b1baba49021928e2e508da53f2fd1369b3f","modified":1560908796464},{"_id":"themes/next/layout/post.swig","hash":"af74e97d57cf00cde6f8dbd4364f27910915454e","modified":1560908796484},{"_id":"themes/next/layout/category.swig","hash":"ad0ac6a1ff341f8eab9570e7fb443962948c5f9d","modified":1560908796484},{"_id":"themes/next/layout/page.swig","hash":"5d06ee8f477ffc39932d0251aa792ffcaf8faf14","modified":1560908796484},{"_id":"themes/next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1560908796494},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1560908796494},{"_id":"themes/next/layout/tag.swig","hash":"283519d4d5b67814412863a3e0212bac18bcc5a0","modified":1560908796484},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1560908796534},{"_id":"themes/next/layout/schedule.swig","hash":"e79f43df0e9a6cf48bbf00882de48c5a58080247","modified":1560908796484},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1560908796534},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1560908796534},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560908796524},{"_id":"source/images/linux/useradd.png","hash":"a1df93f542c24ca46571a7efc0bb0a1baf802839","modified":1646708778620},{"_id":"source/images/linux/nload.png","hash":"00ab804a857ec81f24a073db6badfb562692e959","modified":1646655726664},{"_id":"source/images/ftp/ftp1.png","hash":"921c253be5dbc3b1a3c32483d31bedc3f263b891","modified":1608198053864},{"_id":"source/images/mysql/3.png","hash":"68e8a0ee3c63b313eae3e43505999a0c9642d877","modified":1571712973792},{"_id":"source/images/mysql/5.png","hash":"302ec682002e7416efed34ce03576d443ecb2f04","modified":1571713546747},{"_id":"source/images/mysql/6.png","hash":"fbb9bb4e4c53ed8b76fb99a0dd9b66bfa379cb54","modified":1571713699422},{"_id":"source/images/mysql/8.png","hash":"a2acd6a04c4dbcbd1696e59dc4bb1b2c2a9bcb59","modified":1571726651888},{"_id":"source/images/mysql/1.png","hash":"a473bcd71c0e20982e4a7a9dc39dbc081131b78e","modified":1571711663848},{"_id":"source/images/git/1.png","hash":"e9429c09ca6dded702abe425b123e7e29b70c8bd","modified":1563519168858},{"_id":"source/images/mysql/2.png","hash":"586a321f6c46bdcf4ff3f148844b5238cf325577","modified":1571711696317},{"_id":"source/images/git/11.png","hash":"1225f9959ebc4b7ee27e956a0710c757897982f5","modified":1564472283048},{"_id":"source/images/git/10.png","hash":"de7f1a90571217db35f52e0d74022f153a0a6082","modified":1564470313552},{"_id":"source/images/git/12.png","hash":"7c14d346ed8670af186639c348fc0bce78ffd503","modified":1564473266587},{"_id":"source/images/git/13.png","hash":"6e76b5722dc8d544b6fb9541839e6cc0dfd46e31","modified":1564474225383},{"_id":"source/images/mysql/7.png","hash":"33c5441a0d917b95616d0024a147179fbdc891eb","modified":1571725568112},{"_id":"source/images/git/16.png","hash":"43b689d2f8da6cb53b89cba6287eb530bb44f81b","modified":1564490130172},{"_id":"source/images/git/15.png","hash":"129392d69e436845ca862448753155e5ba9df066","modified":1564489665146},{"_id":"source/images/git/20.png","hash":"88d995909eb11aef3185a446471328a2d55c90d4","modified":1564628315793},{"_id":"source/images/git/2.png","hash":"706fcd4b149a37994ecddd5ab802bedf1883e0db","modified":1563519792298},{"_id":"source/images/git/19.png","hash":"8c5c628b1b570298aeaf3300ff7c33d977ed7271","modified":1564625719175},{"_id":"source/images/git/18.png","hash":"ee09c31e83c8d40ad4fce92486204696a20d8ffa","modified":1564624281725},{"_id":"source/images/git/21.png","hash":"2463284999bc8350bea1bec013b1db548576a3d2","modified":1564630881846},{"_id":"source/images/git/23.png","hash":"454c554be01250cb451ae7a2415b68bb07bfe026","modified":1564640312282},{"_id":"source/images/git/22.png","hash":"f64fcc7c04cdea34d5b3532e3c650ab7df16dfa2","modified":1564639910710},{"_id":"source/images/git/25.png","hash":"3f736ea77172289ae3580e3fe609f6d4b002b2d0","modified":1564640789092},{"_id":"source/images/git/17.png","hash":"3139c473d2d6f993b0be96ff8196002e953f885f","modified":1564490620862},{"_id":"source/images/git/26.png","hash":"bb6d41818c9bb5aabea6884eafa5e310754948ca","modified":1564644841823},{"_id":"source/images/git/24_1.png","hash":"7fe43cbdb24aceb4492164f754763df4b4899189","modified":1564716459378},{"_id":"source/images/git/24.png","hash":"1d84950f20d7474e25db032d22c2ce607d5cc41a","modified":1564640412980},{"_id":"source/images/git/28.png","hash":"d017a8534d489cedeaa74a7a1127bd2eb8c7986c","modified":1564645942007},{"_id":"source/images/git/29.png","hash":"5f389fc96842971ab49b086785df32e3a944c634","modified":1564646150279},{"_id":"source/images/git/24_2.png","hash":"900cd7b95e48bd92e8151e9034960f46cbad33cc","modified":1564716763296},{"_id":"source/images/git/30.png","hash":"578ab54be71aa70093a617680f0c15f61c0968c3","modified":1564646312140},{"_id":"source/images/git/32.png","hash":"6e6ff6ae412b628b2b9a1c660952bfe73cd94590","modified":1564648076076},{"_id":"source/images/git/3.png","hash":"fecf0165c2e58f8f220ea8d5233acd9f4706b76b","modified":1564449225854},{"_id":"source/images/git/31.png","hash":"70eb5ad7eb1032f3433fb28865d73f273ee3934d","modified":1564646823833},{"_id":"source/images/git/33.png","hash":"d77a1ca44b4aad962a1a306d44ee58f183312f1a","modified":1564648964169},{"_id":"source/images/git/34.png","hash":"9f6adcca48aa6355ba07436ab45c157b0a5b6d5c","modified":1564651245662},{"_id":"source/images/git/35.png","hash":"a199ab9bc9fae73e9df7a8ec09a9bf6b5376d140","modified":1564651416724},{"_id":"source/images/git/36.png","hash":"b04cd9c89e3726739ac3e6135ed4132f0a9f1aab","modified":1564652759633},{"_id":"source/images/git/27.png","hash":"7432f831aaf1eb56f6dbf445abdbaf5e52e46059","modified":1564645186349},{"_id":"source/images/git/37.png","hash":"737c94a76cde138babb9d2796736ca77fbcfffaf","modified":1564652946696},{"_id":"source/images/git/38.png","hash":"6ceff49117b4d9c556208f49b69dddc9f301ec01","modified":1564653106559},{"_id":"source/images/git/39.png","hash":"0e9595a446cee43019099d7c67b20bd55cdbabce","modified":1564653379622},{"_id":"source/images/git/4.png","hash":"ccb2625a66692e1c168df33dc93046ffd1879bbc","modified":1564451469087},{"_id":"source/images/git/40.png","hash":"37b2a71b7d0e0157bd7df13076332d904b58fed5","modified":1565249566878},{"_id":"source/images/git/42.png","hash":"4daeee4f66eea71c735043be47a0065df17522f2","modified":1565250144130},{"_id":"source/images/git/41.png","hash":"b8320456dba25d12f69b2e53706f20f880893154","modified":1565250134696},{"_id":"source/images/git/5.png","hash":"fcf9fe94b25f3069fe1dfe3eb5042a60000d856c","modified":1564451997657},{"_id":"source/images/git/43.png","hash":"6910eac814e34f3110a146aa4554f64fecefe212","modified":1565250153090},{"_id":"source/images/git/44.png","hash":"ef8c7c7df3699d1206ef38b263d7f850ef7da994","modified":1565250295026},{"_id":"source/images/git/6.png","hash":"4a21d19698cefd67c8437a1ef382f1280e944a78","modified":1564453559665},{"_id":"source/images/git/relation.png","hash":"558c5b3217f5613b3d6fbb7b27aaf2e68427fde9","modified":1563507454228},{"_id":"source/images/redis/redis1.png","hash":"02ad5cbd2e404ebb5d1c7db1e155b7ccab423ab3","modified":1647324818468},{"_id":"source/images/git/9.png","hash":"96327a50b30307df6da09a03c1477576610d8884","modified":1564468929392},{"_id":"source/images/redis/redis2.png","hash":"b839d9557813753dc9fd2bd14f89bae169676e12","modified":1647324839118},{"_id":"source/images/git/7.png","hash":"6bcbc7513637b50dc9a98a7cb8bf117b93a93a08","modified":1564454176917},{"_id":"source/images/git/8.png","hash":"76231b12356c16ab972cd3926193ca5f4130be79","modified":1564468272240},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1560908796454},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1560908796454},{"_id":"themes/next/docs/ru/README.md","hash":"aeb95129ab1da9ec41786bfa86dc32c739ee6358","modified":1560908796454},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1560908796454},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"aaf25d304793344e2d026062768c93005723f5c6","modified":1560908796454},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"16d98708de86efe40ebcb02c02a01af0f160b80a","modified":1560908796454},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"018a259694f4a8c7c384e1f323531442cba5fbf3","modified":1560908796454},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1560908796464},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"b17fc344ff61603f83387c0f9b2b2189aae81d50","modified":1560908796464},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1560908796464},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"db2797f161e1e7a4987cbfa3d1be682266dfbba6","modified":1560908796464},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"2095d1214a4e519a1d31b67b41c89080fa3285d3","modified":1560908796464},{"_id":"themes/next/docs/zh-CN/README.md","hash":"4016948fdb971e4f905efb7a5bb3add3dd58e7a8","modified":1560908796464},{"_id":"themes/next/layout/_macro/post.swig","hash":"c77a7928d65bfe0fb712a2931b4cd7045666508c","modified":1560908796464},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"91017f58f83d9505ce99109fffdc51c032bf017e","modified":1561973034199},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"891ab67815969dd8736cb22fbbb3f791b8fff4e4","modified":1560908796464},{"_id":"themes/next/layout/_partials/comments.swig","hash":"d0b9e841d55c974d02f43823a06a2627f8e46431","modified":1560908796464},{"_id":"themes/next/layout/_partials/footer.swig","hash":"9a79dde1412b1b1473380e8b6cacfe1930ed321b","modified":1560908796474},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"1ad13269b43b900356f3bdab7947d6a86f035a2c","modified":1560908796474},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1560908796474},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"dee345054d564dd56f74bb143942d3edd1cb8150","modified":1560908796474},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1560908796464},{"_id":"themes/next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1560908796464},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"49749b77766bb202f8da349a9c3da41dff21ec30","modified":1562051374336},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"87bcb495f7ddd81cc3fe2c2a886e51c08053019b","modified":1560908796484},{"_id":"themes/next/layout/_third-party/chatra.swig","hash":"87182367d7954457cb2498bbfa9445c03c2d619e","modified":1560908796484},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"4b93dc7ac0573c402aabcb5c933bbcb893b07c51","modified":1560908796484},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"12bf51c55449d0e838f93a4aae9f6d25c0a27ba2","modified":1560908796484},{"_id":"themes/next/layout/_third-party/mermaid.swig","hash":"80dfc0879866e6512cb67590a3b2d8741a66f980","modified":1560908796484},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"7db4ad4a8dd5420dad2f6890f5299945df0af970","modified":1560908796484},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"76f5933925670044ec65b454295ba7e0a8439986","modified":1560908796484},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"4ae61c7efb16e962385bfe522a38c4d29cdcccbe","modified":1560908796484},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"c476dc3693a9dd0be2d136a45b0d7fdef55d4d92","modified":1560908796484},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"882cd0b68c493af1b6d945660f9c21085e006ffc","modified":1560908796484},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"8b1322a091355853db62a5aafb8886fdbd8ab56a","modified":1560908796484},{"_id":"themes/next/layout/_third-party/tidio.swig","hash":"b44010cd577e4d063c3406772938c4b117ec7b7b","modified":1560908796484},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"cccd93d30787675010b1a74ef02eb5b813ec1d96","modified":1560908796474},{"_id":"themes/next/layout/_scripts/exturl.swig","hash":"c2e8f4b3a2bf991320ecc827dcdc227399ad5b51","modified":1560908796474},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"50c3ae6b50f173ae70f8c3312f7c6da1097eb9b6","modified":1560908796474},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"efb3404a3303622f3be60944d9d1926972c5c248","modified":1560908796474},{"_id":"themes/next/layout/_scripts/scroll-cookie.swig","hash":"8a992b7fe42b9c1a5eb9d937b0827aed91586d94","modified":1560908796474},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"b9b57e1735035319e200c22cf46a38b52b4e0d9c","modified":1560908796474},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cdb6152582313268d970ffeef99b4a8a7850f034","modified":1560908796494},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"a40ce6bc852bb4bff8b9f984fa064741dd151e96","modified":1560908796494},{"_id":"themes/next/scripts/tags/button.js","hash":"95a520f6529424a03c7ead6dbfd5e626d672febb","modified":1560908796494},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1560908796494},{"_id":"themes/next/scripts/filters/exturl.js","hash":"b19c7c1021e57367b3b3bbf5678381017ed5667d","modified":1560908796494},{"_id":"themes/next/scripts/tags/exturl.js","hash":"f9f25905adecfb8be49def4ff3b0b8bbc6955d84","modified":1560908796494},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"23d839333422375e85d44e476f554faf49973a3c","modified":1560908796494},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1560908796494},{"_id":"themes/next/scripts/tags/full-image.js","hash":"a6b2264215c555c553b2c5db85fa90678798d0d5","modified":1560908796494},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1560908796494},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1560908796494},{"_id":"themes/next/scripts/tags/pdf.js","hash":"ab995f0fc60d60f637220e2651111b775b8a06de","modified":1560908796494},{"_id":"themes/next/scripts/tags/tabs.js","hash":"72a5adbd8f300bee1d0c289367598ca06b2bed17","modified":1560908796494},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"ab4a82a7246265717556c7a42f897430340b88cf","modified":1560908796494},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1560908796494},{"_id":"themes/next/source/css/main.styl","hash":"5e7d28bc539e84f8b03e68df82292f7fc0f2d023","modified":1560908796524},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1560908796524},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1560908796524},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1560908796524},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1560908796524},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1560908796524},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1560908796524},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1560908796524},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1560908796524},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1560908796524},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1560908796524},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1560908796524},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1560908796524},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1560908796524},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1560908796524},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1560908796524},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1560908796524},{"_id":"themes/next/source/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1560908796524},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1560908796524},{"_id":"themes/next/source/js/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1560908796524},{"_id":"themes/next/source/js/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1560908796524},{"_id":"themes/next/source/js/js.cookie.js","hash":"f11e84def0352b7dd6393f1b83e55a40ab468686","modified":1560908796524},{"_id":"themes/next/source/js/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1560908796524},{"_id":"themes/next/source/js/post-details.js","hash":"7d309b771e86c7e22ce11cc25625481ef7d5985c","modified":1560908796524},{"_id":"themes/next/source/js/next-boot.js","hash":"696a0c2cf158001576d56b48195ec8e39e835b47","modified":1560908796524},{"_id":"themes/next/source/js/motion.js","hash":"d0a6d9dbcc57159e54bbb1f683b86632ae0b78f0","modified":1560908796524},{"_id":"themes/next/source/js/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1560908796524},{"_id":"themes/next/source/js/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1560908796524},{"_id":"themes/next/source/js/utils.js","hash":"fed16cd4fa5fac8cb4a63633d1840792a056f2be","modified":1560908796524},{"_id":"source/images/mysql/4.png","hash":"46b6b9d45667851be6ac8049d4fd021221a4c007","modified":1571713511280},{"_id":"source/images/git/14.png","hash":"8fd88702430adab7d6d8f5c2b2e1ad56cab4cd34","modified":1564488756285},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560908796514},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560908796514},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560908796514},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560908796514},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560908796524},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"25aea3d764b952f3f6d28ab86d7212d138e892df","modified":1560908796464},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1560908796464},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"03f669356bbaa70144b743f3312178e1981ac3a8","modified":1560908796474},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1560908796474},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"39c4ad0e36b7c1260da98ba345f7bd72a2ac0f2e","modified":1560908796474},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"e015c7d9b84062b60b15b36be3ef11929dd10943","modified":1560908796474},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"b57bf9c865bed0f22157176a8085de168a1aef77","modified":1560908796474},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"2b905ddd5dea8558c3fd95aacad241da6b6800f4","modified":1560908796474},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"fd079a414ca0f42f4cddd00247a9d5a5f58c4d8e","modified":1560908796474},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"f46699a9daa5fef599733cbab35cb75cf7a05444","modified":1560908796474},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"39fa6780b9515bc343898ff615c858206728cc3c","modified":1560908796474},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"be6683db6a269d83bb0441d7cf74db63a240fa8a","modified":1560908796474},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"fb7727e8ec63a58238a7206bf70eb273c8879993","modified":1560908796474},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f331ad02beea8990066d32ad6ec9f859672c3615","modified":1560908796474},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f14e9e8c27af82f1bfe794e252dec0d7e521f503","modified":1560908796474},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1560908796474},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"f62b801c7999da67b4bdca9c5e373b9b5ed039dc","modified":1560908796474},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1560908796474},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"31245e09ce0465b994cebd94223a531585c4eab4","modified":1560908796474},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"54b43d406cf37932e7b60f46814e864d31b1842c","modified":1560908796474},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c609097b95eb6127c2784f47f2230e6e6efc0be2","modified":1560908796474},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"66d562b3778dbc839f7c00103bd0099c5d61602a","modified":1560908796474},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"647e8677d1ccfb3f7918dd3ea2ff7078504a845d","modified":1560908796474},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"73576c9683d9ad9b124916dc6c660607fe7cc1fa","modified":1560908796474},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"83dd7df11b100bae38c9faab9a478f92149a0315","modified":1560908796474},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"335005a9f8b36349f0ad0a7beeba6969c55fc7f7","modified":1560908796484},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"e6fef337f500a331c59fb706368a7cf9513fde0f","modified":1560928056263},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"f648e5bf8c5dfc74143233976ed4ff5978deda43","modified":1560908796484},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"623e73bedef067ac24a398ef27c8197295da872d","modified":1560908796484},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"8ab040fccba41675bc835973515530af8a51f8bd","modified":1560908796484},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"d68da660cd1cc8fb3ff0a81178decadb620afc11","modified":1560908796484},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"39928f358dd13d9fc1a4641800e57be157ecd815","modified":1560908796484},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"d18c87d7839e7407e39acd2998bcc9e0b34611b0","modified":1560908796484},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"807aec0e3eae6dae4b972e301259f63dd4c64490","modified":1560908796484},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"a22d1ea29a5ffe46199ab7d108a291a05af8d5b6","modified":1560908796484},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"4cff8bf5c42c62f7f0ac1f0d70f839dae39ba77a","modified":1560908796484},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"bc3fc9d053b3d1fc0cd3918bf9a629a6f38f6414","modified":1560908796484},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"280ff4282396beb53fb3913f58c6b5890bd1c9ef","modified":1560908796484},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"3da014b25f9ac804eda1614591706e3733c0d2c5","modified":1560908796484},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"1a5d94f5779a2ce13abc886dd78e0617f89c34b9","modified":1560908796484},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"4e86e1ace90a70bb8862f5e6de9dbe7bfc046bee","modified":1560908796484},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"9a4923d2aa5182531ea7a7fb9abe824450026208","modified":1560908796484},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"b3818fd0b3028dadf341b6d0b180e1243683de6a","modified":1560908796484},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"1b72c755101c9dfb85da13df9a0abccf37cd1dd2","modified":1560908796484},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"ea1c136f960667a0a13b334db497b9b19c41f629","modified":1560908796484},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"43a20fa0e9ae2f4254f04813f9c619dd36b49ae5","modified":1560908796484},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"767ba29f258db5d2e5baf875a6f36ac1d44df6a3","modified":1560908796484},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"143ef265c96a8ea2fb93c36c5ffb9c5e940f7693","modified":1560908796484},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"078bd2d5815eb23e8c5f74467dc0042babea00ae","modified":1560908796484},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"d45ca53af17d1d83fd27f8ed0917a72f0060e1a9","modified":1560908796484},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a62c93f19429f159bcf0c2e533ffc619aa399755","modified":1560908796474},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7ef07edd2a97a3774229990d2f0a6eefa31bd015","modified":1560908796474},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"3c548934b97cc426544947f7a2ae35c270b5e33f","modified":1560908796474},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"828eb9c47f34090c841a2e9a0b3f31b0e4ccf40a","modified":1560908796474},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cf87ab778618a32119ec1c4ac2079a51385b1913","modified":1560908796474},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1560908796514},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"1aabac9e37a8f4451c86d09037b3a1f8b30eaf5e","modified":1560908796514},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"fe30b2a55075b9ca018ad6e00f5db14e6064a5d2","modified":1561087288088},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"21a14a19149f1cb8e011c477f29dd1352675605b","modified":1560908796514},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1560908796514},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e9b0752f08398709e787546a246baca12b4c557f","modified":1560908796514},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"da7049f3d9a157abe0ecc62611edcf43605ba84d","modified":1560908796514},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ebc95eeb8966d17cdc7dd0de009deaef1fe65064","modified":1560908796524},{"_id":"themes/next/source/js/schemes/muse.js","hash":"ccc0c5cd4ec6f8159c98990ad83f11a5c0b0234c","modified":1560908796524},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"3eea56cc9ce47bb4760930c4c69cebf847a7fbb2","modified":1560908796524},{"_id":"themes/next/source/lib/Han/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1560913843795},{"_id":"themes/next/source/lib/Han/README.md","hash":"990d5f1127a0c147902f5f5dfe7b9b60f5a10470","modified":1560913843795},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1560908796524},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1560908796524},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1560908796524},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1560908796524},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1560908796524},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1560908796534},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1560908796534},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1560908796534},{"_id":"themes/next/source/lib/jquery/index.js","hash":"b15f7cfa79519756dff1ad22553fd0ed09024343","modified":1560908796534},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"5c0ca7f801859cff254d2f5b7d1a70d66ff61a8d","modified":1560908796494},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1560908796494},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"997058180065d986e05df72992cc2cbfd7febd7e","modified":1560908796494},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"463817cbbd804ce134cb3e7e721431cb0e1616f2","modified":1560908796494},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"9fd526db0527c71243f05e18086f937dc67b1c3e","modified":1560908796494},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"afdd21533db18d846e1a2663b1199761b1bd2c1e","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"cfa64bd8ee2ff9f943673e339d69341e76fbf031","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"a4c6ee546a94fd69e5b7a1e4c054ab8cacb73d2a","modified":1560908796504},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"40144394fdfe05d400f39f6763f66f75479a2e34","modified":1560908796514},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"35c6fd7eab3779bd9e38b7ba8825ab0c67a1be7a","modified":1560908796514},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1560908796514},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"9c6194177533619a6f6685dc7e890dcbec456241","modified":1560908796514},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1560908796514},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"fec36a14080104b5862e9f021eab117d87c5f7c5","modified":1560908796514},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"107f42aa590ec4ba0765a0bc5d735f0f09edc0ff","modified":1560908796514},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"1a4ac0d119f2126ef8951897338706edce112235","modified":1560908796514},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1560908796514},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"8da8416213127595dfc4d2b358639194647e7bd3","modified":1560908796514},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"40f266e24af4dedc9497056ab18ebcfda38dd47d","modified":1560908796514},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"6aee54cd5a20181e18596565356bd54c66e33823","modified":1560908796514},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"04706657af638f2746ae59520e6fc78577c7682c","modified":1560908796514},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"157e6915dcf5990566e463acffa71043b2651c07","modified":1560908796514},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"25f05ed8da68d034dce7f06e0f20f6cd55841070","modified":1560908796514},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"6aee54cd5a20181e18596565356bd54c66e33823","modified":1560908796514},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1560908796514},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"b9619c9827f969ca2e2f5878552362a7b858918f","modified":1560908796514},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"06d9d00257abd28414ec0b746f866bf9911cf5ec","modified":1560908796514},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"a609ff811f2b2764f5470236fe2fb1f3aa6ccba5","modified":1560908796514},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"234b44cfd03f9c9e3e179ff5fd698ac876341913","modified":1560908796514},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"e73d6da74c5755442e831d8fd7d922c5b32bd892","modified":1560908796514},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"adb7379f3b9001840eb38b260434e89365771a81","modified":1560908796514},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0b3001909f3446843b226030524ea8498d4d8997","modified":1560908796514},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0d6f0df798449b710e1e5dbd43d470089b2a3c95","modified":1560908796514},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"5b5e0a02a7bf63de9efcd33a4e482939cce5822d","modified":1560908796514},{"_id":"themes/next/source/lib/Han/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1560913843794},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1560913843798},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1560913843800},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1560913843800},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1560908796524},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1560908796534},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1560908796534},{"_id":"themes/next/source/lib/Han/.git/FETCH_HEAD","hash":"537c3549cfa4afbdc8521eb28284118da98b2179","modified":1560913910856},{"_id":"themes/next/source/lib/Han/.git/ORIG_HEAD","hash":"51faea5cd9b558363c460cd1fb22b20e81b1715f","modified":1560913910901},{"_id":"themes/next/source/lib/Han/.git/config","hash":"bdc479aba5357f8dfc01db46cea9abcf2743fdd7","modified":1560913843786},{"_id":"themes/next/source/lib/Han/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1560913843782},{"_id":"themes/next/source/lib/Han/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1560913830078},{"_id":"themes/next/source/lib/Han/.git/index","hash":"6bd0ede0fb032d1ed46c9029984ed2383a0bdf1f","modified":1560913843801},{"_id":"themes/next/source/lib/Han/.git/packed-refs","hash":"f2d02ddb66a0daab04792c58479b228feda2f951","modified":1560913843779},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1560913843799},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1560908796534},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1560908796534},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"c9cfb4b99e1ec8ec9cf075cb761b8f7fa5fe63fd","modified":1560908796494},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1560908796494},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"2df409df04fdb52d7234876a9f6e502edd4e3929","modified":1560908796494},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"a8f4d4b86acaa34c99111b2dde5d0779cc7e0de6","modified":1560908796494},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"3a0efe849587b34f20d4e260028dc799215b0bb3","modified":1560908796494},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"33200f60bd6a8bbfc66dd49a239bcc75c2f564c1","modified":1560908796494},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"024e8ff40ca881c6fbf45712897e22f58a3811ab","modified":1560908796494},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"b8647d6140141b0a160607f6353e4d4594cca92e","modified":1560908796494},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"9c1a082e6c1f96187a099c3f4cb5424c0c9fd06e","modified":1560908796494},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fa1cea6fcc3f552d57cc7d28380a304859139bf6","modified":1560908796494},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"e5a5f8747fdf2ca960e4e73c081b8952afd62224","modified":1560908796494},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1560908796494},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1560908796494},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"9a8fb61bd2d184de9d206e62ba8961d1845c5669","modified":1560908796494},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a73346f999b31355075cd58637946a8950cf6f7e","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"f3b0d259e991ac86454ae5eac6bc94dc8691d8c9","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"c27527cdeb9e3a9f447f7238f442a5dc33fde4e6","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"b6a241626783d2ac115d683fd59ec283af68e5bb","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"f14cefc99309934d4103a3aa785e1258d858813f","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"c97c819a65f6967485184399397601e5133deda6","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"4aad8e36178faaa71a767af0084d578df4c09f73","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d77f85d3af2d7090d84b28ab01c6a49f92eec647","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"13d365ee626c01f17ec664b3f54f51d8b9ee7cf4","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ccd0b1309acff0c676fdcc848a8ae2d05f0369ab","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"c8009fd9598a661b7d23158b5121b6ac266939e9","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"539fc0880b2e035e8316d5d4b423703195c1b7ba","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"981795aad232c8bd3f52a0ed8720db696d18a234","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"615fca7dff197a2ca3df674cf963ce70b8525985","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"03a4e75e963e3e7cc393d588b1495a88d52e0e40","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"e58bb8b7127aa21e8260493a425ec00fcb25d338","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"a5484d8436b2b7862faf6e7309a9e7b88cdd0027","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"b36eea093bd4b32056b5de6f370ff57e50b25a49","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"ab1776c5dc537beabb0ab81a0f04e08bebad070b","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"7e2ba73073daaea0a18c3d67ff137dd683af7011","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"0eadef0381f696de7f88d7dc5f0ddc3cd5d309b3","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"9204c79c05d620ecd5d411cdf11e27441b6281dc","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"ed3a2960ebce7396d1893bb8e08c99c7d9259140","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"fde59300ec38868676ff5ed495b9dc9b02d07ffc","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"b43421291bf85b589e8d0ec853e238d36ab80631","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"3cb387fa70017f3c24a1a1884461d29deda54585","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"3baeeb51cfe123e99235ee1816d0e1f6a97c7852","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"020fac447d7a17c03e2802f0f724ae0738088354","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"4305813408a1cd6aba764a7769b94b081d383d4f","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"1df9d36e2b0e9c94e0a959acc136026405ae0d73","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"da7a21f5a2f7dcf4c5a4788d7670159ca4132b65","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"2fbe52f955da41c7a14eb09918bf86a252e4504f","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/third-party/copy-code.styl","hash":"d9c244b1c3a09a7fccd3c3f732e6fb112a8cd565","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"a01484e350ad5fc9b1fdfbfafb2ddd9687ad4d20","modified":1561030453625},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"2a1008f1044b450b806adc166754ba9513e68375","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"6880467b4f6d7b057fb8291aa10966429a0a3bff","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"35dc9f3990fadff3ea038d4e8ac75923219886ed","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"9801977a23268e36c5deefd270423f6f1a0c3bb2","modified":1560908796514},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"ed8a12982c0497eeb9d7642781abeb801428f83d","modified":1560908796504},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7cf42f96ba6b249c75e00dad251ebacf7de61e6c","modified":1560908796514},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1560908796514},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1560908796514},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1560908796514},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1560913843795},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1560913843796},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1560913843796},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1560913843797},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1560913843797},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"fc94dd09b4245143b452d6cf2fc4c12134d99d6d","modified":1560908796504},{"_id":"themes/next/source/lib/Han/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1560913830079},{"_id":"themes/next/source/lib/Han/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1560913830080},{"_id":"themes/next/source/lib/Han/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1560913830079},{"_id":"themes/next/source/lib/Han/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1560913830080},{"_id":"themes/next/source/lib/Han/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1560913830079},{"_id":"themes/next/source/lib/Han/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1560913830080},{"_id":"themes/next/source/lib/Han/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1560913830081},{"_id":"themes/next/source/lib/Han/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1560913830081},{"_id":"themes/next/source/lib/Han/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1560913830081},{"_id":"themes/next/source/lib/Han/.git/logs/HEAD","hash":"727b5c7974f4f7f3f2d7eed3b5f1a4eff1551a19","modified":1560913843784},{"_id":"themes/next/source/lib/Han/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1560913830081},{"_id":"themes/next/source/lib/Han/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1560913830082},{"_id":"themes/next/source/lib/Han/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1560913830082},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1560908796534},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1560908796534},{"_id":"themes/next/source/lib/Han/.git/objects/01/1e06c7aa90464f2b1d40aae05cf9d69e7667f1","hash":"e9888d4243b096c91da6cd30a348734b88c652e4","modified":1560913836802},{"_id":"themes/next/source/lib/Han/.git/objects/12/e5ad35b941c6dc1c10c0db6a04cd7bc7136d79","hash":"65020d9c30858a2131ec75547ad8daff94916274","modified":1560913834137},{"_id":"themes/next/source/lib/Han/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1560913834179},{"_id":"themes/next/source/lib/Han/.git/objects/02/c49afbd642c373142ce96b321820b2e31136dc","hash":"1e84c7eb747dd99355ec99a190aca59f10f38a61","modified":1560913838668},{"_id":"themes/next/source/lib/Han/.git/objects/14/222c5cf0874b3d006fcab6244c9e34c13cae11","hash":"32841604a28018f255ed74be25a3fed374729561","modified":1560913843405},{"_id":"themes/next/source/lib/Han/.git/objects/14/ffa69f0388b6648af6e413387201f1c5dc34b2","hash":"d94589ced41c1438b11e1a02ae2ed8695ec4bfe3","modified":1560913833815},{"_id":"themes/next/source/lib/Han/.git/objects/1b/d905fca417b7dc6e1091fbf5dcb99a8e3f44a3","hash":"f904eb01291a0c87f34747183435918e4696a960","modified":1560913833881},{"_id":"themes/next/source/lib/Han/.git/objects/1b/2d9ec86c12358ba35f7db597cccb93c4977154","hash":"7e90faafec65ae60455922b819ad373460c708c4","modified":1560913843580},{"_id":"themes/next/source/lib/Han/.git/objects/1a/dff38de35c5dcd90b1c9abb363d60cedc677c3","hash":"e3bb99642f5f820b6e41c5a2dbeaa5a5e7629cf9","modified":1560913833987},{"_id":"themes/next/source/lib/Han/.git/objects/47/b5af07d4d3fd429c6f4b405ff9acd5f4ee7975","hash":"0e69266d563abb092c5b40035331345f771021c2","modified":1560913843371},{"_id":"themes/next/source/lib/Han/.git/objects/2c/e2f46ca183a46f1b06517b1a2a8f96bcaab1b8","hash":"e9a8ddf8b0af2f52063c05075df107b7aacc0d91","modified":1560913834704},{"_id":"themes/next/source/lib/Han/.git/objects/29/c753eafb74ec88615f947d25acb4659340747d","hash":"5d0cc15f306cc2c34a9107c6aeb3576b90343956","modified":1560913843165},{"_id":"themes/next/source/lib/Han/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1560913834212},{"_id":"themes/next/source/lib/Han/.git/objects/57/3ad3f32f0689138c4d6f7007621e0cf2bf23ea","hash":"fdb2d9e977cbbd0b44059cf61d5baad92f9df016","modified":1560913843707},{"_id":"themes/next/source/lib/Han/.git/objects/4b/5f7d0162b051571cc9d87ba674ef913a7c5a29","hash":"8738e2f3453a3192d07fb0267d9f9194b910bee7","modified":1560913834387},{"_id":"themes/next/source/lib/Han/.git/objects/5f/7d3c8d8a6340f1efccc4b3eac842788c1628ec","hash":"af2accb69f344e9cfc870ca7dbe8d25c9e103318","modified":1560913833847},{"_id":"themes/next/source/lib/Han/.git/objects/72/c270d58afaf026bd65fea390e277b6d63aa22f","hash":"2ebc915da4f2146762025c321bbd54fca1e7b9eb","modified":1560913843480},{"_id":"themes/next/source/lib/Han/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1560913834254},{"_id":"themes/next/source/lib/Han/.git/objects/6c/cc84f8ea3543926a1a1e78b5c50a56c0dc8025","hash":"8b4b97a1e3e0089940bc797e8ee3d6eca9d09d28","modified":1560913834962},{"_id":"themes/next/source/lib/Han/.git/objects/7d/713d14ed6c435cc41223736376f9e41f8001ed","hash":"fe9cd361e4ab229e32f8a0303b108a5386d09429","modified":1560913843253},{"_id":"themes/next/source/lib/Han/.git/objects/8a/7ee041ca7a999ccd5f35177f9f806232b93738","hash":"627b29c5fa02783ab8130433036db571143e564f","modified":1560913834354},{"_id":"themes/next/source/lib/Han/.git/objects/84/5b1bc2898c9924eff3e1b0bd92b6178b4908db","hash":"7c8453a9632d2e4b2720c4a7d50b289936699d1c","modified":1560913834862},{"_id":"themes/next/source/lib/Han/.git/objects/77/8fba47fc8f68467fb45002edcd717a71a4ea18","hash":"896ae007894c3f537f1723674f06740489bbf73c","modified":1560913843305},{"_id":"themes/next/source/lib/Han/.git/objects/75/976c6dc20178b5d24b07ba76700a73205a9b52","hash":"532198fa938fafd2b53dd45193e65a7c8c0f8c84","modified":1560913841681},{"_id":"themes/next/source/lib/Han/.git/objects/aa/9916f898bfa69c88a84d6f0e99a549c8831d07","hash":"74c546dc2710eba88138d6a12df1d3e05e03ae35","modified":1560913843614},{"_id":"themes/next/source/lib/Han/.git/objects/9b/afab6ef59ce585cbc456d03770e167d2a3c9e2","hash":"32c4243f56b9334f340559d9e7bb7140aadb5959","modified":1560913838803},{"_id":"themes/next/source/lib/Han/.git/objects/a3/8e5bd4193fa1f52aa27eb2a7f32cf103d20a57","hash":"d8897f2030f55a50c5dcea877dd5b0f9a3a977d5","modified":1560913833949},{"_id":"themes/next/source/lib/Han/.git/objects/b3/7c278058df61bbd959c9f775f80f3a24b49a16","hash":"3429c10084546b79746b6b0e9f3e4b29fa6443e4","modified":1560913834055},{"_id":"themes/next/source/lib/Han/.git/objects/a5/57ad3eeef222d2387e98f4418b0438655a2765","hash":"cdaa150ec84c29d84750ef44aa586a600f901d63","modified":1560913843212},{"_id":"themes/next/source/lib/Han/.git/objects/ad/cf15c7f3d6cb69da502326740997e4a0e3bae3","hash":"0d53088c3633db9d45f69b6c12fd3f2cd4d53062","modified":1560913834095},{"_id":"themes/next/source/lib/Han/.git/objects/c3/a4e2326f7650fde4756dadf7c67484cf14aa4b","hash":"4b0e77607c87ea06fe9b612b8ee7cd99f87be559","modified":1560913834280},{"_id":"themes/next/source/lib/Han/.git/objects/af/46be34010c865593eec22d79552334f3fac3f1","hash":"5d8888376467232bd9a13f99c8c76a386a5505e5","modified":1560913843271},{"_id":"themes/next/source/lib/Han/.git/objects/cb/cf355438829a21ee86cb3f116a68daab599b5d","hash":"163216cd6c2b363b3bbdf32da39142dbd4ca690b","modified":1560913834321},{"_id":"themes/next/source/lib/Han/.git/objects/d3/6ccff12388f072c23857d33c6abd1f57b3dc86","hash":"a8d4bddb3c913051763dc7d2d3cfc243ef181701","modified":1560913833914},{"_id":"themes/next/source/lib/Han/.git/objects/e2/d2e185fbd7d888a3658fe97dde4ba595290caf","hash":"4edae1bf781e76b61bdc43395a76574c0d20107b","modified":1560913843438},{"_id":"themes/next/source/lib/Han/.git/objects/e1/f0b9c30d5426977a4685d63a0cef6fd6abdd89","hash":"103eeacd4a6750c0e7313b84a571373fa8369579","modified":1560913834031},{"_id":"themes/next/source/lib/Han/.git/objects/e6/02654d32318f5c7135c521ee586f93235452a7","hash":"c6dc38516b0cefe68f0d466f43afffc9d31c2428","modified":1560913843546},{"_id":"themes/next/source/lib/Han/.git/objects/f0/a838932f748272263bc294b178b9a3297a1295","hash":"77694c0d730fa2582dc473d3d3ee782156f4cf74","modified":1560913843513},{"_id":"themes/next/source/lib/Han/.git/objects/e7/237bfe33deeeec901fb5f0a60bac33cbb446d7","hash":"6589766fc012cfd184f634e3747d944efe405797","modified":1560913843338},{"_id":"themes/next/source/lib/Han/.git/refs/heads/master","hash":"51faea5cd9b558363c460cd1fb22b20e81b1715f","modified":1560913843784},{"_id":"themes/next/source/lib/Han/.git/logs/refs/heads/master","hash":"727b5c7974f4f7f3f2d7eed3b5f1a4eff1551a19","modified":1560913843785},{"_id":"themes/next/source/lib/Han/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1560913843782},{"_id":"themes/next/source/lib/Han/.git/logs/refs/remotes/origin/HEAD","hash":"727b5c7974f4f7f3f2d7eed3b5f1a4eff1551a19","modified":1560913843782},{"_id":"source/_posts/docker-redis-master-slave.md","hash":"539aa0a339fd8787e0d98c2790224f8ce070ff97","modified":1647866509421},{"_id":"source/images/redis/courgette.log","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647856391348},{"_id":"source/images/redis/redis-master4.png","hash":"f3005dd557e16170b003f851a1306c6d05d3a526","modified":1647594138764},{"_id":"source/images/redis/redis-master2.png","hash":"e7bb844f7214c7ff5c76f41f97436e106060ff2f","modified":1647593826092},{"_id":"source/images/redis/redis-master1.png","hash":"23dbeb664241ec422133012518f580e563b34558","modified":1647593798108},{"_id":"source/images/redis/redis-sentinel1.png","hash":"5552151cb0b4093428e9ad828648b848008d2253","modified":1647845033651},{"_id":"source/images/redis/redis-sentinel5.png","hash":"f53f6ef5aff05d79941f7b55f83c93d6f89edbb5","modified":1647846015888},{"_id":"source/images/redis/redis-sentinel6.png","hash":"c9fcbdb5f9b3bb646b8a3fde039bb53863083ff6","modified":1647846039380},{"_id":"source/images/redis/redis-sentinel7.png","hash":"01cc29b0bf7aa9294c222d4033706fccb0558069","modified":1647846321498},{"_id":"source/images/redis/redis-sentinel2.png","hash":"fd9ce13be97090da42b276b2dcaa8a1eb929a5ea","modified":1647845349223},{"_id":"source/images/redis/reids-master3.png","hash":"f708ce6dd7aa2d359193f3c048dab37e5b79d060","modified":1647593988350},{"_id":"source/images/redis/redis-sentinel3.png","hash":"68a465420c57a4baa3b8fcc392ba73186f973ff4","modified":1647845486041},{"_id":"source/images/redis/redis-sentinel4.png","hash":"f2fdb335a42c7e676ce7ca968b1d422980ff1622","modified":1647845619687},{"_id":"public/search.xml","hash":"53a7ce10cc0f88095fe4435c53461c6987f99b5a","modified":1647866873060},{"_id":"public/achives/index.html","hash":"e39bab366e573c95b7432a0ece7a40b27025d7e4","modified":1647866875679},{"_id":"public/about/index.html","hash":"b3caaacfe8a892e877d3169b3439b5c2fe2c5240","modified":1647866875679},{"_id":"public/2022/03/07/linux-nload/index.html","hash":"ec26dc1523ae34ab8a7e74e10652cfa58b002989","modified":1647866875681},{"_id":"public/2021/05/24/web-security_2/index.html","hash":"d35d926665506d164d310021d5fde4bf68fdfb26","modified":1647866875697},{"_id":"public/2021/05/24/web-security_1/index.html","hash":"e08a2fe14f48eb4c464436056255288cfa698d8f","modified":1647866875697},{"_id":"public/2020/12/16/docker-vsftpd/index.html","hash":"6099fc06dc55c69ca3287cdc991b151a42556265","modified":1647866875697},{"_id":"public/2019/10/22/mysql-install/index.html","hash":"f6c6a365e6338ff9be3bbf22d5a96bbf2f1182bc","modified":1647866875698},{"_id":"public/2019/09/30/postgresql-locktable/index.html","hash":"ca04ad9b5028cc635e8f612a3bb8f95f96b5ac9c","modified":1647866875698},{"_id":"public/2019/08/08/docker-mysql/index.html","hash":"760399537db7a96064b82a0ea535025dd81a05c1","modified":1647866875698},{"_id":"public/2019/07/19/git-bash/index.html","hash":"3798454b681639c673fd4266863303295647583f","modified":1647866875698},{"_id":"public/2019/07/10/design-pattern/index.html","hash":"e52f370d5f11c774bbea6a4a23e0171b9d4c3463","modified":1647866875698},{"_id":"public/2022/03/15/docker-redis-master-slave/index.html","hash":"ffe320cc641c4cd29a8a4e8e9fc0e1dfc45efea3","modified":1647866875769},{"_id":"public/2022/03/07/linux-user/index.html","hash":"b5b4f5131c1045b090b2fe4a84dcbc2ae84f66d0","modified":1647866875769},{"_id":"public/2019/07/03/git-cmd/index.html","hash":"014ccbd999349b0c5799f116428801ac414a3379","modified":1647866875769},{"_id":"public/2019/07/01/java-removal/index.html","hash":"25bc4e82d9e181d2e9594a4b7b2dba6a68443c75","modified":1647866875769},{"_id":"public/2019/06/29/docker-nginx/index.html","hash":"4d6c4685c962719bd12ce0cf7c5d487b7d13a510","modified":1647866875769},{"_id":"public/2019/06/21/nginx-proxy-config/index.html","hash":"cb8b8b75327d3a46dd52e5fb6500a6b8ef9f5439","modified":1647866875769},{"_id":"public/2019/06/21/nginx-proxy/index.html","hash":"a5f028dac4c46c578b5361479e456e8fc5ff5fbc","modified":1647866875769},{"_id":"public/2019/06/20/docker-springboot/index.html","hash":"80e4689cbf7b826ef986baccc1d09e58eb149071","modified":1647866875769},{"_id":"public/2019/06/20/docker-redis/index.html","hash":"05e6300f5c7a66307990256d57492b941c86e6ad","modified":1647866875770},{"_id":"public/2019/06/19/docker-postgresql/index.html","hash":"4424d41cb629a30466d9c2ce2a45ad7aced6d399","modified":1647866875770},{"_id":"public/2019/06/19/docker-install/index.html","hash":"498103fdcf1f22b22345478cb516ab3fc6b519fe","modified":1647866875770},{"_id":"public/categories/index.html","hash":"cbc67a6d8304e97e17d7eb1a09785d4119b2ca86","modified":1647866875770},{"_id":"public/tags/index.html","hash":"66b1215a0b65781a14ff39dbae4d7ce1b256a807","modified":1647866875770},{"_id":"public/archives/index.html","hash":"4d50b00e91bfd698c540df569c0b6a66428f55a5","modified":1647866875770},{"_id":"public/archives/page/2/index.html","hash":"989f9125e5c970c24fd78d14f4c5e008c23a855b","modified":1647866875770},{"_id":"public/archives/2019/page/2/index.html","hash":"61aad3e7ea1b255670c94d1f7990b9c476ea8df5","modified":1647866875770},{"_id":"public/archives/2019/index.html","hash":"858bf7656b9dc66200e0a91ceffc6b7ed215575e","modified":1647866875770},{"_id":"public/archives/2019/07/index.html","hash":"b9f675b763b1fcf4d9b0c034b60fff919adaee6f","modified":1647866875770},{"_id":"public/archives/2019/06/index.html","hash":"ddb668e96d030589028cd91366c1b9fcfcf9081a","modified":1647866875770},{"_id":"public/archives/2019/08/index.html","hash":"f9c02831a0807b2a8bfec9628d31f1e7746f5f88","modified":1647866875770},{"_id":"public/archives/2019/09/index.html","hash":"fea60d8f3235c2a85c1e8c089b2583f536bda14f","modified":1647866875770},{"_id":"public/archives/2019/10/index.html","hash":"5ad070e8bb8fab45c83ed838fb1cd5668e5c201e","modified":1647866875771},{"_id":"public/archives/2020/index.html","hash":"73049f8a03746941d7234e125f7f73162bbb706c","modified":1647866875771},{"_id":"public/archives/2020/12/index.html","hash":"2654c185d471ab358c60697a3406b5d88d3e4ea6","modified":1647866875771},{"_id":"public/archives/2021/index.html","hash":"b3ce35f8d7f2552d8aeb2b28d97aae5f7330db95","modified":1647866875771},{"_id":"public/archives/2022/index.html","hash":"6fab67c639eab9e950e155f28c768771d7576eee","modified":1647866875771},{"_id":"public/archives/2021/05/index.html","hash":"e242e2b118ea0a5f587b2279f4517e71fc9af907","modified":1647866875771},{"_id":"public/index.html","hash":"9e7ea9a43b57881f094d7260e18c37b2d2a9f54d","modified":1647866875771},{"_id":"public/archives/2022/03/index.html","hash":"9e36d448b81a1bdba9b9f102b93173f5e4d53211","modified":1647866875771},{"_id":"public/page/2/index.html","hash":"774534d7ec4ecdb58d2709360d20fe1cc40c74d7","modified":1647866875772},{"_id":"public/categories/docker/index.html","hash":"748a5e8890589c2211479fafc71458530f2a861d","modified":1647866875772},{"_id":"public/categories/git/index.html","hash":"5b7dfe8c50b10deb5aba2f380108984359523a20","modified":1647866875772},{"_id":"public/categories/java/index.html","hash":"a390d1fbbe44dc605931036a71e19cc4089f471b","modified":1647866875772},{"_id":"public/categories/linux/index.html","hash":"50c711208867df572f9a1c1238d5ecef56761b97","modified":1647866875772},{"_id":"public/categories/nginx/index.html","hash":"4e3a2fd115611665d1bfbb52eb61b3c9520c8de1","modified":1647866875772},{"_id":"public/categories/postgresql/index.html","hash":"46bb6ea9b1e474052365dd89af4ec4a5a5123122","modified":1647866875772},{"_id":"public/categories/security/index.html","hash":"317d649b9fa16a7c90044881c71e9db88c49f1d1","modified":1647866875772},{"_id":"public/categories/mysql/index.html","hash":"9520bd5233157b5718dd2e1537bd369ff8455c12","modified":1647866875772},{"_id":"public/tags/docker/index.html","hash":"87413825dfb54f16b2038804b3d0583d49418eac","modified":1647866875772},{"_id":"public/tags/redis/index.html","hash":"66121bd4b323a9785636d5a4a80bfbe0bbabe9e2","modified":1647866875773},{"_id":"public/tags/nginx/index.html","hash":"aa6297f43676fce02720a158b148575fb3b40538","modified":1647866875774},{"_id":"public/tags/mysql/index.html","hash":"6575c13cc51d8dde3e965dfbe594c81103823dc6","modified":1647866875774},{"_id":"public/tags/postgresql/index.html","hash":"99fa05c7e73efeaab5ecff1cff715b561b518d21","modified":1647866875774},{"_id":"public/tags/git/index.html","hash":"ec78b10578a6749c322a658337baf63825c67a1c","modified":1647866875774},{"_id":"public/tags/linux/index.html","hash":"d18df9a65ef4ff8e9e195973fc35cf27338e46b9","modified":1647866875774},{"_id":"public/tags/springboot/index.html","hash":"6b5f3a4cf6a303762b09569b11e3107e1867efef","modified":1647866875774},{"_id":"public/tags/java/index.html","hash":"04f314211990683daf112afdb822d866dbf9b252","modified":1647866875774},{"_id":"public/tags/nload/index.html","hash":"8bd9bfc6848d11e2a529d153f13669f2fcbab8b5","modified":1647866875774},{"_id":"public/tags/vsftpd/index.html","hash":"a00dd5cce1f094e288393981af8cc3629f76175f","modified":1647866875774},{"_id":"public/tags/proxy/index.html","hash":"4de916f9341112e424d82d0be87f5b850540e2dd","modified":1647866875775},{"_id":"public/tags/web/index.html","hash":"3d11d42ba7e5d38d99a442deb963838ac7a28d58","modified":1647866875775},{"_id":"public/tags/security/index.html","hash":"91154c0729e068b21702622ac894067147c17c6a","modified":1647866875775},{"_id":"public/images/redis/courgette.log","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647866875775},{"_id":"public/categories/redis/index.html","hash":"4b382cdada3ac9f3b862a24f05422aacdaaf24b2","modified":1647866875776},{"_id":"public/images/linux/useradd.png","hash":"a1df93f542c24ca46571a7efc0bb0a1baf802839","modified":1647866875777},{"_id":"public/images/redis/redis1.png","hash":"02ad5cbd2e404ebb5d1c7db1e155b7ccab423ab3","modified":1647866875777},{"_id":"public/images/redis/redis2.png","hash":"b839d9557813753dc9fd2bd14f89bae169676e12","modified":1647866875777},{"_id":"public/images/redis/redis-master4.png","hash":"f3005dd557e16170b003f851a1306c6d05d3a526","modified":1647866875777},{"_id":"public/images/redis/redis-master2.png","hash":"e7bb844f7214c7ff5c76f41f97436e106060ff2f","modified":1647866875777},{"_id":"public/images/redis/redis-sentinel1.png","hash":"5552151cb0b4093428e9ad828648b848008d2253","modified":1647866875777},{"_id":"public/images/redis/redis-master1.png","hash":"23dbeb664241ec422133012518f580e563b34558","modified":1647866875777},{"_id":"public/images/redis/redis-sentinel5.png","hash":"f53f6ef5aff05d79941f7b55f83c93d6f89edbb5","modified":1647866875777},{"_id":"public/images/redis/redis-sentinel6.png","hash":"c9fcbdb5f9b3bb646b8a3fde039bb53863083ff6","modified":1647866875777},{"_id":"public/images/redis/redis-sentinel7.png","hash":"01cc29b0bf7aa9294c222d4033706fccb0558069","modified":1647866875777},{"_id":"public/images/redis/redis-sentinel2.png","hash":"fd9ce13be97090da42b276b2dcaa8a1eb929a5ea","modified":1647866875777},{"_id":"public/images/redis/redis-sentinel3.png","hash":"68a465420c57a4baa3b8fcc392ba73186f973ff4","modified":1647866875777},{"_id":"public/images/redis/reids-master3.png","hash":"f708ce6dd7aa2d359193f3c048dab37e5b79d060","modified":1647866875777},{"_id":"public/images/redis/redis-sentinel4.png","hash":"f2fdb335a42c7e676ce7ca968b1d422980ff1622","modified":1647866876288}],"Category":[{"name":"docker","_id":"cl0rqqlyj0004ugqsxg2y5i8j"},{"name":"git","_id":"cl0rqqlz4000nugqsqi7kni1x"},{"name":"linux","_id":"cl0rqqlz7000vugqsvfcyyrdb"},{"name":"java","_id":"cl0rqqlzb0011ugqsweiy2fw3"},{"name":"nginx","_id":"cl0rqqlze0019ugqsiyw04ca4"},{"name":"postgresql","_id":"cl0rqqlzj001lugqstcj7cnum"},{"name":"mysql","_id":"cl0rqqlzk001rugqsyp3ajdjc"},{"name":"security","_id":"cl0rqqlzm001wugqs4atdjqo1"},{"name":"redis","_id":"cl0rrt5kx000cywqsziasqcuj"}],"Data":[],"Page":[{"title":"about","date":"2019-06-19T03:48:09.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-06-19 11:48:09\ntype: \"about\"\n---\n","updated":"2019-06-20T06:37:56.262Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl0rqqlye0001ugqs2oj14xma","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"achives","date":"2019-06-19T03:49:52.000Z","type":"achives","_content":"","source":"achives/index.md","raw":"---\ntitle: achives\ndate: 2019-06-19 11:49:52\ntype: \"achives\"\n---\n","updated":"2019-06-20T06:35:35.115Z","path":"achives/index.html","comments":1,"layout":"page","_id":"cl0rqqlyh0003ugqs3j8e95ho","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2019-06-19T03:49:44.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-06-19 11:49:44\ntype: \"categories\"\n---\n","updated":"2019-06-20T06:34:59.440Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl0rqqlyo0007ugqsfkssifk5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-06-19T03:48:14.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-06-19 11:48:14\ntype: \"tags\"\n---\n","updated":"2019-06-20T06:35:44.851Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl0rqqlys0009ugqsiuyo3lam","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"centos7下docker安装","date":"2019-06-19T09:33:29.000Z","_content":"\n### 检查Linux内核版本，docker要求3.10及以上\n```bash\n$ uname -r\n```\n\n### 安装docker\n```bash\n$ yum install docker\n```\n\n### 启动docker\n```bash\n$ systemctl start docker\n```\n\n### 查看docker版本\n```bash\n$ docker -v\n```\n\n### 停止docker\n```bash\n$ systemctl stop docker\n```\n\n### 开机启动docker\n```bash\n$ systemctl enable docker\n```\n","source":"_posts/docker-install.md","raw":"---\ntitle: centos7下docker安装\ndate: 2019-06-19 17:33:29\ntags: \n- docker\ncategories: \n- docker\n---\n\n### 检查Linux内核版本，docker要求3.10及以上\n```bash\n$ uname -r\n```\n\n### 安装docker\n```bash\n$ yum install docker\n```\n\n### 启动docker\n```bash\n$ systemctl start docker\n```\n\n### 查看docker版本\n```bash\n$ docker -v\n```\n\n### 停止docker\n```bash\n$ systemctl stop docker\n```\n\n### 开机启动docker\n```bash\n$ systemctl enable docker\n```\n","slug":"docker-install","published":1,"updated":"2019-06-20T12:01:17.996Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0rqqly80000ugqsimhqlbyg","content":"<h3 id=\"检查Linux内核版本，docker要求3-10及以上\"><a href=\"#检查Linux内核版本，docker要求3-10及以上\" class=\"headerlink\" title=\"检查Linux内核版本，docker要求3.10及以上\"></a>检查Linux内核版本，docker要求3.10及以上</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ uname -r</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install docker</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动docker\"><a href=\"#启动docker\" class=\"headerlink\" title=\"启动docker\"></a>启动docker</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl start docker</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看docker版本\"><a href=\"#查看docker版本\" class=\"headerlink\" title=\"查看docker版本\"></a>查看docker版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker -v</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"停止docker\"><a href=\"#停止docker\" class=\"headerlink\" title=\"停止docker\"></a>停止docker</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl stop docker</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"开机启动docker\"><a href=\"#开机启动docker\" class=\"headerlink\" title=\"开机启动docker\"></a>开机启动docker</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> docker</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"检查Linux内核版本，docker要求3-10及以上\"><a href=\"#检查Linux内核版本，docker要求3-10及以上\" class=\"headerlink\" title=\"检查Linux内核版本，docker要求3.10及以上\"></a>检查Linux内核版本，docker要求3.10及以上</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ uname -r</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install docker</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动docker\"><a href=\"#启动docker\" class=\"headerlink\" title=\"启动docker\"></a>启动docker</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl start docker</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看docker版本\"><a href=\"#查看docker版本\" class=\"headerlink\" title=\"查看docker版本\"></a>查看docker版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker -v</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"停止docker\"><a href=\"#停止docker\" class=\"headerlink\" title=\"停止docker\"></a>停止docker</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl stop docker</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"开机启动docker\"><a href=\"#开机启动docker\" class=\"headerlink\" title=\"开机启动docker\"></a>开机启动docker</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> docker</span><br></pre></td></tr></table></figure>\n\n"},{"title":"docker部署mysql","date":"2019-08-08T12:00:40.000Z","_content":"\n### 官方文档链接\n<https://hub.docker.com/_/mysql>\n\n### docker官方镜像(镜像名:版本号，默认latest)\n```bash\n# 这里用5.7版本\n$ docker pull mysql:5.7\n```\n\n### 简单启动mysql容器\n```bash\n$ docker run -id --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7\n```\n-e： 添加环境变量。 MYSQL_ROOT_PASSWORD 这里添加root用户的密码。其他环境变量可以看官方的文档。如果使用已包含数据库的数据目录启动容器，则任何变量都不会产生任何影响。\n\n### 使用自定义配置文件启动\n```bash\n$ docker run -id --name mysql -p 3306:3306  -v /opt/mysql:/etc/mysql/conf.d  -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7\n```\n-v /opt/mysql:/etc/mysql/conf.d：将宿主机的/opt/mysql目录挂载到容器内/etc/mysql/conf.d。自定义的配置文件放到/opt/mysql目录下就行了。\n\n### 传入配置参数启动\n不想挂载配置文件，又想修改mysql的配置参数。\n```bash\n$ docker run -id --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci\n```\n--character-set-server=utf8mb4：设置数据库字符集编码为utf8mb4（utf8的超集并完全兼容utf8）\n--collation-server=utf8mb4_unicode_ci：设置排序字符集为utf8mb4_unicode_ci\n\n查看可用选项的完整列表\n```bash\n$ docker run -it --rm mysql:tag --verbose --help\n```\n\n### 挂载数据目录\n```\n$ docker run -id --name mysql -p 3306:3306  -v /opt/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7\n```\n-v /opt/mysql/data:/var/lib/mysql：将宿主机的/opt/mysql/data目录挂载到容器内/var/lib/mysql。 这样mysql的数据文件就保存在宿主机的/opt/mysql/data目录。","source":"_posts/docker-mysql.md","raw":"---\ntitle: docker部署mysql\ndate: 2019-08-08 20:00:40\ntags: \n- docker\n- mysql\ncategories: \n- docker\n---\n\n### 官方文档链接\n<https://hub.docker.com/_/mysql>\n\n### docker官方镜像(镜像名:版本号，默认latest)\n```bash\n# 这里用5.7版本\n$ docker pull mysql:5.7\n```\n\n### 简单启动mysql容器\n```bash\n$ docker run -id --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7\n```\n-e： 添加环境变量。 MYSQL_ROOT_PASSWORD 这里添加root用户的密码。其他环境变量可以看官方的文档。如果使用已包含数据库的数据目录启动容器，则任何变量都不会产生任何影响。\n\n### 使用自定义配置文件启动\n```bash\n$ docker run -id --name mysql -p 3306:3306  -v /opt/mysql:/etc/mysql/conf.d  -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7\n```\n-v /opt/mysql:/etc/mysql/conf.d：将宿主机的/opt/mysql目录挂载到容器内/etc/mysql/conf.d。自定义的配置文件放到/opt/mysql目录下就行了。\n\n### 传入配置参数启动\n不想挂载配置文件，又想修改mysql的配置参数。\n```bash\n$ docker run -id --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci\n```\n--character-set-server=utf8mb4：设置数据库字符集编码为utf8mb4（utf8的超集并完全兼容utf8）\n--collation-server=utf8mb4_unicode_ci：设置排序字符集为utf8mb4_unicode_ci\n\n查看可用选项的完整列表\n```bash\n$ docker run -it --rm mysql:tag --verbose --help\n```\n\n### 挂载数据目录\n```\n$ docker run -id --name mysql -p 3306:3306  -v /opt/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7\n```\n-v /opt/mysql/data:/var/lib/mysql：将宿主机的/opt/mysql/data目录挂载到容器内/var/lib/mysql。 这样mysql的数据文件就保存在宿主机的/opt/mysql/data目录。","slug":"docker-mysql","published":1,"updated":"2019-08-09T09:59:52.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0rqqlyg0002ugqsbu25tmci","content":"<h3 id=\"官方文档链接\"><a href=\"#官方文档链接\" class=\"headerlink\" title=\"官方文档链接\"></a>官方文档链接</h3><p><a href=\"https://hub.docker.com/_/mysql\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/_/mysql</a></p>\n<h3 id=\"docker官方镜像-镜像名-版本号，默认latest\"><a href=\"#docker官方镜像-镜像名-版本号，默认latest\" class=\"headerlink\" title=\"docker官方镜像(镜像名:版本号，默认latest)\"></a>docker官方镜像(镜像名:版本号，默认latest)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里用5.7版本</span></span><br><span class=\"line\">$ docker pull mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"简单启动mysql容器\"><a href=\"#简单启动mysql容器\" class=\"headerlink\" title=\"简单启动mysql容器\"></a>简单启动mysql容器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -id --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<p>-e： 添加环境变量。 MYSQL_ROOT_PASSWORD 这里添加root用户的密码。其他环境变量可以看官方的文档。如果使用已包含数据库的数据目录启动容器，则任何变量都不会产生任何影响。</p>\n<h3 id=\"使用自定义配置文件启动\"><a href=\"#使用自定义配置文件启动\" class=\"headerlink\" title=\"使用自定义配置文件启动\"></a>使用自定义配置文件启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -id --name mysql -p 3306:3306  -v /opt/mysql:/etc/mysql/conf.d  -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<p>-v /opt/mysql:/etc/mysql/conf.d：将宿主机的/opt/mysql目录挂载到容器内/etc/mysql/conf.d。自定义的配置文件放到/opt/mysql目录下就行了。</p>\n<h3 id=\"传入配置参数启动\"><a href=\"#传入配置参数启动\" class=\"headerlink\" title=\"传入配置参数启动\"></a>传入配置参数启动</h3><p>不想挂载配置文件，又想修改mysql的配置参数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -id --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure>\n\n<p>–character-set-server=utf8mb4：设置数据库字符集编码为utf8mb4（utf8的超集并完全兼容utf8）<br>–collation-server=utf8mb4_unicode_ci：设置排序字符集为utf8mb4_unicode_ci</p>\n<p>查看可用选项的完整列表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -it --rm mysql:tag --verbose --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"挂载数据目录\"><a href=\"#挂载数据目录\" class=\"headerlink\" title=\"挂载数据目录\"></a>挂载数据目录</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -id --name mysql -p 3306:3306  -v /opt/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<p>-v /opt/mysql/data:/var/lib/mysql：将宿主机的/opt/mysql/data目录挂载到容器内/var/lib/mysql。 这样mysql的数据文件就保存在宿主机的/opt/mysql/data目录。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"官方文档链接\"><a href=\"#官方文档链接\" class=\"headerlink\" title=\"官方文档链接\"></a>官方文档链接</h3><p><a href=\"https://hub.docker.com/_/mysql\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/_/mysql</a></p>\n<h3 id=\"docker官方镜像-镜像名-版本号，默认latest\"><a href=\"#docker官方镜像-镜像名-版本号，默认latest\" class=\"headerlink\" title=\"docker官方镜像(镜像名:版本号，默认latest)\"></a>docker官方镜像(镜像名:版本号，默认latest)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里用5.7版本</span></span><br><span class=\"line\">$ docker pull mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"简单启动mysql容器\"><a href=\"#简单启动mysql容器\" class=\"headerlink\" title=\"简单启动mysql容器\"></a>简单启动mysql容器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -id --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<p>-e： 添加环境变量。 MYSQL_ROOT_PASSWORD 这里添加root用户的密码。其他环境变量可以看官方的文档。如果使用已包含数据库的数据目录启动容器，则任何变量都不会产生任何影响。</p>\n<h3 id=\"使用自定义配置文件启动\"><a href=\"#使用自定义配置文件启动\" class=\"headerlink\" title=\"使用自定义配置文件启动\"></a>使用自定义配置文件启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -id --name mysql -p 3306:3306  -v /opt/mysql:/etc/mysql/conf.d  -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<p>-v /opt/mysql:/etc/mysql/conf.d：将宿主机的/opt/mysql目录挂载到容器内/etc/mysql/conf.d。自定义的配置文件放到/opt/mysql目录下就行了。</p>\n<h3 id=\"传入配置参数启动\"><a href=\"#传入配置参数启动\" class=\"headerlink\" title=\"传入配置参数启动\"></a>传入配置参数启动</h3><p>不想挂载配置文件，又想修改mysql的配置参数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -id --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure>\n\n<p>–character-set-server=utf8mb4：设置数据库字符集编码为utf8mb4（utf8的超集并完全兼容utf8）<br>–collation-server=utf8mb4_unicode_ci：设置排序字符集为utf8mb4_unicode_ci</p>\n<p>查看可用选项的完整列表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -it --rm mysql:tag --verbose --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"挂载数据目录\"><a href=\"#挂载数据目录\" class=\"headerlink\" title=\"挂载数据目录\"></a>挂载数据目录</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -id --name mysql -p 3306:3306  -v /opt/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<p>-v /opt/mysql/data:/var/lib/mysql：将宿主机的/opt/mysql/data目录挂载到容器内/var/lib/mysql。 这样mysql的数据文件就保存在宿主机的/opt/mysql/data目录。</p>\n"},{"title":"docker部署redis","date":"2019-06-20T01:24:52.000Z","_content":"\n### 1.官方文档链接\n<https://hub.docker.com/_/redis>\n\n### 2.docker官方镜像(镜像名:版本号，默认latest)\n```bash\n docker pull redis:5.0.14\n docker pull registry.docker-cn.com/library/redis:5.0.14   #docker中国镜像加速\n```\n\n\n### 3.简单启动容器\n```bash\n docker run -itd -p 6380:6379 –name=\"redis\" docker.io/redis\n```\n-it：以交互模式运行容器，并为容器分配一个伪终端\n-p：端口映射，主机端口:容器端口\n--name：为容器指定名称\n\n### 4.挂载外部配置及数据持久化\n\n#### redis.conf 下载\n<https://redis.io/topics/config>\n\n#### 修改redis.conf\n  bind 0.0.0.0        #任意ip都可以连接\n  protected-mode yes\t#保护模式，需配置bind ip或者设置访问密码；no为关闭，外部网络可以直接访问\n  port 6379\t\t\t      #端口号\n  daemonize no\t\t    #后台运行，不设置docker会立即退出\n  pidfile /var/run/redis_6379.pid\t#进程守护文件，就是存放该进程号相关信息的地方\n  requirepass zhaoxinjie #密码\n\n  ##### SNAPSHOTTING   默认开启RDB\n  save 900 1\n  save 300 10\n  save 60 10000\n\n  dbfilename dump.rdb\t#rdb文件\n  dir ./\t\t\t\t#数据存放目录\n  rdbcompression yes\t#默认开启数据压缩\n\n  ##### 配置AOF\n  appendonly yes\t#开启AOF\n  appendfilename \"appendonly.aof\"\t#本地数据库文件名\n  appendfsync everysec\t#更新日志条件 always 总是，每次数据发生变化会立刻写入，性能较差安全性高；everysec 每秒异步写入，默认值； no 不同步\n  auto-aof-rewrite-percentage 100\t#自动化重写百分比，100即一倍\n  auto-aof-rewrite-min-size 3gb\t#当AOF文件大小是上次rewrite后大小的一倍且文件大于3GB时触发\n\n\n#### 启动容器\n```bash\ndocker run -idt --privileged=true -p 6379:6379 -v /hzzxj/redis/redis-ms/node1/redis.conf:/usr/local/etc/redis/redis.conf -v /hzzxj/redis/redis-ms/node1/data:/data --name=redis-node1 redis:5.0.14 redis-server /usr/local/etc/redis/redis.conf\n```\nredis-server /usr/local/etc/redis/redis.conf    #按照指定配置文件启动\n/hzzxj/redis/redis-ms/node1/redis.conf:/usr/local/etc/redis/redis.conf    #挂载配置文件 主机：容器\n/hzzxj/redis/redis-ms/node1/data:/data    #挂载数据存放目录  主机：容器\n\n#### 测试\n```bash\ndocker ps -a | grep node1   #查看容器运行状态\n\ndocker exec -it redis-node1 redis-cli -h 127.0.0.1 -p 6379  #进入容器使用redis-cli命令   -h -p 可省略\n\n127.0.0.1:6379> AUTH password   #鉴权\n```\n![](/images/redis/redis1.png)\n![](/images/redis/redis2.png)","source":"_posts/docker-redis.md","raw":"---\ntitle: docker部署redis\ndate: 2019-06-20 09:24:52\ntags: \n- docker\n- redis\ncategories: \n- docker\n---\n\n### 1.官方文档链接\n<https://hub.docker.com/_/redis>\n\n### 2.docker官方镜像(镜像名:版本号，默认latest)\n```bash\n docker pull redis:5.0.14\n docker pull registry.docker-cn.com/library/redis:5.0.14   #docker中国镜像加速\n```\n\n\n### 3.简单启动容器\n```bash\n docker run -itd -p 6380:6379 –name=\"redis\" docker.io/redis\n```\n-it：以交互模式运行容器，并为容器分配一个伪终端\n-p：端口映射，主机端口:容器端口\n--name：为容器指定名称\n\n### 4.挂载外部配置及数据持久化\n\n#### redis.conf 下载\n<https://redis.io/topics/config>\n\n#### 修改redis.conf\n  bind 0.0.0.0        #任意ip都可以连接\n  protected-mode yes\t#保护模式，需配置bind ip或者设置访问密码；no为关闭，外部网络可以直接访问\n  port 6379\t\t\t      #端口号\n  daemonize no\t\t    #后台运行，不设置docker会立即退出\n  pidfile /var/run/redis_6379.pid\t#进程守护文件，就是存放该进程号相关信息的地方\n  requirepass zhaoxinjie #密码\n\n  ##### SNAPSHOTTING   默认开启RDB\n  save 900 1\n  save 300 10\n  save 60 10000\n\n  dbfilename dump.rdb\t#rdb文件\n  dir ./\t\t\t\t#数据存放目录\n  rdbcompression yes\t#默认开启数据压缩\n\n  ##### 配置AOF\n  appendonly yes\t#开启AOF\n  appendfilename \"appendonly.aof\"\t#本地数据库文件名\n  appendfsync everysec\t#更新日志条件 always 总是，每次数据发生变化会立刻写入，性能较差安全性高；everysec 每秒异步写入，默认值； no 不同步\n  auto-aof-rewrite-percentage 100\t#自动化重写百分比，100即一倍\n  auto-aof-rewrite-min-size 3gb\t#当AOF文件大小是上次rewrite后大小的一倍且文件大于3GB时触发\n\n\n#### 启动容器\n```bash\ndocker run -idt --privileged=true -p 6379:6379 -v /hzzxj/redis/redis-ms/node1/redis.conf:/usr/local/etc/redis/redis.conf -v /hzzxj/redis/redis-ms/node1/data:/data --name=redis-node1 redis:5.0.14 redis-server /usr/local/etc/redis/redis.conf\n```\nredis-server /usr/local/etc/redis/redis.conf    #按照指定配置文件启动\n/hzzxj/redis/redis-ms/node1/redis.conf:/usr/local/etc/redis/redis.conf    #挂载配置文件 主机：容器\n/hzzxj/redis/redis-ms/node1/data:/data    #挂载数据存放目录  主机：容器\n\n#### 测试\n```bash\ndocker ps -a | grep node1   #查看容器运行状态\n\ndocker exec -it redis-node1 redis-cli -h 127.0.0.1 -p 6379  #进入容器使用redis-cli命令   -h -p 可省略\n\n127.0.0.1:6379> AUTH password   #鉴权\n```\n![](/images/redis/redis1.png)\n![](/images/redis/redis2.png)","slug":"docker-redis","published":1,"updated":"2022-03-15T06:21:48.733Z","_id":"cl0rqqlyl0006ugqsf88ltheu","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-官方文档链接\"><a href=\"#1-官方文档链接\" class=\"headerlink\" title=\"1.官方文档链接\"></a>1.官方文档链接</h3><p><a href=\"https://hub.docker.com/_/redis\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/_/redis</a></p>\n<h3 id=\"2-docker官方镜像-镜像名-版本号，默认latest\"><a href=\"#2-docker官方镜像-镜像名-版本号，默认latest\" class=\"headerlink\" title=\"2.docker官方镜像(镜像名:版本号，默认latest)\"></a>2.docker官方镜像(镜像名:版本号，默认latest)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull redis:5.0.14</span><br><span class=\"line\">docker pull registry.docker-cn.com/library/redis:5.0.14   <span class=\"comment\">#docker中国镜像加速</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-简单启动容器\"><a href=\"#3-简单启动容器\" class=\"headerlink\" title=\"3.简单启动容器\"></a>3.简单启动容器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd -p 6380:6379 –name=<span class=\"string\">\"redis\"</span> docker.io/redis</span><br></pre></td></tr></table></figure>\n\n<p>-it：以交互模式运行容器，并为容器分配一个伪终端<br>-p：端口映射，主机端口:容器端口<br>–name：为容器指定名称</p>\n<h3 id=\"4-挂载外部配置及数据持久化\"><a href=\"#4-挂载外部配置及数据持久化\" class=\"headerlink\" title=\"4.挂载外部配置及数据持久化\"></a>4.挂载外部配置及数据持久化</h3><h4 id=\"redis-conf-下载\"><a href=\"#redis-conf-下载\" class=\"headerlink\" title=\"redis.conf 下载\"></a>redis.conf 下载</h4><p><a href=\"https://redis.io/topics/config\" target=\"_blank\" rel=\"noopener\">https://redis.io/topics/config</a></p>\n<h4 id=\"修改redis-conf\"><a href=\"#修改redis-conf\" class=\"headerlink\" title=\"修改redis.conf\"></a>修改redis.conf</h4><p>  bind 0.0.0.0        #任意ip都可以连接<br>  protected-mode yes    #保护模式，需配置bind ip或者设置访问密码；no为关闭，外部网络可以直接访问<br>  port 6379                  #端口号<br>  daemonize no            #后台运行，不设置docker会立即退出<br>  pidfile /var/run/redis_6379.pid    #进程守护文件，就是存放该进程号相关信息的地方<br>  requirepass zhaoxinjie #密码</p>\n<h5 id=\"SNAPSHOTTING-默认开启RDB\"><a href=\"#SNAPSHOTTING-默认开启RDB\" class=\"headerlink\" title=\"SNAPSHOTTING   默认开启RDB\"></a>SNAPSHOTTING   默认开启RDB</h5><p>  save 900 1<br>  save 300 10<br>  save 60 10000</p>\n<p>  dbfilename dump.rdb    #rdb文件<br>  dir ./                #数据存放目录<br>  rdbcompression yes    #默认开启数据压缩</p>\n<h5 id=\"配置AOF\"><a href=\"#配置AOF\" class=\"headerlink\" title=\"配置AOF\"></a>配置AOF</h5><p>  appendonly yes    #开启AOF<br>  appendfilename “appendonly.aof”    #本地数据库文件名<br>  appendfsync everysec    #更新日志条件 always 总是，每次数据发生变化会立刻写入，性能较差安全性高；everysec 每秒异步写入，默认值； no 不同步<br>  auto-aof-rewrite-percentage 100    #自动化重写百分比，100即一倍<br>  auto-aof-rewrite-min-size 3gb    #当AOF文件大小是上次rewrite后大小的一倍且文件大于3GB时触发</p>\n<h4 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -idt --privileged=<span class=\"literal\">true</span> -p 6379:6379 -v /hzzxj/redis/redis-ms/node1/redis.conf:/usr/<span class=\"built_in\">local</span>/etc/redis/redis.conf -v /hzzxj/redis/redis-ms/node1/data:/data --name=redis-node1 redis:5.0.14 redis-server /usr/<span class=\"built_in\">local</span>/etc/redis/redis.conf</span><br></pre></td></tr></table></figure>\n\n<p>redis-server /usr/local/etc/redis/redis.conf    #按照指定配置文件启动<br>/hzzxj/redis/redis-ms/node1/redis.conf:/usr/local/etc/redis/redis.conf    #挂载配置文件 主机：容器<br>/hzzxj/redis/redis-ms/node1/data:/data    #挂载数据存放目录  主机：容器</p>\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a | grep node1   <span class=\"comment\">#查看容器运行状态</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it redis-node1 redis-cli -h 127.0.0.1 -p 6379  <span class=\"comment\">#进入容器使用redis-cli命令   -h -p 可省略</span></span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; AUTH password   <span class=\"comment\">#鉴权</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/redis/redis1.png\" alt><br><img src=\"/images/redis/redis2.png\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-官方文档链接\"><a href=\"#1-官方文档链接\" class=\"headerlink\" title=\"1.官方文档链接\"></a>1.官方文档链接</h3><p><a href=\"https://hub.docker.com/_/redis\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/_/redis</a></p>\n<h3 id=\"2-docker官方镜像-镜像名-版本号，默认latest\"><a href=\"#2-docker官方镜像-镜像名-版本号，默认latest\" class=\"headerlink\" title=\"2.docker官方镜像(镜像名:版本号，默认latest)\"></a>2.docker官方镜像(镜像名:版本号，默认latest)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull redis:5.0.14</span><br><span class=\"line\">docker pull registry.docker-cn.com/library/redis:5.0.14   <span class=\"comment\">#docker中国镜像加速</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-简单启动容器\"><a href=\"#3-简单启动容器\" class=\"headerlink\" title=\"3.简单启动容器\"></a>3.简单启动容器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd -p 6380:6379 –name=<span class=\"string\">\"redis\"</span> docker.io/redis</span><br></pre></td></tr></table></figure>\n\n<p>-it：以交互模式运行容器，并为容器分配一个伪终端<br>-p：端口映射，主机端口:容器端口<br>–name：为容器指定名称</p>\n<h3 id=\"4-挂载外部配置及数据持久化\"><a href=\"#4-挂载外部配置及数据持久化\" class=\"headerlink\" title=\"4.挂载外部配置及数据持久化\"></a>4.挂载外部配置及数据持久化</h3><h4 id=\"redis-conf-下载\"><a href=\"#redis-conf-下载\" class=\"headerlink\" title=\"redis.conf 下载\"></a>redis.conf 下载</h4><p><a href=\"https://redis.io/topics/config\" target=\"_blank\" rel=\"noopener\">https://redis.io/topics/config</a></p>\n<h4 id=\"修改redis-conf\"><a href=\"#修改redis-conf\" class=\"headerlink\" title=\"修改redis.conf\"></a>修改redis.conf</h4><p>  bind 0.0.0.0        #任意ip都可以连接<br>  protected-mode yes    #保护模式，需配置bind ip或者设置访问密码；no为关闭，外部网络可以直接访问<br>  port 6379                  #端口号<br>  daemonize no            #后台运行，不设置docker会立即退出<br>  pidfile /var/run/redis_6379.pid    #进程守护文件，就是存放该进程号相关信息的地方<br>  requirepass zhaoxinjie #密码</p>\n<h5 id=\"SNAPSHOTTING-默认开启RDB\"><a href=\"#SNAPSHOTTING-默认开启RDB\" class=\"headerlink\" title=\"SNAPSHOTTING   默认开启RDB\"></a>SNAPSHOTTING   默认开启RDB</h5><p>  save 900 1<br>  save 300 10<br>  save 60 10000</p>\n<p>  dbfilename dump.rdb    #rdb文件<br>  dir ./                #数据存放目录<br>  rdbcompression yes    #默认开启数据压缩</p>\n<h5 id=\"配置AOF\"><a href=\"#配置AOF\" class=\"headerlink\" title=\"配置AOF\"></a>配置AOF</h5><p>  appendonly yes    #开启AOF<br>  appendfilename “appendonly.aof”    #本地数据库文件名<br>  appendfsync everysec    #更新日志条件 always 总是，每次数据发生变化会立刻写入，性能较差安全性高；everysec 每秒异步写入，默认值； no 不同步<br>  auto-aof-rewrite-percentage 100    #自动化重写百分比，100即一倍<br>  auto-aof-rewrite-min-size 3gb    #当AOF文件大小是上次rewrite后大小的一倍且文件大于3GB时触发</p>\n<h4 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -idt --privileged=<span class=\"literal\">true</span> -p 6379:6379 -v /hzzxj/redis/redis-ms/node1/redis.conf:/usr/<span class=\"built_in\">local</span>/etc/redis/redis.conf -v /hzzxj/redis/redis-ms/node1/data:/data --name=redis-node1 redis:5.0.14 redis-server /usr/<span class=\"built_in\">local</span>/etc/redis/redis.conf</span><br></pre></td></tr></table></figure>\n\n<p>redis-server /usr/local/etc/redis/redis.conf    #按照指定配置文件启动<br>/hzzxj/redis/redis-ms/node1/redis.conf:/usr/local/etc/redis/redis.conf    #挂载配置文件 主机：容器<br>/hzzxj/redis/redis-ms/node1/data:/data    #挂载数据存放目录  主机：容器</p>\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a | grep node1   <span class=\"comment\">#查看容器运行状态</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it redis-node1 redis-cli -h 127.0.0.1 -p 6379  <span class=\"comment\">#进入容器使用redis-cli命令   -h -p 可省略</span></span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; AUTH password   <span class=\"comment\">#鉴权</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/redis/redis1.png\" alt><br><img src=\"/images/redis/redis2.png\" alt></p>\n"},{"title":"docker部署nginx","date":"2019-06-29T01:41:25.000Z","_content":"\n### 官方文档链接\n<https://hub.docker.com/_/nginx>\n\n### docker官方镜像(镜像名:版本号，默认latest)\n```bash\n$ docker pull nginx:1.14\n```\n\n### 查看镜像列表\n```bash\n$ docker images\n```\n\n### 简单的反向代理\n新编辑/opt/nginx/myweb.conf配置文件\n```\nupstream myweb {\n    server 47.97.195.164:8080;\n}\n\nserver {\n    listen       80;\n    server_name  47.97.195.164;\n\n    location / {\n      proxy_pass  http://myweb;\n      index index.html index.htm;\n    }\n\n}\n```\n初始化容器\n```bash\n$ docker run -itd --name=nginx -v /opt/nginx/myweb.conf:/etc/nginx/conf.d/myweb.conf -p 80:80 --privileged=true nginx:1.14\n```\n\n\n### 简单的反向代理 + 静态资源服务器\n#### 新编辑/opt/nginx/myweb.conf配置文件\n```conf\nupstream myweb {\n    server 47.97.195.164:8080 weight=3;\n    server 47.97.195.165:8080 weight=4;;\n}\n\nserver {\n    listen       80;\n    server_name  47.97.195.164;\n\n    location /zxj/ {\n      alias       /opt/resource/myweb/;\n      add_header  Access-Control-Allow-Origin *;\n    }\n\n    location / {\n      proxy_pass  http://myweb;\n      index index.html index.htm;\n    }\n\n}\n```\n#### 修改nginx.conf 这里开启gzip压缩，不用的可以略过这步\n获取默认的nginx.cong配置文件\n```bash\n$ docker run -i --rm nginx:1.14 cat /etc/nginx/nginx.conf > nginx.conf\n```\n修改如下（gzip）\n```conf\nuser  nginx;\nworker_processes  1;\n\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n    #gzip  on;\n    gzip on;\n    gzip_min_length 1k;\n    gzip_buffers 4 16k;\n    #gzip_http_version 1.0;\n    gzip_comp_level 2;\n    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n    gzip_vary off;\n    gzip_disable \"MSIE [1-6]\\.\";\n\n    include /etc/nginx/conf.d/*.conf;\n}\n```\n#### 初始化容器\n```bash\n$ docker run -itd --name=nginx -v /opt/nginx/nginx.conf:/etc/nginx/nginx.conf -v /opt/nginx/myweb.conf:/etc/nginx/conf.d/myweb.conf -v /opt/resource/:/opt/resource -p 80:80 --privileged=true nginx:1.14\n```\n注意目录的对应。\n/opt/resource/：静态资源的目录\n\n####\n如果访问文件时出现403，有可能是没有该目录的操作权限。\n```\n$ chmod -R 777 /opt/resource\n```\n","source":"_posts/docker-nginx.md","raw":"---\ntitle: docker部署nginx\ndate: 2019-06-29 09:41:25\ntags: \n- docker\n- nginx\ncategories: \n- docker\n---\n\n### 官方文档链接\n<https://hub.docker.com/_/nginx>\n\n### docker官方镜像(镜像名:版本号，默认latest)\n```bash\n$ docker pull nginx:1.14\n```\n\n### 查看镜像列表\n```bash\n$ docker images\n```\n\n### 简单的反向代理\n新编辑/opt/nginx/myweb.conf配置文件\n```\nupstream myweb {\n    server 47.97.195.164:8080;\n}\n\nserver {\n    listen       80;\n    server_name  47.97.195.164;\n\n    location / {\n      proxy_pass  http://myweb;\n      index index.html index.htm;\n    }\n\n}\n```\n初始化容器\n```bash\n$ docker run -itd --name=nginx -v /opt/nginx/myweb.conf:/etc/nginx/conf.d/myweb.conf -p 80:80 --privileged=true nginx:1.14\n```\n\n\n### 简单的反向代理 + 静态资源服务器\n#### 新编辑/opt/nginx/myweb.conf配置文件\n```conf\nupstream myweb {\n    server 47.97.195.164:8080 weight=3;\n    server 47.97.195.165:8080 weight=4;;\n}\n\nserver {\n    listen       80;\n    server_name  47.97.195.164;\n\n    location /zxj/ {\n      alias       /opt/resource/myweb/;\n      add_header  Access-Control-Allow-Origin *;\n    }\n\n    location / {\n      proxy_pass  http://myweb;\n      index index.html index.htm;\n    }\n\n}\n```\n#### 修改nginx.conf 这里开启gzip压缩，不用的可以略过这步\n获取默认的nginx.cong配置文件\n```bash\n$ docker run -i --rm nginx:1.14 cat /etc/nginx/nginx.conf > nginx.conf\n```\n修改如下（gzip）\n```conf\nuser  nginx;\nworker_processes  1;\n\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n    #gzip  on;\n    gzip on;\n    gzip_min_length 1k;\n    gzip_buffers 4 16k;\n    #gzip_http_version 1.0;\n    gzip_comp_level 2;\n    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n    gzip_vary off;\n    gzip_disable \"MSIE [1-6]\\.\";\n\n    include /etc/nginx/conf.d/*.conf;\n}\n```\n#### 初始化容器\n```bash\n$ docker run -itd --name=nginx -v /opt/nginx/nginx.conf:/etc/nginx/nginx.conf -v /opt/nginx/myweb.conf:/etc/nginx/conf.d/myweb.conf -v /opt/resource/:/opt/resource -p 80:80 --privileged=true nginx:1.14\n```\n注意目录的对应。\n/opt/resource/：静态资源的目录\n\n####\n如果访问文件时出现403，有可能是没有该目录的操作权限。\n```\n$ chmod -R 777 /opt/resource\n```\n","slug":"docker-nginx","published":1,"updated":"2020-12-18T01:15:58.005Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0rqqlyr0008ugqsxviplcnp","content":"<h3 id=\"官方文档链接\"><a href=\"#官方文档链接\" class=\"headerlink\" title=\"官方文档链接\"></a>官方文档链接</h3><p><a href=\"https://hub.docker.com/_/nginx\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/_/nginx</a></p>\n<h3 id=\"docker官方镜像-镜像名-版本号，默认latest\"><a href=\"#docker官方镜像-镜像名-版本号，默认latest\" class=\"headerlink\" title=\"docker官方镜像(镜像名:版本号，默认latest)\"></a>docker官方镜像(镜像名:版本号，默认latest)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull nginx:1.14</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看镜像列表\"><a href=\"#查看镜像列表\" class=\"headerlink\" title=\"查看镜像列表\"></a>查看镜像列表</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker images</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"简单的反向代理\"><a href=\"#简单的反向代理\" class=\"headerlink\" title=\"简单的反向代理\"></a>简单的反向代理</h3><p>新编辑/opt/nginx/myweb.conf配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream myweb &#123;</span><br><span class=\"line\">    server 47.97.195.164:8080;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  47.97.195.164;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">      proxy_pass  http://myweb;</span><br><span class=\"line\">      index index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>初始化容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -itd --name=nginx -v /opt/nginx/myweb.conf:/etc/nginx/conf.d/myweb.conf -p 80:80 --privileged=<span class=\"literal\">true</span> nginx:1.14</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"简单的反向代理-静态资源服务器\"><a href=\"#简单的反向代理-静态资源服务器\" class=\"headerlink\" title=\"简单的反向代理 + 静态资源服务器\"></a>简单的反向代理 + 静态资源服务器</h3><h4 id=\"新编辑-opt-nginx-myweb-conf配置文件\"><a href=\"#新编辑-opt-nginx-myweb-conf配置文件\" class=\"headerlink\" title=\"新编辑/opt/nginx/myweb.conf配置文件\"></a>新编辑/opt/nginx/myweb.conf配置文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream myweb &#123;</span><br><span class=\"line\">    server 47.97.195.164:8080 weight=3;</span><br><span class=\"line\">    server 47.97.195.165:8080 weight=4;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  47.97.195.164;</span><br><span class=\"line\"></span><br><span class=\"line\">    location /zxj/ &#123;</span><br><span class=\"line\">      alias       /opt/resource/myweb/;</span><br><span class=\"line\">      add_header  Access-Control-Allow-Origin *;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">      proxy_pass  http://myweb;</span><br><span class=\"line\">      index index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改nginx-conf-这里开启gzip压缩，不用的可以略过这步\"><a href=\"#修改nginx-conf-这里开启gzip压缩，不用的可以略过这步\" class=\"headerlink\" title=\"修改nginx.conf 这里开启gzip压缩，不用的可以略过这步\"></a>修改nginx.conf 这里开启gzip压缩，不用的可以略过这步</h4><p>获取默认的nginx.cong配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -i --rm nginx:1.14 cat /etc/nginx/nginx.conf &gt; nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p>修改如下（gzip）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  nginx;</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">error_log  /var/log/nginx/error.log warn;</span><br><span class=\"line\">pid        /var/run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       /etc/nginx/mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\">    gzip on;</span><br><span class=\"line\">    gzip_min_length 1k;</span><br><span class=\"line\">    gzip_buffers 4 16k;</span><br><span class=\"line\">    #gzip_http_version 1.0;</span><br><span class=\"line\">    gzip_comp_level 2;</span><br><span class=\"line\">    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class=\"line\">    gzip_vary off;</span><br><span class=\"line\">    gzip_disable &quot;MSIE [1-6]\\.&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"初始化容器\"><a href=\"#初始化容器\" class=\"headerlink\" title=\"初始化容器\"></a>初始化容器</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -itd --name=nginx -v /opt/nginx/nginx.conf:/etc/nginx/nginx.conf -v /opt/nginx/myweb.conf:/etc/nginx/conf.d/myweb.conf -v /opt/resource/:/opt/resource -p 80:80 --privileged=<span class=\"literal\">true</span> nginx:1.14</span><br></pre></td></tr></table></figure>\n\n<p>注意目录的对应。<br>/opt/resource/：静态资源的目录</p>\n<p>####<br>如果访问文件时出现403，有可能是没有该目录的操作权限。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chmod -R 777 /opt/resource</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"官方文档链接\"><a href=\"#官方文档链接\" class=\"headerlink\" title=\"官方文档链接\"></a>官方文档链接</h3><p><a href=\"https://hub.docker.com/_/nginx\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/_/nginx</a></p>\n<h3 id=\"docker官方镜像-镜像名-版本号，默认latest\"><a href=\"#docker官方镜像-镜像名-版本号，默认latest\" class=\"headerlink\" title=\"docker官方镜像(镜像名:版本号，默认latest)\"></a>docker官方镜像(镜像名:版本号，默认latest)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull nginx:1.14</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看镜像列表\"><a href=\"#查看镜像列表\" class=\"headerlink\" title=\"查看镜像列表\"></a>查看镜像列表</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker images</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"简单的反向代理\"><a href=\"#简单的反向代理\" class=\"headerlink\" title=\"简单的反向代理\"></a>简单的反向代理</h3><p>新编辑/opt/nginx/myweb.conf配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream myweb &#123;</span><br><span class=\"line\">    server 47.97.195.164:8080;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  47.97.195.164;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">      proxy_pass  http://myweb;</span><br><span class=\"line\">      index index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>初始化容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -itd --name=nginx -v /opt/nginx/myweb.conf:/etc/nginx/conf.d/myweb.conf -p 80:80 --privileged=<span class=\"literal\">true</span> nginx:1.14</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"简单的反向代理-静态资源服务器\"><a href=\"#简单的反向代理-静态资源服务器\" class=\"headerlink\" title=\"简单的反向代理 + 静态资源服务器\"></a>简单的反向代理 + 静态资源服务器</h3><h4 id=\"新编辑-opt-nginx-myweb-conf配置文件\"><a href=\"#新编辑-opt-nginx-myweb-conf配置文件\" class=\"headerlink\" title=\"新编辑/opt/nginx/myweb.conf配置文件\"></a>新编辑/opt/nginx/myweb.conf配置文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream myweb &#123;</span><br><span class=\"line\">    server 47.97.195.164:8080 weight=3;</span><br><span class=\"line\">    server 47.97.195.165:8080 weight=4;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  47.97.195.164;</span><br><span class=\"line\"></span><br><span class=\"line\">    location /zxj/ &#123;</span><br><span class=\"line\">      alias       /opt/resource/myweb/;</span><br><span class=\"line\">      add_header  Access-Control-Allow-Origin *;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">      proxy_pass  http://myweb;</span><br><span class=\"line\">      index index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改nginx-conf-这里开启gzip压缩，不用的可以略过这步\"><a href=\"#修改nginx-conf-这里开启gzip压缩，不用的可以略过这步\" class=\"headerlink\" title=\"修改nginx.conf 这里开启gzip压缩，不用的可以略过这步\"></a>修改nginx.conf 这里开启gzip压缩，不用的可以略过这步</h4><p>获取默认的nginx.cong配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -i --rm nginx:1.14 cat /etc/nginx/nginx.conf &gt; nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p>修改如下（gzip）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  nginx;</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">error_log  /var/log/nginx/error.log warn;</span><br><span class=\"line\">pid        /var/run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       /etc/nginx/mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\">    gzip on;</span><br><span class=\"line\">    gzip_min_length 1k;</span><br><span class=\"line\">    gzip_buffers 4 16k;</span><br><span class=\"line\">    #gzip_http_version 1.0;</span><br><span class=\"line\">    gzip_comp_level 2;</span><br><span class=\"line\">    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class=\"line\">    gzip_vary off;</span><br><span class=\"line\">    gzip_disable &quot;MSIE [1-6]\\.&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"初始化容器\"><a href=\"#初始化容器\" class=\"headerlink\" title=\"初始化容器\"></a>初始化容器</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -itd --name=nginx -v /opt/nginx/nginx.conf:/etc/nginx/nginx.conf -v /opt/nginx/myweb.conf:/etc/nginx/conf.d/myweb.conf -v /opt/resource/:/opt/resource -p 80:80 --privileged=<span class=\"literal\">true</span> nginx:1.14</span><br></pre></td></tr></table></figure>\n\n<p>注意目录的对应。<br>/opt/resource/：静态资源的目录</p>\n<p>####<br>如果访问文件时出现403，有可能是没有该目录的操作权限。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chmod -R 777 /opt/resource</span><br></pre></td></tr></table></figure>\n\n"},{"title":"docker部署postgres","date":"2019-06-19T09:41:25.000Z","_content":"\n### 官方文档链接\n<https://hub.docker.com/_/postgres>\n\n### docker官方镜像(镜像名:版本号，默认latest)\n```bash\n$ docker pull postgres:11\n```\n\n### docker中国镜像加速(官方镜像慢的话可以用这个)\n```bash\n$ docker pull registry.docker-cn.com/library/postgres\n```\n\n### 查看镜像列表\n```bash\n$ docker images\n```\n\n### 简单启动容器\n```bash\n$ docker run -itd -p 5432:5432 -name=\"postgres\" -e POSTGRES_PASSWORD=zhaoxinjie postgres:11\n```\n-it：以交互模式运行容器，并为容器分配一个伪终端\n-p：端口映射，主机端口:容器端口\n--name：为容器指定名称\n-e POSTGRES_PASSWORD：设置环境变量。设置postgres用户的密码\n\n### 挂载外部配置及数据\n#### 获取默认的配置文件并放到/root/postgres/目录下\n```bash\n$ docker run -i --rm postgres cat /usr/share/postgresql/postgresql.conf.sample > /root/postgres/postgres.conf \n```\n#### 根据自定义配置文件启动及挂载数据到容器外\n```bash\n$ docker run -itd --name postgres -p 5432:5432 -e POSTGRES_PASSWORD=zhaoxinjie --privileged=true -v /root/postgres/data/:/var/lib/postgresql/data -v /root/postgres/postgres.conf:/etc/postgresql/postgresql.conf postgres:11 -c 'config_file=/etc/postgresql/postgresql.conf' \n```\n--privileged=true：容器内的root拥有真正的权限，否则容器内的root只是外部普通用户权限（不设置启动会报错）\n-v：挂载文件\n上面的配置文件路径（根据实际情况修改）：/root/postgres/postgres.conf\n上面的挂载数据路径（根据实际情况修改）：/root/postgres/data/","source":"_posts/docker-postgresql.md","raw":"---\ntitle: docker部署postgres\ndate: 2019-06-19 17:41:25\ntags: \n- docker\n- postgresql\ncategories: \n- docker\n---\n\n### 官方文档链接\n<https://hub.docker.com/_/postgres>\n\n### docker官方镜像(镜像名:版本号，默认latest)\n```bash\n$ docker pull postgres:11\n```\n\n### docker中国镜像加速(官方镜像慢的话可以用这个)\n```bash\n$ docker pull registry.docker-cn.com/library/postgres\n```\n\n### 查看镜像列表\n```bash\n$ docker images\n```\n\n### 简单启动容器\n```bash\n$ docker run -itd -p 5432:5432 -name=\"postgres\" -e POSTGRES_PASSWORD=zhaoxinjie postgres:11\n```\n-it：以交互模式运行容器，并为容器分配一个伪终端\n-p：端口映射，主机端口:容器端口\n--name：为容器指定名称\n-e POSTGRES_PASSWORD：设置环境变量。设置postgres用户的密码\n\n### 挂载外部配置及数据\n#### 获取默认的配置文件并放到/root/postgres/目录下\n```bash\n$ docker run -i --rm postgres cat /usr/share/postgresql/postgresql.conf.sample > /root/postgres/postgres.conf \n```\n#### 根据自定义配置文件启动及挂载数据到容器外\n```bash\n$ docker run -itd --name postgres -p 5432:5432 -e POSTGRES_PASSWORD=zhaoxinjie --privileged=true -v /root/postgres/data/:/var/lib/postgresql/data -v /root/postgres/postgres.conf:/etc/postgresql/postgresql.conf postgres:11 -c 'config_file=/etc/postgresql/postgresql.conf' \n```\n--privileged=true：容器内的root拥有真正的权限，否则容器内的root只是外部普通用户权限（不设置启动会报错）\n-v：挂载文件\n上面的配置文件路径（根据实际情况修改）：/root/postgres/postgres.conf\n上面的挂载数据路径（根据实际情况修改）：/root/postgres/data/","slug":"docker-postgresql","published":1,"updated":"2019-06-20T09:54:51.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0rqqlyv000augqsccmfpw2f","content":"<h3 id=\"官方文档链接\"><a href=\"#官方文档链接\" class=\"headerlink\" title=\"官方文档链接\"></a>官方文档链接</h3><p><a href=\"https://hub.docker.com/_/postgres\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/_/postgres</a></p>\n<h3 id=\"docker官方镜像-镜像名-版本号，默认latest\"><a href=\"#docker官方镜像-镜像名-版本号，默认latest\" class=\"headerlink\" title=\"docker官方镜像(镜像名:版本号，默认latest)\"></a>docker官方镜像(镜像名:版本号，默认latest)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull postgres:11</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"docker中国镜像加速-官方镜像慢的话可以用这个\"><a href=\"#docker中国镜像加速-官方镜像慢的话可以用这个\" class=\"headerlink\" title=\"docker中国镜像加速(官方镜像慢的话可以用这个)\"></a>docker中国镜像加速(官方镜像慢的话可以用这个)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull registry.docker-cn.com/library/postgres</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看镜像列表\"><a href=\"#查看镜像列表\" class=\"headerlink\" title=\"查看镜像列表\"></a>查看镜像列表</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker images</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"简单启动容器\"><a href=\"#简单启动容器\" class=\"headerlink\" title=\"简单启动容器\"></a>简单启动容器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -itd -p 5432:5432 -name=<span class=\"string\">\"postgres\"</span> -e POSTGRES_PASSWORD=zhaoxinjie postgres:11</span><br></pre></td></tr></table></figure>\n\n<p>-it：以交互模式运行容器，并为容器分配一个伪终端<br>-p：端口映射，主机端口:容器端口<br>–name：为容器指定名称<br>-e POSTGRES_PASSWORD：设置环境变量。设置postgres用户的密码</p>\n<h3 id=\"挂载外部配置及数据\"><a href=\"#挂载外部配置及数据\" class=\"headerlink\" title=\"挂载外部配置及数据\"></a>挂载外部配置及数据</h3><h4 id=\"获取默认的配置文件并放到-root-postgres-目录下\"><a href=\"#获取默认的配置文件并放到-root-postgres-目录下\" class=\"headerlink\" title=\"获取默认的配置文件并放到/root/postgres/目录下\"></a>获取默认的配置文件并放到/root/postgres/目录下</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -i --rm postgres cat /usr/share/postgresql/postgresql.conf.sample &gt; /root/postgres/postgres.conf</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"根据自定义配置文件启动及挂载数据到容器外\"><a href=\"#根据自定义配置文件启动及挂载数据到容器外\" class=\"headerlink\" title=\"根据自定义配置文件启动及挂载数据到容器外\"></a>根据自定义配置文件启动及挂载数据到容器外</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -itd --name postgres -p 5432:5432 -e POSTGRES_PASSWORD=zhaoxinjie --privileged=<span class=\"literal\">true</span> -v /root/postgres/data/:/var/lib/postgresql/data -v /root/postgres/postgres.conf:/etc/postgresql/postgresql.conf postgres:11 -c <span class=\"string\">'config_file=/etc/postgresql/postgresql.conf'</span></span><br></pre></td></tr></table></figure>\n\n<p>–privileged=true：容器内的root拥有真正的权限，否则容器内的root只是外部普通用户权限（不设置启动会报错）<br>-v：挂载文件<br>上面的配置文件路径（根据实际情况修改）：/root/postgres/postgres.conf<br>上面的挂载数据路径（根据实际情况修改）：/root/postgres/data/</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"官方文档链接\"><a href=\"#官方文档链接\" class=\"headerlink\" title=\"官方文档链接\"></a>官方文档链接</h3><p><a href=\"https://hub.docker.com/_/postgres\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/_/postgres</a></p>\n<h3 id=\"docker官方镜像-镜像名-版本号，默认latest\"><a href=\"#docker官方镜像-镜像名-版本号，默认latest\" class=\"headerlink\" title=\"docker官方镜像(镜像名:版本号，默认latest)\"></a>docker官方镜像(镜像名:版本号，默认latest)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull postgres:11</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"docker中国镜像加速-官方镜像慢的话可以用这个\"><a href=\"#docker中国镜像加速-官方镜像慢的话可以用这个\" class=\"headerlink\" title=\"docker中国镜像加速(官方镜像慢的话可以用这个)\"></a>docker中国镜像加速(官方镜像慢的话可以用这个)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull registry.docker-cn.com/library/postgres</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看镜像列表\"><a href=\"#查看镜像列表\" class=\"headerlink\" title=\"查看镜像列表\"></a>查看镜像列表</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker images</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"简单启动容器\"><a href=\"#简单启动容器\" class=\"headerlink\" title=\"简单启动容器\"></a>简单启动容器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -itd -p 5432:5432 -name=<span class=\"string\">\"postgres\"</span> -e POSTGRES_PASSWORD=zhaoxinjie postgres:11</span><br></pre></td></tr></table></figure>\n\n<p>-it：以交互模式运行容器，并为容器分配一个伪终端<br>-p：端口映射，主机端口:容器端口<br>–name：为容器指定名称<br>-e POSTGRES_PASSWORD：设置环境变量。设置postgres用户的密码</p>\n<h3 id=\"挂载外部配置及数据\"><a href=\"#挂载外部配置及数据\" class=\"headerlink\" title=\"挂载外部配置及数据\"></a>挂载外部配置及数据</h3><h4 id=\"获取默认的配置文件并放到-root-postgres-目录下\"><a href=\"#获取默认的配置文件并放到-root-postgres-目录下\" class=\"headerlink\" title=\"获取默认的配置文件并放到/root/postgres/目录下\"></a>获取默认的配置文件并放到/root/postgres/目录下</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -i --rm postgres cat /usr/share/postgresql/postgresql.conf.sample &gt; /root/postgres/postgres.conf</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"根据自定义配置文件启动及挂载数据到容器外\"><a href=\"#根据自定义配置文件启动及挂载数据到容器外\" class=\"headerlink\" title=\"根据自定义配置文件启动及挂载数据到容器外\"></a>根据自定义配置文件启动及挂载数据到容器外</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -itd --name postgres -p 5432:5432 -e POSTGRES_PASSWORD=zhaoxinjie --privileged=<span class=\"literal\">true</span> -v /root/postgres/data/:/var/lib/postgresql/data -v /root/postgres/postgres.conf:/etc/postgresql/postgresql.conf postgres:11 -c <span class=\"string\">'config_file=/etc/postgresql/postgresql.conf'</span></span><br></pre></td></tr></table></figure>\n\n<p>–privileged=true：容器内的root拥有真正的权限，否则容器内的root只是外部普通用户权限（不设置启动会报错）<br>-v：挂载文件<br>上面的配置文件路径（根据实际情况修改）：/root/postgres/postgres.conf<br>上面的挂载数据路径（根据实际情况修改）：/root/postgres/data/</p>\n"},{"title":"git常用命令","date":"2019-07-03T08:47:28.000Z","_content":"\n### git 常用命令\ngit add 文件名：追踪指定文件\ngit add .：追踪所有文件\ngit commit -m '注释'：提交到本地仓库\ngit push：推送远程仓库\ngit pull：拉取\ngit status：查看当前提交状态\ngit branch：查看分支\ngit branch 分支名：创建分支，不切换\ngit branch -d：删除分支\ngit checkout 分支名：切换到某个分支\ngit checkout -b 分支名：创建分支，并切换到该分支\ngit merge 分支名：合并分支\ngit reset HEAD -- file：清空add命令向暂存区提交的关于file文件的修改\ngit reset --hard HEAD：版本回退\ngit reflog：查看所有操作日志\ngit stash：将文件放入暂存区\ngit stash list：查看暂存区文件\ngit stash applly 暂存区id：将文件从暂存区取出\ngit stash pop：将文件从暂存区取出,并删除暂存区的文件\ngit stash clear：清除暂存区\ngit stash branch 分支名称：暂存区创建分支\ngit diff 文件名：比较工作目录和暂存区的不同\ngit diff --cached 文件名：比较暂存区和远程仓库的不同\ngit diff commitID 文件名：比较工作目录和远程仓库的不同\ngit tag -a 标签名称 -m '注释'：创建标签\ngit tag：查看标签\ngit push origin 标签名称：推送标签到远程仓库\ngit push origin --tags：推送所有的标签到远程仓库\n\n\n\n\n","source":"_posts/git-cmd.md","raw":"---\ntitle: git常用命令\ndate: 2019-07-03 16:47:28\ntags:\n- git\ncategories:\n- git\n---\n\n### git 常用命令\ngit add 文件名：追踪指定文件\ngit add .：追踪所有文件\ngit commit -m '注释'：提交到本地仓库\ngit push：推送远程仓库\ngit pull：拉取\ngit status：查看当前提交状态\ngit branch：查看分支\ngit branch 分支名：创建分支，不切换\ngit branch -d：删除分支\ngit checkout 分支名：切换到某个分支\ngit checkout -b 分支名：创建分支，并切换到该分支\ngit merge 分支名：合并分支\ngit reset HEAD -- file：清空add命令向暂存区提交的关于file文件的修改\ngit reset --hard HEAD：版本回退\ngit reflog：查看所有操作日志\ngit stash：将文件放入暂存区\ngit stash list：查看暂存区文件\ngit stash applly 暂存区id：将文件从暂存区取出\ngit stash pop：将文件从暂存区取出,并删除暂存区的文件\ngit stash clear：清除暂存区\ngit stash branch 分支名称：暂存区创建分支\ngit diff 文件名：比较工作目录和暂存区的不同\ngit diff --cached 文件名：比较暂存区和远程仓库的不同\ngit diff commitID 文件名：比较工作目录和远程仓库的不同\ngit tag -a 标签名称 -m '注释'：创建标签\ngit tag：查看标签\ngit push origin 标签名称：推送标签到远程仓库\ngit push origin --tags：推送所有的标签到远程仓库\n\n\n\n\n","slug":"git-cmd","published":1,"updated":"2019-07-04T00:53:36.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0rqqlyy000eugqsx819qplq","content":"<h3 id=\"git-常用命令\"><a href=\"#git-常用命令\" class=\"headerlink\" title=\"git 常用命令\"></a>git 常用命令</h3><p>git add 文件名：追踪指定文件<br>git add .：追踪所有文件<br>git commit -m ‘注释’：提交到本地仓库<br>git push：推送远程仓库<br>git pull：拉取<br>git status：查看当前提交状态<br>git branch：查看分支<br>git branch 分支名：创建分支，不切换<br>git branch -d：删除分支<br>git checkout 分支名：切换到某个分支<br>git checkout -b 分支名：创建分支，并切换到该分支<br>git merge 分支名：合并分支<br>git reset HEAD – file：清空add命令向暂存区提交的关于file文件的修改<br>git reset –hard HEAD：版本回退<br>git reflog：查看所有操作日志<br>git stash：将文件放入暂存区<br>git stash list：查看暂存区文件<br>git stash applly 暂存区id：将文件从暂存区取出<br>git stash pop：将文件从暂存区取出,并删除暂存区的文件<br>git stash clear：清除暂存区<br>git stash branch 分支名称：暂存区创建分支<br>git diff 文件名：比较工作目录和暂存区的不同<br>git diff –cached 文件名：比较暂存区和远程仓库的不同<br>git diff commitID 文件名：比较工作目录和远程仓库的不同<br>git tag -a 标签名称 -m ‘注释’：创建标签<br>git tag：查看标签<br>git push origin 标签名称：推送标签到远程仓库<br>git push origin –tags：推送所有的标签到远程仓库</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"git-常用命令\"><a href=\"#git-常用命令\" class=\"headerlink\" title=\"git 常用命令\"></a>git 常用命令</h3><p>git add 文件名：追踪指定文件<br>git add .：追踪所有文件<br>git commit -m ‘注释’：提交到本地仓库<br>git push：推送远程仓库<br>git pull：拉取<br>git status：查看当前提交状态<br>git branch：查看分支<br>git branch 分支名：创建分支，不切换<br>git branch -d：删除分支<br>git checkout 分支名：切换到某个分支<br>git checkout -b 分支名：创建分支，并切换到该分支<br>git merge 分支名：合并分支<br>git reset HEAD – file：清空add命令向暂存区提交的关于file文件的修改<br>git reset –hard HEAD：版本回退<br>git reflog：查看所有操作日志<br>git stash：将文件放入暂存区<br>git stash list：查看暂存区文件<br>git stash applly 暂存区id：将文件从暂存区取出<br>git stash pop：将文件从暂存区取出,并删除暂存区的文件<br>git stash clear：清除暂存区<br>git stash branch 分支名称：暂存区创建分支<br>git diff 文件名：比较工作目录和暂存区的不同<br>git diff –cached 文件名：比较暂存区和远程仓库的不同<br>git diff commitID 文件名：比较工作目录和远程仓库的不同<br>git tag -a 标签名称 -m ‘注释’：创建标签<br>git tag：查看标签<br>git push origin 标签名称：推送标签到远程仓库<br>git push origin –tags：推送所有的标签到远程仓库</p>\n"},{"title":"docker部署springboot","date":"2019-06-20T08:58:02.000Z","_content":"\n### 将springboot项目打包成jar包\n略\n\n### Dockerfile文件\n```Dockerfile\nFROM java:8\nVOLUME /tmp\nCOPY myweb-0.0.1-SNAPSHOT.jar /opt/web/app.jar\nCOPY /config/application.yml /opt/web/config/application.yml\nWORKDIR /opt/web\nRUN bash -c \"touch /app.jar\"\nEXPOSE 8080\nENTRYPOINT [\"java\", \"-jar\", \"app.jar\"]\n```\nFROM：拉取java8为基础对象\nVOLUME：指定临时文件目录为/tmp。其效果是在主机 /var/lib/docker 目录下创建了一个临时文件，并链接到容器的/tmp。改步骤是可选的，如果涉及到文件系统的应用就很有必要了。/tmp目录用来持久化到Docker 数据文件夹，因为 Spring Boot 使用的内嵌 Tomcat 容器默认使用/tmp作为工作目录（感觉没什么用啊，在主机该目录下是空的。）\nCOPY：目录下springboot的jar包及配置文件复制到docker镜像内\nWORKDIR：切换工作目录\nRUN：执行命令（touch /app.jar）\nEXPOSE：暴露8080端口\nENTRYPOINT：执行命令（java -jar app.jar）\n\n### 生成镜像\n#### 将jar包、Dockerfile放到同一目录下（如：/opt/web），yml文件放到下级目录config（与Dockerfile中对应，如：/opt/web/config）\n\n#### 生成镜像\n```bash\n$ docker build -t myweb:v1 .\n```\n-t：代表要构建的镜像的tag，上文的镜像名为myweb，版本为v1\n\n### 启动容器\n```bash\n$ docker run -itd --name=myweb -p 8080:8080 -v /opt/web/config/application.yml:/opt/web/config/application.yml -v /opt/web/logs/:/opt/web/logs --privileged=true myweb:v1\n```\n挂载配置文件和日志文件。\n其实在生成镜像的时候，就已经把目录下的配置文件放进去了。不过还是需要挂载出来，不然需要改配置的时候太麻烦了，这个基础镜像里没有yum和vim。。。","source":"_posts/docker-springboot.md","raw":"---\ntitle: docker部署springboot\ndate: 2019-06-20 16:58:02\ntags:\n- docker\n- springboot\ncategories:\n- docker\n---\n\n### 将springboot项目打包成jar包\n略\n\n### Dockerfile文件\n```Dockerfile\nFROM java:8\nVOLUME /tmp\nCOPY myweb-0.0.1-SNAPSHOT.jar /opt/web/app.jar\nCOPY /config/application.yml /opt/web/config/application.yml\nWORKDIR /opt/web\nRUN bash -c \"touch /app.jar\"\nEXPOSE 8080\nENTRYPOINT [\"java\", \"-jar\", \"app.jar\"]\n```\nFROM：拉取java8为基础对象\nVOLUME：指定临时文件目录为/tmp。其效果是在主机 /var/lib/docker 目录下创建了一个临时文件，并链接到容器的/tmp。改步骤是可选的，如果涉及到文件系统的应用就很有必要了。/tmp目录用来持久化到Docker 数据文件夹，因为 Spring Boot 使用的内嵌 Tomcat 容器默认使用/tmp作为工作目录（感觉没什么用啊，在主机该目录下是空的。）\nCOPY：目录下springboot的jar包及配置文件复制到docker镜像内\nWORKDIR：切换工作目录\nRUN：执行命令（touch /app.jar）\nEXPOSE：暴露8080端口\nENTRYPOINT：执行命令（java -jar app.jar）\n\n### 生成镜像\n#### 将jar包、Dockerfile放到同一目录下（如：/opt/web），yml文件放到下级目录config（与Dockerfile中对应，如：/opt/web/config）\n\n#### 生成镜像\n```bash\n$ docker build -t myweb:v1 .\n```\n-t：代表要构建的镜像的tag，上文的镜像名为myweb，版本为v1\n\n### 启动容器\n```bash\n$ docker run -itd --name=myweb -p 8080:8080 -v /opt/web/config/application.yml:/opt/web/config/application.yml -v /opt/web/logs/:/opt/web/logs --privileged=true myweb:v1\n```\n挂载配置文件和日志文件。\n其实在生成镜像的时候，就已经把目录下的配置文件放进去了。不过还是需要挂载出来，不然需要改配置的时候太麻烦了，这个基础镜像里没有yum和vim。。。","slug":"docker-springboot","published":1,"updated":"2019-06-20T12:19:29.843Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0rqqlz0000fugqsq0ae5occ","content":"<h3 id=\"将springboot项目打包成jar包\"><a href=\"#将springboot项目打包成jar包\" class=\"headerlink\" title=\"将springboot项目打包成jar包\"></a>将springboot项目打包成jar包</h3><p>略</p>\n<h3 id=\"Dockerfile文件\"><a href=\"#Dockerfile文件\" class=\"headerlink\" title=\"Dockerfile文件\"></a>Dockerfile文件</h3><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> java:<span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"keyword\">VOLUME</span><span class=\"bash\"> /tmp</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> myweb-0.0.1-SNAPSHOT.jar /opt/web/app.jar</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> /config/application.yml /opt/web/config/application.yml</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /opt/web</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> bash -c <span class=\"string\">\"touch /app.jar\"</span></span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"bash\"> [<span class=\"string\">\"java\"</span>, <span class=\"string\">\"-jar\"</span>, <span class=\"string\">\"app.jar\"</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>FROM：拉取java8为基础对象<br>VOLUME：指定临时文件目录为/tmp。其效果是在主机 /var/lib/docker 目录下创建了一个临时文件，并链接到容器的/tmp。改步骤是可选的，如果涉及到文件系统的应用就很有必要了。/tmp目录用来持久化到Docker 数据文件夹，因为 Spring Boot 使用的内嵌 Tomcat 容器默认使用/tmp作为工作目录（感觉没什么用啊，在主机该目录下是空的。）<br>COPY：目录下springboot的jar包及配置文件复制到docker镜像内<br>WORKDIR：切换工作目录<br>RUN：执行命令（touch /app.jar）<br>EXPOSE：暴露8080端口<br>ENTRYPOINT：执行命令（java -jar app.jar）</p>\n<h3 id=\"生成镜像\"><a href=\"#生成镜像\" class=\"headerlink\" title=\"生成镜像\"></a>生成镜像</h3><h4 id=\"将jar包、Dockerfile放到同一目录下（如：-opt-web），yml文件放到下级目录config（与Dockerfile中对应，如：-opt-web-config）\"><a href=\"#将jar包、Dockerfile放到同一目录下（如：-opt-web），yml文件放到下级目录config（与Dockerfile中对应，如：-opt-web-config）\" class=\"headerlink\" title=\"将jar包、Dockerfile放到同一目录下（如：/opt/web），yml文件放到下级目录config（与Dockerfile中对应，如：/opt/web/config）\"></a>将jar包、Dockerfile放到同一目录下（如：/opt/web），yml文件放到下级目录config（与Dockerfile中对应，如：/opt/web/config）</h4><h4 id=\"生成镜像-1\"><a href=\"#生成镜像-1\" class=\"headerlink\" title=\"生成镜像\"></a>生成镜像</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker build -t myweb:v1 .</span><br></pre></td></tr></table></figure>\n\n<p>-t：代表要构建的镜像的tag，上文的镜像名为myweb，版本为v1</p>\n<h3 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -itd --name=myweb -p 8080:8080 -v /opt/web/config/application.yml:/opt/web/config/application.yml -v /opt/web/logs/:/opt/web/logs --privileged=<span class=\"literal\">true</span> myweb:v1</span><br></pre></td></tr></table></figure>\n\n<p>挂载配置文件和日志文件。<br>其实在生成镜像的时候，就已经把目录下的配置文件放进去了。不过还是需要挂载出来，不然需要改配置的时候太麻烦了，这个基础镜像里没有yum和vim。。。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"将springboot项目打包成jar包\"><a href=\"#将springboot项目打包成jar包\" class=\"headerlink\" title=\"将springboot项目打包成jar包\"></a>将springboot项目打包成jar包</h3><p>略</p>\n<h3 id=\"Dockerfile文件\"><a href=\"#Dockerfile文件\" class=\"headerlink\" title=\"Dockerfile文件\"></a>Dockerfile文件</h3><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> java:<span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"keyword\">VOLUME</span><span class=\"bash\"> /tmp</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> myweb-0.0.1-SNAPSHOT.jar /opt/web/app.jar</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> /config/application.yml /opt/web/config/application.yml</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /opt/web</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> bash -c <span class=\"string\">\"touch /app.jar\"</span></span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"bash\"> [<span class=\"string\">\"java\"</span>, <span class=\"string\">\"-jar\"</span>, <span class=\"string\">\"app.jar\"</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>FROM：拉取java8为基础对象<br>VOLUME：指定临时文件目录为/tmp。其效果是在主机 /var/lib/docker 目录下创建了一个临时文件，并链接到容器的/tmp。改步骤是可选的，如果涉及到文件系统的应用就很有必要了。/tmp目录用来持久化到Docker 数据文件夹，因为 Spring Boot 使用的内嵌 Tomcat 容器默认使用/tmp作为工作目录（感觉没什么用啊，在主机该目录下是空的。）<br>COPY：目录下springboot的jar包及配置文件复制到docker镜像内<br>WORKDIR：切换工作目录<br>RUN：执行命令（touch /app.jar）<br>EXPOSE：暴露8080端口<br>ENTRYPOINT：执行命令（java -jar app.jar）</p>\n<h3 id=\"生成镜像\"><a href=\"#生成镜像\" class=\"headerlink\" title=\"生成镜像\"></a>生成镜像</h3><h4 id=\"将jar包、Dockerfile放到同一目录下（如：-opt-web），yml文件放到下级目录config（与Dockerfile中对应，如：-opt-web-config）\"><a href=\"#将jar包、Dockerfile放到同一目录下（如：-opt-web），yml文件放到下级目录config（与Dockerfile中对应，如：-opt-web-config）\" class=\"headerlink\" title=\"将jar包、Dockerfile放到同一目录下（如：/opt/web），yml文件放到下级目录config（与Dockerfile中对应，如：/opt/web/config）\"></a>将jar包、Dockerfile放到同一目录下（如：/opt/web），yml文件放到下级目录config（与Dockerfile中对应，如：/opt/web/config）</h4><h4 id=\"生成镜像-1\"><a href=\"#生成镜像-1\" class=\"headerlink\" title=\"生成镜像\"></a>生成镜像</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker build -t myweb:v1 .</span><br></pre></td></tr></table></figure>\n\n<p>-t：代表要构建的镜像的tag，上文的镜像名为myweb，版本为v1</p>\n<h3 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -itd --name=myweb -p 8080:8080 -v /opt/web/config/application.yml:/opt/web/config/application.yml -v /opt/web/logs/:/opt/web/logs --privileged=<span class=\"literal\">true</span> myweb:v1</span><br></pre></td></tr></table></figure>\n\n<p>挂载配置文件和日志文件。<br>其实在生成镜像的时候，就已经把目录下的配置文件放进去了。不过还是需要挂载出来，不然需要改配置的时候太麻烦了，这个基础镜像里没有yum和vim。。。</p>\n"},{"title":"linux-查看网络使用情况","date":"2022-03-07T01:24:52.000Z","_content":"\n### 安装\n```\nyum install nload\n```\n\n### 使用\n```bash\nnload -m  \n# nload device eth0 指定网卡\n```\n\n![](/images/linux/nload.png)\n","source":"_posts/linux-user.md","raw":"---\ntitle: linux-查看网络使用情况\ndate: 2022-03-07 09:24:52\ntags: \n- linux\n- nload\ncategories: \n- linux\n---\n\n### 安装\n```\nyum install nload\n```\n\n### 使用\n```bash\nnload -m  \n# nload device eth0 指定网卡\n```\n\n![](/images/linux/nload.png)\n","slug":"linux-user","published":1,"updated":"2022-03-08T03:07:16.906Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0rqqlz2000jugqsg6jg1ey6","content":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nload</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nload -m  </span><br><span class=\"line\"><span class=\"comment\"># nload device eth0 指定网卡</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/linux/nload.png\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nload</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nload -m  </span><br><span class=\"line\"><span class=\"comment\"># nload device eth0 指定网卡</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/linux/nload.png\" alt></p>\n"},{"title":"java-ArrayList根据某个属性去重","date":"2019-07-01T01:45:26.000Z","_content":"\n### 实体类\n```java\npublic class Student\n{\n\tprivate String sno;\n\n\tprivate String name;\n\n\tprivate int sex;\n\n\tpublic Student(String sno, String name, int sex)\n\t{\n\t\tthis.sno = sno;\n\t\tthis.name = name;\n\t\tthis.sex = sex;\n\t}\n\n\tpublic String getName()\n\t{\n\t\treturn name;\n\t}\n\n\tpublic void setName(String name)\n\t{\n\t\tthis.name = name;\n\t}\n\n\tpublic String getSno()\n\t{\n\t\treturn sno;\n\t}\n\n\tpublic void setSno(String sno)\n\t{\n\t\tthis.sno = sno;\n\t}\n\n\tpublic int getSex()\n\t{\n\t\treturn sex;\n\t}\n\n\tpublic void setSex(int sex)\n\t{\n\t\tthis.sex = sex;\n\t}\n\n\t@Override\n\tpublic String toString()\n\t{\n\t\treturn \"Student [name=\" + name + \", sno=\" + sno + \", sex=\" + sex + \"]\";\n\t}\n\n}\n```\n\n### 根据sno字段去重\n```java\nList<Student> list = new ArrayList<Student>();\n\nfor (int i = 0; i < 3; i++)\n{\n  list.add(new Student(\"123\", \"name\", i));\n}\n\nlist = list.stream().collect(\n    Collectors.collectingAndThen(\n        Collectors.toCollection(() -> new TreeSet<>(Comparator.comparing(Student::getSno))),\n        ArrayList::new));\n```\n","source":"_posts/java-removal.md","raw":"---\ntitle: java-ArrayList根据某个属性去重\ndate: 2019-07-01 09:45:26\ntags:\n- java\ncategories:\n- java\n---\n\n### 实体类\n```java\npublic class Student\n{\n\tprivate String sno;\n\n\tprivate String name;\n\n\tprivate int sex;\n\n\tpublic Student(String sno, String name, int sex)\n\t{\n\t\tthis.sno = sno;\n\t\tthis.name = name;\n\t\tthis.sex = sex;\n\t}\n\n\tpublic String getName()\n\t{\n\t\treturn name;\n\t}\n\n\tpublic void setName(String name)\n\t{\n\t\tthis.name = name;\n\t}\n\n\tpublic String getSno()\n\t{\n\t\treturn sno;\n\t}\n\n\tpublic void setSno(String sno)\n\t{\n\t\tthis.sno = sno;\n\t}\n\n\tpublic int getSex()\n\t{\n\t\treturn sex;\n\t}\n\n\tpublic void setSex(int sex)\n\t{\n\t\tthis.sex = sex;\n\t}\n\n\t@Override\n\tpublic String toString()\n\t{\n\t\treturn \"Student [name=\" + name + \", sno=\" + sno + \", sex=\" + sex + \"]\";\n\t}\n\n}\n```\n\n### 根据sno字段去重\n```java\nList<Student> list = new ArrayList<Student>();\n\nfor (int i = 0; i < 3; i++)\n{\n  list.add(new Student(\"123\", \"name\", i));\n}\n\nlist = list.stream().collect(\n    Collectors.collectingAndThen(\n        Collectors.toCollection(() -> new TreeSet<>(Comparator.comparing(Student::getSno))),\n        ArrayList::new));\n```\n","slug":"java-removal","published":1,"updated":"2019-07-02T08:12:28.831Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0rqqlz3000lugqsnxsydsl4","content":"<h3 id=\"实体类\"><a href=\"#实体类\" class=\"headerlink\" title=\"实体类\"></a>实体类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String sno;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> sex;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String sno, String name, <span class=\"keyword\">int</span> sex)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.sno = sno;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.sex = sex;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSno</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sno;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSno</span><span class=\"params\">(String sno)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.sno = sno;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getSex</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sex;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSex</span><span class=\"params\">(<span class=\"keyword\">int</span> sex)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.sex = sex;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Student [name=\"</span> + name + <span class=\"string\">\", sno=\"</span> + sno + <span class=\"string\">\", sex=\"</span> + sex + <span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"根据sno字段去重\"><a href=\"#根据sno字段去重\" class=\"headerlink\" title=\"根据sno字段去重\"></a>根据sno字段去重</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Student&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Student&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  list.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">\"123\"</span>, <span class=\"string\">\"name\"</span>, i));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">list = list.stream().collect(</span><br><span class=\"line\">    Collectors.collectingAndThen(</span><br><span class=\"line\">        Collectors.toCollection(() -&gt; <span class=\"keyword\">new</span> TreeSet&lt;&gt;(Comparator.comparing(Student::getSno))),</span><br><span class=\"line\">        ArrayList::<span class=\"keyword\">new</span>));</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"实体类\"><a href=\"#实体类\" class=\"headerlink\" title=\"实体类\"></a>实体类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String sno;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> sex;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String sno, String name, <span class=\"keyword\">int</span> sex)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.sno = sno;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.sex = sex;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSno</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sno;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSno</span><span class=\"params\">(String sno)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.sno = sno;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getSex</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sex;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSex</span><span class=\"params\">(<span class=\"keyword\">int</span> sex)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.sex = sex;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Student [name=\"</span> + name + <span class=\"string\">\", sno=\"</span> + sno + <span class=\"string\">\", sex=\"</span> + sex + <span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"根据sno字段去重\"><a href=\"#根据sno字段去重\" class=\"headerlink\" title=\"根据sno字段去重\"></a>根据sno字段去重</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Student&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Student&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  list.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">\"123\"</span>, <span class=\"string\">\"name\"</span>, i));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">list = list.stream().collect(</span><br><span class=\"line\">    Collectors.collectingAndThen(</span><br><span class=\"line\">        Collectors.toCollection(() -&gt; <span class=\"keyword\">new</span> TreeSet&lt;&gt;(Comparator.comparing(Student::getSno))),</span><br><span class=\"line\">        ArrayList::<span class=\"keyword\">new</span>));</span><br></pre></td></tr></table></figure>\n\n"},{"title":"docker部署vsftpd","date":"2020-12-16T08:09:45.000Z","_content":"\n### 官方文档链接\n<https://hub.docker.com/r/fauria/vsftpd>\n\n### docker官方镜像(镜像名:版本号，默认latest)\n```bash\n$ docker pull fauria/vsftpd\n```\n\n\n### 查看镜像列表\n```bash\n$ docker images\n```\n\n\n### 启动容器\n```bash\n$ docker  run -idt -v /var/ftp:/home/vsftpd \\ \n  -p 20:20 -p 21:21 -p  21100-21110:21100-21110 \\ \n  -e FTP_USER=test -e FTP_PASS=test \\ \n  -e PASV_ADDRESS=192.168.3.37 \\ \n  -e PASV_MIN_PORT=21100 -e PASV_MAX_PORT=21110 \\ \n  --name vsftpd --restart=always fauria/vsftpd\n```\n-v：把容器内/home/vsftpd挂载到主机/var/ftp目录。这里放到var这个公共目录下，其他部分目录可能会导致客户端连不上（需要设置用户权限）\n-e FTP_USER=test：设置用户名test\n-e FTP_PASS=test：设置密码test\n-e PASV_ADDRESS=192.168.3.37：开启ftp被动模式，值为主机ip\n-e PASV_MIN_PORT：客户端下载随机端口号下限，与前面docker端口映射一致\n-e PASV_MAX_PORT：客户端下载随机端口号上限，与前面docker端口映射一致\n--restart=always：docker重启时重启容器\n\n### 测试\n![](/images/ftp/ftp1.png)\n\n","source":"_posts/docker-vsftpd.md","raw":"---\ntitle: docker部署vsftpd\ndate: 2020-12-16 16:09:45\ntags: \n- docker\n- vsftpd\ncategories: \n- docker\n---\n\n### 官方文档链接\n<https://hub.docker.com/r/fauria/vsftpd>\n\n### docker官方镜像(镜像名:版本号，默认latest)\n```bash\n$ docker pull fauria/vsftpd\n```\n\n\n### 查看镜像列表\n```bash\n$ docker images\n```\n\n\n### 启动容器\n```bash\n$ docker  run -idt -v /var/ftp:/home/vsftpd \\ \n  -p 20:20 -p 21:21 -p  21100-21110:21100-21110 \\ \n  -e FTP_USER=test -e FTP_PASS=test \\ \n  -e PASV_ADDRESS=192.168.3.37 \\ \n  -e PASV_MIN_PORT=21100 -e PASV_MAX_PORT=21110 \\ \n  --name vsftpd --restart=always fauria/vsftpd\n```\n-v：把容器内/home/vsftpd挂载到主机/var/ftp目录。这里放到var这个公共目录下，其他部分目录可能会导致客户端连不上（需要设置用户权限）\n-e FTP_USER=test：设置用户名test\n-e FTP_PASS=test：设置密码test\n-e PASV_ADDRESS=192.168.3.37：开启ftp被动模式，值为主机ip\n-e PASV_MIN_PORT：客户端下载随机端口号下限，与前面docker端口映射一致\n-e PASV_MAX_PORT：客户端下载随机端口号上限，与前面docker端口映射一致\n--restart=always：docker重启时重启容器\n\n### 测试\n![](/images/ftp/ftp1.png)\n\n","slug":"docker-vsftpd","published":1,"updated":"2020-12-17T09:42:34.632Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0rqqlz5000pugqss7pfbkf6","content":"<h3 id=\"官方文档链接\"><a href=\"#官方文档链接\" class=\"headerlink\" title=\"官方文档链接\"></a>官方文档链接</h3><p><a href=\"https://hub.docker.com/r/fauria/vsftpd\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/fauria/vsftpd</a></p>\n<h3 id=\"docker官方镜像-镜像名-版本号，默认latest\"><a href=\"#docker官方镜像-镜像名-版本号，默认latest\" class=\"headerlink\" title=\"docker官方镜像(镜像名:版本号，默认latest)\"></a>docker官方镜像(镜像名:版本号，默认latest)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull fauria/vsftpd</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看镜像列表\"><a href=\"#查看镜像列表\" class=\"headerlink\" title=\"查看镜像列表\"></a>查看镜像列表</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker images</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker  run -idt -v /var/ftp:/home/vsftpd \\ </span><br><span class=\"line\">  -p 20:20 -p 21:21 -p  21100-21110:21100-21110 \\ </span><br><span class=\"line\">  -e FTP_USER=<span class=\"built_in\">test</span> -e FTP_PASS=<span class=\"built_in\">test</span> \\ </span><br><span class=\"line\">  -e PASV_ADDRESS=192.168.3.37 \\ </span><br><span class=\"line\">  -e PASV_MIN_PORT=21100 -e PASV_MAX_PORT=21110 \\ </span><br><span class=\"line\">  --name vsftpd --restart=always fauria/vsftpd</span><br></pre></td></tr></table></figure>\n\n<p>-v：把容器内/home/vsftpd挂载到主机/var/ftp目录。这里放到var这个公共目录下，其他部分目录可能会导致客户端连不上（需要设置用户权限）<br>-e FTP_USER=test：设置用户名test<br>-e FTP_PASS=test：设置密码test<br>-e PASV_ADDRESS=192.168.3.37：开启ftp被动模式，值为主机ip<br>-e PASV_MIN_PORT：客户端下载随机端口号下限，与前面docker端口映射一致<br>-e PASV_MAX_PORT：客户端下载随机端口号上限，与前面docker端口映射一致<br>–restart=always：docker重启时重启容器</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p><img src=\"/images/ftp/ftp1.png\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"官方文档链接\"><a href=\"#官方文档链接\" class=\"headerlink\" title=\"官方文档链接\"></a>官方文档链接</h3><p><a href=\"https://hub.docker.com/r/fauria/vsftpd\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/fauria/vsftpd</a></p>\n<h3 id=\"docker官方镜像-镜像名-版本号，默认latest\"><a href=\"#docker官方镜像-镜像名-版本号，默认latest\" class=\"headerlink\" title=\"docker官方镜像(镜像名:版本号，默认latest)\"></a>docker官方镜像(镜像名:版本号，默认latest)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull fauria/vsftpd</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看镜像列表\"><a href=\"#查看镜像列表\" class=\"headerlink\" title=\"查看镜像列表\"></a>查看镜像列表</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker images</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker  run -idt -v /var/ftp:/home/vsftpd \\ </span><br><span class=\"line\">  -p 20:20 -p 21:21 -p  21100-21110:21100-21110 \\ </span><br><span class=\"line\">  -e FTP_USER=<span class=\"built_in\">test</span> -e FTP_PASS=<span class=\"built_in\">test</span> \\ </span><br><span class=\"line\">  -e PASV_ADDRESS=192.168.3.37 \\ </span><br><span class=\"line\">  -e PASV_MIN_PORT=21100 -e PASV_MAX_PORT=21110 \\ </span><br><span class=\"line\">  --name vsftpd --restart=always fauria/vsftpd</span><br></pre></td></tr></table></figure>\n\n<p>-v：把容器内/home/vsftpd挂载到主机/var/ftp目录。这里放到var这个公共目录下，其他部分目录可能会导致客户端连不上（需要设置用户权限）<br>-e FTP_USER=test：设置用户名test<br>-e FTP_PASS=test：设置密码test<br>-e PASV_ADDRESS=192.168.3.37：开启ftp被动模式，值为主机ip<br>-e PASV_MIN_PORT：客户端下载随机端口号下限，与前面docker端口映射一致<br>-e PASV_MAX_PORT：客户端下载随机端口号上限，与前面docker端口映射一致<br>–restart=always：docker重启时重启容器</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p><img src=\"/images/ftp/ftp1.png\" alt></p>\n"},{"title":"nginx反向代理、静态资源、负载均衡配置","date":"2019-06-21T03:45:12.000Z","_content":"\n### nginx配置文件结构\n![](/images/nginx.png)\n\n#### 全局块（main）\n该部分配置主要影响Nginx全局，通常包括下面几个部分：\n* 配置运行Nginx服务器用户（组）\n* worker process数\n* Nginx进程PID存放路径\n* 错误日志的存放路径\n* 配置文件的引入\n\n#### events块\n该部分配置主要影响Nginx服务器与用户的网络连接，主要包括：\n* 设置网络连接的序列化\n* 是否允许同时接收多个网络连接\n* 事件驱动模型的选择\n* 最大连接数的配置\n\n#### http块\n* 定义MIMI-Type\n* 自定义服务日志\n* 允许sendfile方式传输文件\n* 连接超时时间\n* 单连接请求数上限\n\n#### server块\n* 配置网络监听\n* 基于名称的虚拟主机配置\n* 基于IP的虚拟主机配置\n\n#### location块\n* location配置\n* 请求根目录配置\n* 更改location的URI\n* 网站默认首页配置\n\n### 简单的配置（基本都是默认配置）\n```conf\nuser  nginx;\nworker_processes  1;\n\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n    #gzip  on;\n    gzip on;\n    gzip_min_length 1k;\n    gzip_buffers 4 16k;\n    #gzip_http_version 1.0;\n    gzip_comp_level 2;\n    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n    gzip_vary off;\n    gzip_disable \"MSIE [1-6]\\.\";\n\n    include /etc/nginx/conf.d/*.conf;\n}\n```\n* user nginx：运行Nginx服务器用户/组 user nobody nobody则默认所有用户都可以启动Nginx进程\n* worker_processes：进程数，Nginx服务器实现并发处理服务的关键\n* error_log：错误日志存放路径\n* pid：Nginx进程是作为系统守护进程在运行，需要在某文件中保存当前运行程序的主进程号，Nginx支持该保存文件路径的自定义\n\n* worker_connections：每一个worker process可以同时开启的最大连接数\n\n* include  default_type：MIME-Type指的是网络资源的媒体类型，即前端请求的资源类型，include指令将mime.types文件包含进来\n* log_format：自定义一个名为main的日志格式\n* access_log：自定义服务日志 路径+格式（可选）\n* sendfile：开启高效文件传输模式（zero copy 方式），避免内核缓冲区数据和用户缓冲区数据之间的拷贝。\n* keepalive_timeout：timeout 表示server端对连接的保持时间\n* gzip：打开gzip压缩\n* include /etc/nginx/conf.d/*.conf：将其他配置文件包含进来\n\n### 主要配置（放到上面/etc/nginx/conf.d/目录下）\n```conf\nupstream myweb {\n    server 192.168.3.125:8081 weight=3;\n    server 192.168.3.124:8081 weight=4;\n}\n\nserver {\n    listen       80;\n    server_name  192.168.3.123;\n\n    location /zxj/ {\n      alias       /opt/resource/myweb/;\n      add_header  Access-Control-Allow-Origin *;\n    }\n\n    location / {\n      proxy_pass  http://myweb;\n      index index.html index.htm;\n    }\n\n}\n```\n* upstream：设置负载均衡服务器，后端服务器地址及权重\n* server：\n   * listen：服务端口\n   * server_name：ip/域名，多个用逗号分开\n   * location：地址匹配设置，支持正则匹配，也支持条件匹配。从上到下优先匹配。\n      * alias：别名。将/zxj/映射目录/opt/resource/myweb/\n      * add_header：允许跨域\n      * proxy_pass：反向代理\n\n上面配置效果：\n   -http://192.168.3.123:80/zxj/xxx  => 192.168.3.123该服务器下 /opt/resource/myweb/目录下xxx\n   -http://192.168.3.123:80/ccc/xxx  => http://192.168.3.124:8081/ccc/xxx 或 http://192.168.3.125:8081/ccc/xxx （比例3:4，ccc处不能为zxj，会匹配到上一个）\n\n\nalias那里也可以用root，试了一些配置路径都没映射成功，马克一下。\n小服务器，暂时不用考虑性能优化了。有时间再去研究研究~\n\n\n\n\n\n\n\n","source":"_posts/nginx-proxy-config.md","raw":"---\ntitle: nginx反向代理、静态资源、负载均衡配置\ndate: 2019-06-21 11:45:12\ntags:\n- nginx\n- proxy\ncategories:\n- nginx\n---\n\n### nginx配置文件结构\n![](/images/nginx.png)\n\n#### 全局块（main）\n该部分配置主要影响Nginx全局，通常包括下面几个部分：\n* 配置运行Nginx服务器用户（组）\n* worker process数\n* Nginx进程PID存放路径\n* 错误日志的存放路径\n* 配置文件的引入\n\n#### events块\n该部分配置主要影响Nginx服务器与用户的网络连接，主要包括：\n* 设置网络连接的序列化\n* 是否允许同时接收多个网络连接\n* 事件驱动模型的选择\n* 最大连接数的配置\n\n#### http块\n* 定义MIMI-Type\n* 自定义服务日志\n* 允许sendfile方式传输文件\n* 连接超时时间\n* 单连接请求数上限\n\n#### server块\n* 配置网络监听\n* 基于名称的虚拟主机配置\n* 基于IP的虚拟主机配置\n\n#### location块\n* location配置\n* 请求根目录配置\n* 更改location的URI\n* 网站默认首页配置\n\n### 简单的配置（基本都是默认配置）\n```conf\nuser  nginx;\nworker_processes  1;\n\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n    #gzip  on;\n    gzip on;\n    gzip_min_length 1k;\n    gzip_buffers 4 16k;\n    #gzip_http_version 1.0;\n    gzip_comp_level 2;\n    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n    gzip_vary off;\n    gzip_disable \"MSIE [1-6]\\.\";\n\n    include /etc/nginx/conf.d/*.conf;\n}\n```\n* user nginx：运行Nginx服务器用户/组 user nobody nobody则默认所有用户都可以启动Nginx进程\n* worker_processes：进程数，Nginx服务器实现并发处理服务的关键\n* error_log：错误日志存放路径\n* pid：Nginx进程是作为系统守护进程在运行，需要在某文件中保存当前运行程序的主进程号，Nginx支持该保存文件路径的自定义\n\n* worker_connections：每一个worker process可以同时开启的最大连接数\n\n* include  default_type：MIME-Type指的是网络资源的媒体类型，即前端请求的资源类型，include指令将mime.types文件包含进来\n* log_format：自定义一个名为main的日志格式\n* access_log：自定义服务日志 路径+格式（可选）\n* sendfile：开启高效文件传输模式（zero copy 方式），避免内核缓冲区数据和用户缓冲区数据之间的拷贝。\n* keepalive_timeout：timeout 表示server端对连接的保持时间\n* gzip：打开gzip压缩\n* include /etc/nginx/conf.d/*.conf：将其他配置文件包含进来\n\n### 主要配置（放到上面/etc/nginx/conf.d/目录下）\n```conf\nupstream myweb {\n    server 192.168.3.125:8081 weight=3;\n    server 192.168.3.124:8081 weight=4;\n}\n\nserver {\n    listen       80;\n    server_name  192.168.3.123;\n\n    location /zxj/ {\n      alias       /opt/resource/myweb/;\n      add_header  Access-Control-Allow-Origin *;\n    }\n\n    location / {\n      proxy_pass  http://myweb;\n      index index.html index.htm;\n    }\n\n}\n```\n* upstream：设置负载均衡服务器，后端服务器地址及权重\n* server：\n   * listen：服务端口\n   * server_name：ip/域名，多个用逗号分开\n   * location：地址匹配设置，支持正则匹配，也支持条件匹配。从上到下优先匹配。\n      * alias：别名。将/zxj/映射目录/opt/resource/myweb/\n      * add_header：允许跨域\n      * proxy_pass：反向代理\n\n上面配置效果：\n   -http://192.168.3.123:80/zxj/xxx  => 192.168.3.123该服务器下 /opt/resource/myweb/目录下xxx\n   -http://192.168.3.123:80/ccc/xxx  => http://192.168.3.124:8081/ccc/xxx 或 http://192.168.3.125:8081/ccc/xxx （比例3:4，ccc处不能为zxj，会匹配到上一个）\n\n\nalias那里也可以用root，试了一些配置路径都没映射成功，马克一下。\n小服务器，暂时不用考虑性能优化了。有时间再去研究研究~\n\n\n\n\n\n\n\n","slug":"nginx-proxy-config","published":1,"updated":"2019-07-01T02:22:27.364Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0rqqlz6000sugqs5deha9yi","content":"<h3 id=\"nginx配置文件结构\"><a href=\"#nginx配置文件结构\" class=\"headerlink\" title=\"nginx配置文件结构\"></a>nginx配置文件结构</h3><p><img src=\"/images/nginx.png\" alt></p>\n<h4 id=\"全局块（main）\"><a href=\"#全局块（main）\" class=\"headerlink\" title=\"全局块（main）\"></a>全局块（main）</h4><p>该部分配置主要影响Nginx全局，通常包括下面几个部分：</p>\n<ul>\n<li>配置运行Nginx服务器用户（组）</li>\n<li>worker process数</li>\n<li>Nginx进程PID存放路径</li>\n<li>错误日志的存放路径</li>\n<li>配置文件的引入</li>\n</ul>\n<h4 id=\"events块\"><a href=\"#events块\" class=\"headerlink\" title=\"events块\"></a>events块</h4><p>该部分配置主要影响Nginx服务器与用户的网络连接，主要包括：</p>\n<ul>\n<li>设置网络连接的序列化</li>\n<li>是否允许同时接收多个网络连接</li>\n<li>事件驱动模型的选择</li>\n<li>最大连接数的配置</li>\n</ul>\n<h4 id=\"http块\"><a href=\"#http块\" class=\"headerlink\" title=\"http块\"></a>http块</h4><ul>\n<li>定义MIMI-Type</li>\n<li>自定义服务日志</li>\n<li>允许sendfile方式传输文件</li>\n<li>连接超时时间</li>\n<li>单连接请求数上限</li>\n</ul>\n<h4 id=\"server块\"><a href=\"#server块\" class=\"headerlink\" title=\"server块\"></a>server块</h4><ul>\n<li>配置网络监听</li>\n<li>基于名称的虚拟主机配置</li>\n<li>基于IP的虚拟主机配置</li>\n</ul>\n<h4 id=\"location块\"><a href=\"#location块\" class=\"headerlink\" title=\"location块\"></a>location块</h4><ul>\n<li>location配置</li>\n<li>请求根目录配置</li>\n<li>更改location的URI</li>\n<li>网站默认首页配置</li>\n</ul>\n<h3 id=\"简单的配置（基本都是默认配置）\"><a href=\"#简单的配置（基本都是默认配置）\" class=\"headerlink\" title=\"简单的配置（基本都是默认配置）\"></a>简单的配置（基本都是默认配置）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  nginx;</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">error_log  /var/log/nginx/error.log warn;</span><br><span class=\"line\">pid        /var/run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       /etc/nginx/mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\">    gzip on;</span><br><span class=\"line\">    gzip_min_length 1k;</span><br><span class=\"line\">    gzip_buffers 4 16k;</span><br><span class=\"line\">    #gzip_http_version 1.0;</span><br><span class=\"line\">    gzip_comp_level 2;</span><br><span class=\"line\">    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class=\"line\">    gzip_vary off;</span><br><span class=\"line\">    gzip_disable &quot;MSIE [1-6]\\.&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>user nginx：运行Nginx服务器用户/组 user nobody nobody则默认所有用户都可以启动Nginx进程</p>\n</li>\n<li><p>worker_processes：进程数，Nginx服务器实现并发处理服务的关键</p>\n</li>\n<li><p>error_log：错误日志存放路径</p>\n</li>\n<li><p>pid：Nginx进程是作为系统守护进程在运行，需要在某文件中保存当前运行程序的主进程号，Nginx支持该保存文件路径的自定义</p>\n</li>\n<li><p>worker_connections：每一个worker process可以同时开启的最大连接数</p>\n</li>\n<li><p>include  default_type：MIME-Type指的是网络资源的媒体类型，即前端请求的资源类型，include指令将mime.types文件包含进来</p>\n</li>\n<li><p>log_format：自定义一个名为main的日志格式</p>\n</li>\n<li><p>access_log：自定义服务日志 路径+格式（可选）</p>\n</li>\n<li><p>sendfile：开启高效文件传输模式（zero copy 方式），避免内核缓冲区数据和用户缓冲区数据之间的拷贝。</p>\n</li>\n<li><p>keepalive_timeout：timeout 表示server端对连接的保持时间</p>\n</li>\n<li><p>gzip：打开gzip压缩</p>\n</li>\n<li><p>include /etc/nginx/conf.d/*.conf：将其他配置文件包含进来</p>\n</li>\n</ul>\n<h3 id=\"主要配置（放到上面-etc-nginx-conf-d-目录下）\"><a href=\"#主要配置（放到上面-etc-nginx-conf-d-目录下）\" class=\"headerlink\" title=\"主要配置（放到上面/etc/nginx/conf.d/目录下）\"></a>主要配置（放到上面/etc/nginx/conf.d/目录下）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream myweb &#123;</span><br><span class=\"line\">    server 192.168.3.125:8081 weight=3;</span><br><span class=\"line\">    server 192.168.3.124:8081 weight=4;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  192.168.3.123;</span><br><span class=\"line\"></span><br><span class=\"line\">    location /zxj/ &#123;</span><br><span class=\"line\">      alias       /opt/resource/myweb/;</span><br><span class=\"line\">      add_header  Access-Control-Allow-Origin *;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">      proxy_pass  http://myweb;</span><br><span class=\"line\">      index index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>upstream：设置负载均衡服务器，后端服务器地址及权重</li>\n<li>server：<ul>\n<li>listen：服务端口</li>\n<li>server_name：ip/域名，多个用逗号分开</li>\n<li>location：地址匹配设置，支持正则匹配，也支持条件匹配。从上到下优先匹配。<ul>\n<li>alias：别名。将/zxj/映射目录/opt/resource/myweb/</li>\n<li>add_header：允许跨域</li>\n<li>proxy_pass：反向代理</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>上面配置效果：<br>   -<a href=\"http://192.168.3.123:80/zxj/xxx\" target=\"_blank\" rel=\"noopener\">http://192.168.3.123:80/zxj/xxx</a>  =&gt; 192.168.3.123该服务器下 /opt/resource/myweb/目录下xxx<br>   -<a href=\"http://192.168.3.123:80/ccc/xxx\" target=\"_blank\" rel=\"noopener\">http://192.168.3.123:80/ccc/xxx</a>  =&gt; <a href=\"http://192.168.3.124:8081/ccc/xxx\" target=\"_blank\" rel=\"noopener\">http://192.168.3.124:8081/ccc/xxx</a> 或 <a href=\"http://192.168.3.125:8081/ccc/xxx\" target=\"_blank\" rel=\"noopener\">http://192.168.3.125:8081/ccc/xxx</a> （比例3:4，ccc处不能为zxj，会匹配到上一个）</p>\n<p>alias那里也可以用root，试了一些配置路径都没映射成功，马克一下。<br>小服务器，暂时不用考虑性能优化了。有时间再去研究研究~</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"nginx配置文件结构\"><a href=\"#nginx配置文件结构\" class=\"headerlink\" title=\"nginx配置文件结构\"></a>nginx配置文件结构</h3><p><img src=\"/images/nginx.png\" alt></p>\n<h4 id=\"全局块（main）\"><a href=\"#全局块（main）\" class=\"headerlink\" title=\"全局块（main）\"></a>全局块（main）</h4><p>该部分配置主要影响Nginx全局，通常包括下面几个部分：</p>\n<ul>\n<li>配置运行Nginx服务器用户（组）</li>\n<li>worker process数</li>\n<li>Nginx进程PID存放路径</li>\n<li>错误日志的存放路径</li>\n<li>配置文件的引入</li>\n</ul>\n<h4 id=\"events块\"><a href=\"#events块\" class=\"headerlink\" title=\"events块\"></a>events块</h4><p>该部分配置主要影响Nginx服务器与用户的网络连接，主要包括：</p>\n<ul>\n<li>设置网络连接的序列化</li>\n<li>是否允许同时接收多个网络连接</li>\n<li>事件驱动模型的选择</li>\n<li>最大连接数的配置</li>\n</ul>\n<h4 id=\"http块\"><a href=\"#http块\" class=\"headerlink\" title=\"http块\"></a>http块</h4><ul>\n<li>定义MIMI-Type</li>\n<li>自定义服务日志</li>\n<li>允许sendfile方式传输文件</li>\n<li>连接超时时间</li>\n<li>单连接请求数上限</li>\n</ul>\n<h4 id=\"server块\"><a href=\"#server块\" class=\"headerlink\" title=\"server块\"></a>server块</h4><ul>\n<li>配置网络监听</li>\n<li>基于名称的虚拟主机配置</li>\n<li>基于IP的虚拟主机配置</li>\n</ul>\n<h4 id=\"location块\"><a href=\"#location块\" class=\"headerlink\" title=\"location块\"></a>location块</h4><ul>\n<li>location配置</li>\n<li>请求根目录配置</li>\n<li>更改location的URI</li>\n<li>网站默认首页配置</li>\n</ul>\n<h3 id=\"简单的配置（基本都是默认配置）\"><a href=\"#简单的配置（基本都是默认配置）\" class=\"headerlink\" title=\"简单的配置（基本都是默认配置）\"></a>简单的配置（基本都是默认配置）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  nginx;</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">error_log  /var/log/nginx/error.log warn;</span><br><span class=\"line\">pid        /var/run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       /etc/nginx/mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\">    gzip on;</span><br><span class=\"line\">    gzip_min_length 1k;</span><br><span class=\"line\">    gzip_buffers 4 16k;</span><br><span class=\"line\">    #gzip_http_version 1.0;</span><br><span class=\"line\">    gzip_comp_level 2;</span><br><span class=\"line\">    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class=\"line\">    gzip_vary off;</span><br><span class=\"line\">    gzip_disable &quot;MSIE [1-6]\\.&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>user nginx：运行Nginx服务器用户/组 user nobody nobody则默认所有用户都可以启动Nginx进程</p>\n</li>\n<li><p>worker_processes：进程数，Nginx服务器实现并发处理服务的关键</p>\n</li>\n<li><p>error_log：错误日志存放路径</p>\n</li>\n<li><p>pid：Nginx进程是作为系统守护进程在运行，需要在某文件中保存当前运行程序的主进程号，Nginx支持该保存文件路径的自定义</p>\n</li>\n<li><p>worker_connections：每一个worker process可以同时开启的最大连接数</p>\n</li>\n<li><p>include  default_type：MIME-Type指的是网络资源的媒体类型，即前端请求的资源类型，include指令将mime.types文件包含进来</p>\n</li>\n<li><p>log_format：自定义一个名为main的日志格式</p>\n</li>\n<li><p>access_log：自定义服务日志 路径+格式（可选）</p>\n</li>\n<li><p>sendfile：开启高效文件传输模式（zero copy 方式），避免内核缓冲区数据和用户缓冲区数据之间的拷贝。</p>\n</li>\n<li><p>keepalive_timeout：timeout 表示server端对连接的保持时间</p>\n</li>\n<li><p>gzip：打开gzip压缩</p>\n</li>\n<li><p>include /etc/nginx/conf.d/*.conf：将其他配置文件包含进来</p>\n</li>\n</ul>\n<h3 id=\"主要配置（放到上面-etc-nginx-conf-d-目录下）\"><a href=\"#主要配置（放到上面-etc-nginx-conf-d-目录下）\" class=\"headerlink\" title=\"主要配置（放到上面/etc/nginx/conf.d/目录下）\"></a>主要配置（放到上面/etc/nginx/conf.d/目录下）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream myweb &#123;</span><br><span class=\"line\">    server 192.168.3.125:8081 weight=3;</span><br><span class=\"line\">    server 192.168.3.124:8081 weight=4;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  192.168.3.123;</span><br><span class=\"line\"></span><br><span class=\"line\">    location /zxj/ &#123;</span><br><span class=\"line\">      alias       /opt/resource/myweb/;</span><br><span class=\"line\">      add_header  Access-Control-Allow-Origin *;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">      proxy_pass  http://myweb;</span><br><span class=\"line\">      index index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>upstream：设置负载均衡服务器，后端服务器地址及权重</li>\n<li>server：<ul>\n<li>listen：服务端口</li>\n<li>server_name：ip/域名，多个用逗号分开</li>\n<li>location：地址匹配设置，支持正则匹配，也支持条件匹配。从上到下优先匹配。<ul>\n<li>alias：别名。将/zxj/映射目录/opt/resource/myweb/</li>\n<li>add_header：允许跨域</li>\n<li>proxy_pass：反向代理</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>上面配置效果：<br>   -<a href=\"http://192.168.3.123:80/zxj/xxx\" target=\"_blank\" rel=\"noopener\">http://192.168.3.123:80/zxj/xxx</a>  =&gt; 192.168.3.123该服务器下 /opt/resource/myweb/目录下xxx<br>   -<a href=\"http://192.168.3.123:80/ccc/xxx\" target=\"_blank\" rel=\"noopener\">http://192.168.3.123:80/ccc/xxx</a>  =&gt; <a href=\"http://192.168.3.124:8081/ccc/xxx\" target=\"_blank\" rel=\"noopener\">http://192.168.3.124:8081/ccc/xxx</a> 或 <a href=\"http://192.168.3.125:8081/ccc/xxx\" target=\"_blank\" rel=\"noopener\">http://192.168.3.125:8081/ccc/xxx</a> （比例3:4，ccc处不能为zxj，会匹配到上一个）</p>\n<p>alias那里也可以用root，试了一些配置路径都没映射成功，马克一下。<br>小服务器，暂时不用考虑性能优化了。有时间再去研究研究~</p>\n"},{"title":"正向代理和反向代理的区别","date":"2019-06-21T02:20:37.000Z","_content":"\n<font color=\"#075DC4\" size=2>(转载)正向代理和反向代理的区别</font>\n    本文转载自：<http://blog.csdn.net/m13666368773/article/details/8060481>\n\n### 正向代理\n是一个位于客户端和原始服务器之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端需要进行一些特别的设置才能使用正向代理。\n\n### 反向代理\n服务器根据客户端的请求，从其关联的一组或多组后端服务器（如Web服务器）上获取资源，然后再将这些资源返回给客户端，客户端只会得知反向代理的IP地址，而不知道在代理服务器后面的服务器簇的存在\n\n### 正向代理和反向代理的区别\n从用途上来讲：正向代理的典型用途是为在防火墙内的局域网客户端提供访问Internet的途径。正向代理还可以使用缓冲特性减少网络使用率。反向代理的典型用途是将防火墙后面的服务器提供给Internet用户访  问。反向代理还可以为后端的多台服务器提供负载平衡，或为后端较慢的服务器提供缓冲服务。另外，反向代理还可以启用高级URL策略和管理技术，从而使处于不同web服务器系统的web页面同时存在于同一个URL空间下。\n\n从安全性来讲：正向代理允许客户端通过它访问任意网站并且隐藏客户端自身，因此你必须采取安全措施以确保仅为经过授权的客户端提供服务。反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。打个比方，<font color=\"FF0000\">a,b,c三个人，正向代理是a通过b向C借钱，a知道c的存在 。反向代理是a向b借钱，b又向C借，a不知道c的存在</font>。","source":"_posts/nginx-proxy.md","raw":"---\ntitle: 正向代理和反向代理的区别\ndate: 2019-06-21 10:20:37\ntags:\n- nginx\n- proxy\ncategories:\n- nginx\n---\n\n<font color=\"#075DC4\" size=2>(转载)正向代理和反向代理的区别</font>\n    本文转载自：<http://blog.csdn.net/m13666368773/article/details/8060481>\n\n### 正向代理\n是一个位于客户端和原始服务器之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端需要进行一些特别的设置才能使用正向代理。\n\n### 反向代理\n服务器根据客户端的请求，从其关联的一组或多组后端服务器（如Web服务器）上获取资源，然后再将这些资源返回给客户端，客户端只会得知反向代理的IP地址，而不知道在代理服务器后面的服务器簇的存在\n\n### 正向代理和反向代理的区别\n从用途上来讲：正向代理的典型用途是为在防火墙内的局域网客户端提供访问Internet的途径。正向代理还可以使用缓冲特性减少网络使用率。反向代理的典型用途是将防火墙后面的服务器提供给Internet用户访  问。反向代理还可以为后端的多台服务器提供负载平衡，或为后端较慢的服务器提供缓冲服务。另外，反向代理还可以启用高级URL策略和管理技术，从而使处于不同web服务器系统的web页面同时存在于同一个URL空间下。\n\n从安全性来讲：正向代理允许客户端通过它访问任意网站并且隐藏客户端自身，因此你必须采取安全措施以确保仅为经过授权的客户端提供服务。反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。打个比方，<font color=\"FF0000\">a,b,c三个人，正向代理是a通过b向C借钱，a知道c的存在 。反向代理是a向b借钱，b又向C借，a不知道c的存在</font>。","slug":"nginx-proxy","published":1,"updated":"2019-06-21T03:42:13.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0rqqlz8000xugqs2ihd1ac9","content":"<p><font color=\"#075DC4\" size=\"2\">(转载)正向代理和反向代理的区别</font><br>    本文转载自：<a href=\"http://blog.csdn.net/m13666368773/article/details/8060481\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/m13666368773/article/details/8060481</a></p>\n<h3 id=\"正向代理\"><a href=\"#正向代理\" class=\"headerlink\" title=\"正向代理\"></a>正向代理</h3><p>是一个位于客户端和原始服务器之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端需要进行一些特别的设置才能使用正向代理。</p>\n<h3 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h3><p>服务器根据客户端的请求，从其关联的一组或多组后端服务器（如Web服务器）上获取资源，然后再将这些资源返回给客户端，客户端只会得知反向代理的IP地址，而不知道在代理服务器后面的服务器簇的存在</p>\n<h3 id=\"正向代理和反向代理的区别\"><a href=\"#正向代理和反向代理的区别\" class=\"headerlink\" title=\"正向代理和反向代理的区别\"></a>正向代理和反向代理的区别</h3><p>从用途上来讲：正向代理的典型用途是为在防火墙内的局域网客户端提供访问Internet的途径。正向代理还可以使用缓冲特性减少网络使用率。反向代理的典型用途是将防火墙后面的服务器提供给Internet用户访  问。反向代理还可以为后端的多台服务器提供负载平衡，或为后端较慢的服务器提供缓冲服务。另外，反向代理还可以启用高级URL策略和管理技术，从而使处于不同web服务器系统的web页面同时存在于同一个URL空间下。</p>\n<p>从安全性来讲：正向代理允许客户端通过它访问任意网站并且隐藏客户端自身，因此你必须采取安全措施以确保仅为经过授权的客户端提供服务。反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。打个比方，<font color=\"FF0000\">a,b,c三个人，正向代理是a通过b向C借钱，a知道c的存在 。反向代理是a向b借钱，b又向C借，a不知道c的存在</font>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=\"#075DC4\" size=\"2\">(转载)正向代理和反向代理的区别</font><br>    本文转载自：<a href=\"http://blog.csdn.net/m13666368773/article/details/8060481\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/m13666368773/article/details/8060481</a></p>\n<h3 id=\"正向代理\"><a href=\"#正向代理\" class=\"headerlink\" title=\"正向代理\"></a>正向代理</h3><p>是一个位于客户端和原始服务器之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端需要进行一些特别的设置才能使用正向代理。</p>\n<h3 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h3><p>服务器根据客户端的请求，从其关联的一组或多组后端服务器（如Web服务器）上获取资源，然后再将这些资源返回给客户端，客户端只会得知反向代理的IP地址，而不知道在代理服务器后面的服务器簇的存在</p>\n<h3 id=\"正向代理和反向代理的区别\"><a href=\"#正向代理和反向代理的区别\" class=\"headerlink\" title=\"正向代理和反向代理的区别\"></a>正向代理和反向代理的区别</h3><p>从用途上来讲：正向代理的典型用途是为在防火墙内的局域网客户端提供访问Internet的途径。正向代理还可以使用缓冲特性减少网络使用率。反向代理的典型用途是将防火墙后面的服务器提供给Internet用户访  问。反向代理还可以为后端的多台服务器提供负载平衡，或为后端较慢的服务器提供缓冲服务。另外，反向代理还可以启用高级URL策略和管理技术，从而使处于不同web服务器系统的web页面同时存在于同一个URL空间下。</p>\n<p>从安全性来讲：正向代理允许客户端通过它访问任意网站并且隐藏客户端自身，因此你必须采取安全措施以确保仅为经过授权的客户端提供服务。反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。打个比方，<font color=\"FF0000\">a,b,c三个人，正向代理是a通过b向C借钱，a知道c的存在 。反向代理是a向b借钱，b又向C借，a不知道c的存在</font>。</p>\n"},{"title":"postgresql发生锁表","date":"2019-09-30T02:13:38.000Z","_content":"\n### 查询相关表当前的活动进程：\n```sql\nSELECT * FROM pg_stat_activity where query ~ 'table_name';\n```\n### 解锁\n```sql\nSELECT pg_terminate_backend(pid) FROM pg_stat_activity where query ~ 'table_name' and pid <> pg_backend_pid();\n```","source":"_posts/postgresql-locktable.md","raw":"---\ntitle: postgresql发生锁表\ndate: 2019-09-30 10:13:38\ntags: \n- postgresql\ncategories:\n- postgresql\n---\n\n### 查询相关表当前的活动进程：\n```sql\nSELECT * FROM pg_stat_activity where query ~ 'table_name';\n```\n### 解锁\n```sql\nSELECT pg_terminate_backend(pid) FROM pg_stat_activity where query ~ 'table_name' and pid <> pg_backend_pid();\n```","slug":"postgresql-locktable","published":1,"updated":"2019-09-30T02:25:33.154Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0rqqlza000zugqso7c0c3kh","content":"<h3 id=\"查询相关表当前的活动进程：\"><a href=\"#查询相关表当前的活动进程：\" class=\"headerlink\" title=\"查询相关表当前的活动进程：\"></a>查询相关表当前的活动进程：</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> pg_stat_activity <span class=\"keyword\">where</span> <span class=\"keyword\">query</span> ~ <span class=\"string\">'table_name'</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解锁\"><a href=\"#解锁\" class=\"headerlink\" title=\"解锁\"></a>解锁</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> pg_terminate_backend(pid) <span class=\"keyword\">FROM</span> pg_stat_activity <span class=\"keyword\">where</span> <span class=\"keyword\">query</span> ~ <span class=\"string\">'table_name'</span> <span class=\"keyword\">and</span> pid &lt;&gt; pg_backend_pid();</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"查询相关表当前的活动进程：\"><a href=\"#查询相关表当前的活动进程：\" class=\"headerlink\" title=\"查询相关表当前的活动进程：\"></a>查询相关表当前的活动进程：</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> pg_stat_activity <span class=\"keyword\">where</span> <span class=\"keyword\">query</span> ~ <span class=\"string\">'table_name'</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解锁\"><a href=\"#解锁\" class=\"headerlink\" title=\"解锁\"></a>解锁</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> pg_terminate_backend(pid) <span class=\"keyword\">FROM</span> pg_stat_activity <span class=\"keyword\">where</span> <span class=\"keyword\">query</span> ~ <span class=\"string\">'table_name'</span> <span class=\"keyword\">and</span> pid &lt;&gt; pg_backend_pid();</span><br></pre></td></tr></table></figure>"},{"title":"linux-查看网络使用情况","date":"2022-03-07T01:24:52.000Z","_content":"\n### 安装\n```\nyum install nload\n```\n\n### 使用\n```bash\nnload -m  \n# nload device eth0 指定网卡\n```\n\n![](/images/linux/nload.png)\n","source":"_posts/linux-nload.md","raw":"---\ntitle: linux-查看网络使用情况\ndate: 2022-03-07 09:24:52\ntags: \n- linux\n- nload\ncategories: \n- linux\n---\n\n### 安装\n```\nyum install nload\n```\n\n### 使用\n```bash\nnload -m  \n# nload device eth0 指定网卡\n```\n\n![](/images/linux/nload.png)\n","slug":"linux-nload","published":1,"updated":"2022-03-07T12:23:18.963Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0rqqlzb0013ugqsrj94b7xb","content":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nload</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nload -m  </span><br><span class=\"line\"><span class=\"comment\"># nload device eth0 指定网卡</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/linux/nload.png\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nload</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nload -m  </span><br><span class=\"line\"><span class=\"comment\"># nload device eth0 指定网卡</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/linux/nload.png\" alt></p>\n"},{"title":"win10安装mysql","date":"2019-10-22T01:51:26.000Z","_content":"\n### 下载\n官网下载地址\n<https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.28-winx64.zip>\n\n### 解压\n解压到自定义目录，不建议放在C盘。这里我解压到E:\\mysql-5.7.28-winx64\n\n### 创建配置文件\n解压后发现目录下没有默认的配置文件，这里手动创建一个my.ini的配置文件\n```\n[mysqld]\nport=3306\nbasedir=E:\\mysql-5.7.28-winx64\ndatadir=E:\\mysql-5.7.28-winx64\\data\nmax_connections=200\ncharacter-set-server=utf8\ndefault-storage-engine=INNODB\nsql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES\n[mysql]\ndefault-character-set=utf8\n```\nbasedir：解压mysql的根目录\ndatadir：数据存放目录，这个目录不用手动创建，在安装时会自动创建\n\n### 设置环境变量\n新建一个MYSQL_HOME的环境变量，并添加到path里\n![](/images/mysql/1.png)\n![](/images/mysql/2.png)\n\n### 安装\n管理员权限运行cmd\n因为设置了环境变量，所以可以在任意目录使用mysqld命令。\n```bash\n# 这里会初始化上面的data文件夹，时间有点久\nmysqld --initialize\n\n# 安装\nmysqld -install\n\n# 启动服务\nnet start mysql\n```\n![](/images/mysql/3.png)\n\n### 修改初始密码\n在data目录下找到XXX.err文件并打开，找到初始化的随机密码password\n![](/images/mysql/4.png)\n\n使用密码进入mysql\n![](/images/mysql/5.png)\n\n修改密码\n![](/images/mysql/6.png)\n\n### 创建用户、分配权限\n```bash\n# 新建用户\ncreate user 'username'@'host' identified by 'password'; # host=\"localhost\"为本地用户 host=\"ip\"为ip登录  host=\"%\"为外网登录\n\n# 查看用户\nselect host,user,authentication_string from mysql.user;\n```\n这里创建了一个用户名为test，密码为123456，允许外网登录的用户\n![](/images/mysql/7.png)\n\n```bash\n# 分配权限\ngrant privileges on databasename.tablename to 'username'@'host' identified by 'password';\n# priveleges(权限列表),可以是all priveleges, 表示所有权限，也可以是select、update等权限，多个权限的名词,相互之间用逗号分开。\n# on用来指定权限针对哪些库和表。\n# *.* 中前面的*号用来指定数据库名，后面的*号用来指定表名。\n# to 表示将权限赋予某个用户, 如 jack@'localhost' 表示jack用户，@后面接限制的主机，可以是IP、IP段、域名以及%，%表示任何地方。\n# identified by指定用户的登录密码,该项可以省略。\n# WITH GRANT OPTION 这个选项表示该用户可以将自己拥有的权限授权给别人。注意：经常有人在创建操作用户的时候不指定WITH GRANT OPTION选项导致后来该用户不能使用GRANT命令创建用户或者给其它用户授权。\n# 可以使用GRANT重复给用户添加权限，权限叠加，比如你先给用户添加一个select权限，然后又给用户添加一个insert权限，那么该用户就同时拥有了select和insert权限。\n```\n![](/images/mysql/8.png)","source":"_posts/mysql-install.md","raw":"---\ntitle: win10安装mysql\ndate: 2019-10-22 09:51:26\ntags: mysql\ncategories: mysql\n---\n\n### 下载\n官网下载地址\n<https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.28-winx64.zip>\n\n### 解压\n解压到自定义目录，不建议放在C盘。这里我解压到E:\\mysql-5.7.28-winx64\n\n### 创建配置文件\n解压后发现目录下没有默认的配置文件，这里手动创建一个my.ini的配置文件\n```\n[mysqld]\nport=3306\nbasedir=E:\\mysql-5.7.28-winx64\ndatadir=E:\\mysql-5.7.28-winx64\\data\nmax_connections=200\ncharacter-set-server=utf8\ndefault-storage-engine=INNODB\nsql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES\n[mysql]\ndefault-character-set=utf8\n```\nbasedir：解压mysql的根目录\ndatadir：数据存放目录，这个目录不用手动创建，在安装时会自动创建\n\n### 设置环境变量\n新建一个MYSQL_HOME的环境变量，并添加到path里\n![](/images/mysql/1.png)\n![](/images/mysql/2.png)\n\n### 安装\n管理员权限运行cmd\n因为设置了环境变量，所以可以在任意目录使用mysqld命令。\n```bash\n# 这里会初始化上面的data文件夹，时间有点久\nmysqld --initialize\n\n# 安装\nmysqld -install\n\n# 启动服务\nnet start mysql\n```\n![](/images/mysql/3.png)\n\n### 修改初始密码\n在data目录下找到XXX.err文件并打开，找到初始化的随机密码password\n![](/images/mysql/4.png)\n\n使用密码进入mysql\n![](/images/mysql/5.png)\n\n修改密码\n![](/images/mysql/6.png)\n\n### 创建用户、分配权限\n```bash\n# 新建用户\ncreate user 'username'@'host' identified by 'password'; # host=\"localhost\"为本地用户 host=\"ip\"为ip登录  host=\"%\"为外网登录\n\n# 查看用户\nselect host,user,authentication_string from mysql.user;\n```\n这里创建了一个用户名为test，密码为123456，允许外网登录的用户\n![](/images/mysql/7.png)\n\n```bash\n# 分配权限\ngrant privileges on databasename.tablename to 'username'@'host' identified by 'password';\n# priveleges(权限列表),可以是all priveleges, 表示所有权限，也可以是select、update等权限，多个权限的名词,相互之间用逗号分开。\n# on用来指定权限针对哪些库和表。\n# *.* 中前面的*号用来指定数据库名，后面的*号用来指定表名。\n# to 表示将权限赋予某个用户, 如 jack@'localhost' 表示jack用户，@后面接限制的主机，可以是IP、IP段、域名以及%，%表示任何地方。\n# identified by指定用户的登录密码,该项可以省略。\n# WITH GRANT OPTION 这个选项表示该用户可以将自己拥有的权限授权给别人。注意：经常有人在创建操作用户的时候不指定WITH GRANT OPTION选项导致后来该用户不能使用GRANT命令创建用户或者给其它用户授权。\n# 可以使用GRANT重复给用户添加权限，权限叠加，比如你先给用户添加一个select权限，然后又给用户添加一个insert权限，那么该用户就同时拥有了select和insert权限。\n```\n![](/images/mysql/8.png)","slug":"mysql-install","published":1,"updated":"2019-10-22T12:56:46.800Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0rqqlzd0016ugqsfnu736ai","content":"<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>官网下载地址<br><a href=\"https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.28-winx64.zip\" target=\"_blank\" rel=\"noopener\">https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.28-winx64.zip</a></p>\n<h3 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h3><p>解压到自定义目录，不建议放在C盘。这里我解压到E:\\mysql-5.7.28-winx64</p>\n<h3 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h3><p>解压后发现目录下没有默认的配置文件，这里手动创建一个my.ini的配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">port=3306</span><br><span class=\"line\">basedir=E:\\mysql-5.7.28-winx64</span><br><span class=\"line\">datadir=E:\\mysql-5.7.28-winx64\\data</span><br><span class=\"line\">max_connections=200</span><br><span class=\"line\">character-set-server=utf8</span><br><span class=\"line\">default-storage-engine=INNODB</span><br><span class=\"line\">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class=\"line\">[mysql]</span><br><span class=\"line\">default-character-set=utf8</span><br></pre></td></tr></table></figure>\n\n<p>basedir：解压mysql的根目录<br>datadir：数据存放目录，这个目录不用手动创建，在安装时会自动创建</p>\n<h3 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h3><p>新建一个MYSQL_HOME的环境变量，并添加到path里<br><img src=\"/images/mysql/1.png\" alt><br><img src=\"/images/mysql/2.png\" alt></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>管理员权限运行cmd<br>因为设置了环境变量，所以可以在任意目录使用mysqld命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里会初始化上面的data文件夹，时间有点久</span></span><br><span class=\"line\">mysqld --initialize</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">mysqld -install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">net start mysql</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/mysql/3.png\" alt></p>\n<h3 id=\"修改初始密码\"><a href=\"#修改初始密码\" class=\"headerlink\" title=\"修改初始密码\"></a>修改初始密码</h3><p>在data目录下找到XXX.err文件并打开，找到初始化的随机密码password<br><img src=\"/images/mysql/4.png\" alt></p>\n<p>使用密码进入mysql<br><img src=\"/images/mysql/5.png\" alt></p>\n<p>修改密码<br><img src=\"/images/mysql/6.png\" alt></p>\n<h3 id=\"创建用户、分配权限\"><a href=\"#创建用户、分配权限\" class=\"headerlink\" title=\"创建用户、分配权限\"></a>创建用户、分配权限</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 新建用户</span></span><br><span class=\"line\">create user <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span> identified by <span class=\"string\">'password'</span>; <span class=\"comment\"># host=\"localhost\"为本地用户 host=\"ip\"为ip登录  host=\"%\"为外网登录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看用户</span></span><br><span class=\"line\">select host,user,authentication_string from mysql.user;</span><br></pre></td></tr></table></figure>\n\n<p>这里创建了一个用户名为test，密码为123456，允许外网登录的用户<br><img src=\"/images/mysql/7.png\" alt></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 分配权限</span></span><br><span class=\"line\">grant privileges on databasename.tablename to <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span> identified by <span class=\"string\">'password'</span>;</span><br><span class=\"line\"><span class=\"comment\"># priveleges(权限列表),可以是all priveleges, 表示所有权限，也可以是select、update等权限，多个权限的名词,相互之间用逗号分开。</span></span><br><span class=\"line\"><span class=\"comment\"># on用来指定权限针对哪些库和表。</span></span><br><span class=\"line\"><span class=\"comment\"># *.* 中前面的*号用来指定数据库名，后面的*号用来指定表名。</span></span><br><span class=\"line\"><span class=\"comment\"># to 表示将权限赋予某个用户, 如 jack@'localhost' 表示jack用户，@后面接限制的主机，可以是IP、IP段、域名以及%，%表示任何地方。</span></span><br><span class=\"line\"><span class=\"comment\"># identified by指定用户的登录密码,该项可以省略。</span></span><br><span class=\"line\"><span class=\"comment\"># WITH GRANT OPTION 这个选项表示该用户可以将自己拥有的权限授权给别人。注意：经常有人在创建操作用户的时候不指定WITH GRANT OPTION选项导致后来该用户不能使用GRANT命令创建用户或者给其它用户授权。</span></span><br><span class=\"line\"><span class=\"comment\"># 可以使用GRANT重复给用户添加权限，权限叠加，比如你先给用户添加一个select权限，然后又给用户添加一个insert权限，那么该用户就同时拥有了select和insert权限。</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/mysql/8.png\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>官网下载地址<br><a href=\"https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.28-winx64.zip\" target=\"_blank\" rel=\"noopener\">https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.28-winx64.zip</a></p>\n<h3 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h3><p>解压到自定义目录，不建议放在C盘。这里我解压到E:\\mysql-5.7.28-winx64</p>\n<h3 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h3><p>解压后发现目录下没有默认的配置文件，这里手动创建一个my.ini的配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">port=3306</span><br><span class=\"line\">basedir=E:\\mysql-5.7.28-winx64</span><br><span class=\"line\">datadir=E:\\mysql-5.7.28-winx64\\data</span><br><span class=\"line\">max_connections=200</span><br><span class=\"line\">character-set-server=utf8</span><br><span class=\"line\">default-storage-engine=INNODB</span><br><span class=\"line\">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class=\"line\">[mysql]</span><br><span class=\"line\">default-character-set=utf8</span><br></pre></td></tr></table></figure>\n\n<p>basedir：解压mysql的根目录<br>datadir：数据存放目录，这个目录不用手动创建，在安装时会自动创建</p>\n<h3 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h3><p>新建一个MYSQL_HOME的环境变量，并添加到path里<br><img src=\"/images/mysql/1.png\" alt><br><img src=\"/images/mysql/2.png\" alt></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>管理员权限运行cmd<br>因为设置了环境变量，所以可以在任意目录使用mysqld命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里会初始化上面的data文件夹，时间有点久</span></span><br><span class=\"line\">mysqld --initialize</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">mysqld -install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">net start mysql</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/mysql/3.png\" alt></p>\n<h3 id=\"修改初始密码\"><a href=\"#修改初始密码\" class=\"headerlink\" title=\"修改初始密码\"></a>修改初始密码</h3><p>在data目录下找到XXX.err文件并打开，找到初始化的随机密码password<br><img src=\"/images/mysql/4.png\" alt></p>\n<p>使用密码进入mysql<br><img src=\"/images/mysql/5.png\" alt></p>\n<p>修改密码<br><img src=\"/images/mysql/6.png\" alt></p>\n<h3 id=\"创建用户、分配权限\"><a href=\"#创建用户、分配权限\" class=\"headerlink\" title=\"创建用户、分配权限\"></a>创建用户、分配权限</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 新建用户</span></span><br><span class=\"line\">create user <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span> identified by <span class=\"string\">'password'</span>; <span class=\"comment\"># host=\"localhost\"为本地用户 host=\"ip\"为ip登录  host=\"%\"为外网登录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看用户</span></span><br><span class=\"line\">select host,user,authentication_string from mysql.user;</span><br></pre></td></tr></table></figure>\n\n<p>这里创建了一个用户名为test，密码为123456，允许外网登录的用户<br><img src=\"/images/mysql/7.png\" alt></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 分配权限</span></span><br><span class=\"line\">grant privileges on databasename.tablename to <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span> identified by <span class=\"string\">'password'</span>;</span><br><span class=\"line\"><span class=\"comment\"># priveleges(权限列表),可以是all priveleges, 表示所有权限，也可以是select、update等权限，多个权限的名词,相互之间用逗号分开。</span></span><br><span class=\"line\"><span class=\"comment\"># on用来指定权限针对哪些库和表。</span></span><br><span class=\"line\"><span class=\"comment\"># *.* 中前面的*号用来指定数据库名，后面的*号用来指定表名。</span></span><br><span class=\"line\"><span class=\"comment\"># to 表示将权限赋予某个用户, 如 jack@'localhost' 表示jack用户，@后面接限制的主机，可以是IP、IP段、域名以及%，%表示任何地方。</span></span><br><span class=\"line\"><span class=\"comment\"># identified by指定用户的登录密码,该项可以省略。</span></span><br><span class=\"line\"><span class=\"comment\"># WITH GRANT OPTION 这个选项表示该用户可以将自己拥有的权限授权给别人。注意：经常有人在创建操作用户的时候不指定WITH GRANT OPTION选项导致后来该用户不能使用GRANT命令创建用户或者给其它用户授权。</span></span><br><span class=\"line\"><span class=\"comment\"># 可以使用GRANT重复给用户添加权限，权限叠加，比如你先给用户添加一个select权限，然后又给用户添加一个insert权限，那么该用户就同时拥有了select和insert权限。</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/mysql/8.png\" alt></p>\n"},{"title":"web安全相关-安全测试","date":"2021-05-24T02:13:37.000Z","_content":"\n\n### 记一次安全测试记录\n\n#### 敏感数据加密存储\n  ##### 配置文件敏感数据加密存储\n  SpringBoot使用jasypt加解密密码。\n  ```\n  <!--jasypt-->\n    <dependency>\n        <groupId>com.github.ulisesbocchio</groupId>\n        <artifactId>jasypt-spring-boot-starter</artifactId>\n        <version>2.0.0</version>\n    </dependency>\n  ```\n  配置文件\n  ```\n  # 加密的密钥\n  jasypt:\n    encryptor:\n      password: Hzzxj\n  \n  # 格式：ENC()\n  spring.datasource.username=ENC(EROfZyZxd9F0CYgarXQGtLGFKGzOyD+k)\n  spring.datasource.password=ENC(X02b/D0sOY81kkSV7v4g2/tLw8Ynq6wQ)\n  ```\n\n  ```\n  # 获取密文\n  \n  ```\n\n","source":"_posts/web-security_2.md","raw":"---\ntitle: web安全相关-安全测试\ndate: 2021-05-24 10:13:37\ntags:\n- web\n- security\ncategories:\n- security\n---\n\n\n### 记一次安全测试记录\n\n#### 敏感数据加密存储\n  ##### 配置文件敏感数据加密存储\n  SpringBoot使用jasypt加解密密码。\n  ```\n  <!--jasypt-->\n    <dependency>\n        <groupId>com.github.ulisesbocchio</groupId>\n        <artifactId>jasypt-spring-boot-starter</artifactId>\n        <version>2.0.0</version>\n    </dependency>\n  ```\n  配置文件\n  ```\n  # 加密的密钥\n  jasypt:\n    encryptor:\n      password: Hzzxj\n  \n  # 格式：ENC()\n  spring.datasource.username=ENC(EROfZyZxd9F0CYgarXQGtLGFKGzOyD+k)\n  spring.datasource.password=ENC(X02b/D0sOY81kkSV7v4g2/tLw8Ynq6wQ)\n  ```\n\n  ```\n  # 获取密文\n  \n  ```\n\n","slug":"web-security_2","published":1,"updated":"2021-05-25T02:12:10.593Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0rqqlze001bugqs4ggeshcf","content":"<h3 id=\"记一次安全测试记录\"><a href=\"#记一次安全测试记录\" class=\"headerlink\" title=\"记一次安全测试记录\"></a>记一次安全测试记录</h3><h4 id=\"敏感数据加密存储\"><a href=\"#敏感数据加密存储\" class=\"headerlink\" title=\"敏感数据加密存储\"></a>敏感数据加密存储</h4><h5 id=\"配置文件敏感数据加密存储\"><a href=\"#配置文件敏感数据加密存储\" class=\"headerlink\" title=\"配置文件敏感数据加密存储\"></a>配置文件敏感数据加密存储</h5><p>  SpringBoot使用jasypt加解密密码。<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--jasypt--&gt;</span><br><span class=\"line\">  &lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;com.github.ulisesbocchio&lt;/groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;jasypt-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">      &lt;version&gt;2.0.0&lt;/version&gt;</span><br><span class=\"line\">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>  配置文件<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 加密的密钥</span><br><span class=\"line\">jasypt:</span><br><span class=\"line\">  encryptor:</span><br><span class=\"line\">    password: Hzzxj</span><br><span class=\"line\"></span><br><span class=\"line\"># 格式：ENC()</span><br><span class=\"line\">spring.datasource.username=ENC(EROfZyZxd9F0CYgarXQGtLGFKGzOyD+k)</span><br><span class=\"line\">spring.datasource.password=ENC(X02b/D0sOY81kkSV7v4g2/tLw8Ynq6wQ)</span><br></pre></td></tr></table></figure></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 获取密文</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"记一次安全测试记录\"><a href=\"#记一次安全测试记录\" class=\"headerlink\" title=\"记一次安全测试记录\"></a>记一次安全测试记录</h3><h4 id=\"敏感数据加密存储\"><a href=\"#敏感数据加密存储\" class=\"headerlink\" title=\"敏感数据加密存储\"></a>敏感数据加密存储</h4><h5 id=\"配置文件敏感数据加密存储\"><a href=\"#配置文件敏感数据加密存储\" class=\"headerlink\" title=\"配置文件敏感数据加密存储\"></a>配置文件敏感数据加密存储</h5><p>  SpringBoot使用jasypt加解密密码。<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--jasypt--&gt;</span><br><span class=\"line\">  &lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;com.github.ulisesbocchio&lt;/groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;jasypt-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">      &lt;version&gt;2.0.0&lt;/version&gt;</span><br><span class=\"line\">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>  配置文件<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 加密的密钥</span><br><span class=\"line\">jasypt:</span><br><span class=\"line\">  encryptor:</span><br><span class=\"line\">    password: Hzzxj</span><br><span class=\"line\"></span><br><span class=\"line\"># 格式：ENC()</span><br><span class=\"line\">spring.datasource.username=ENC(EROfZyZxd9F0CYgarXQGtLGFKGzOyD+k)</span><br><span class=\"line\">spring.datasource.password=ENC(X02b/D0sOY81kkSV7v4g2/tLw8Ynq6wQ)</span><br></pre></td></tr></table></figure></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 获取密文</span><br></pre></td></tr></table></figure>\n\n"},{"title":"web安全相关-http响应头","date":"2021-05-24T02:13:37.000Z","_content":"\n\n### WEB项目的HTTP HEADER安全漏洞梳理\n\n###\n<font color=\"#075DC4\" size=2>这个网址可查询HTTP Header信息</font>\n    <https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers>\n\n\n#### X-Content-Type-Options响应头缺失\n  X-Content-Type-Options HTTP 消息头相当于一个提示标志，被服务器用来提示客户端一定要遵循在 Content-Type 首部中对  MIME 类型 的设定，而不能对其进行修改。这就禁用了客户端的 MIME 类型嗅探行为，换句话说，也就是意味着网站管理员确定自己的设置没有问题。\n\n```\n  response.addHeader(\"X-Content-Type-Options\", \"nosniff\");\n```\n\n#### X-XSS-Protection响应头缺失\n  HTTP X-XSS-Protection 响应头是 Internet Explorer，Chrome 和 Safari 的一个特性，当检测到跨站脚本攻击 (XSS (en-US))时，浏览器将停止加载页面。\n\n```\n  response.addHeader(\"X-XSS-Protection\", \"1; mode=block\"); //启动XSS；mode= block:检测到攻击，浏览器将阻止页面的呈现，而不是过滤页面中的XSS内容\n  # response.addHeader(\"X-XSS-Protection\", \"1; mode=block\"); // 禁用XSS\n```\n\n#### 启用了不安全的HTTP方法\n  检测到目标WEB服务器配置成允许下列其中一个（或多个）HTTP方法：DELETE,SEARCH,COPY,MOVE,PROPFIND,PROPPATCH,MKCOL,LOCK,UNLOCK。 这些方法表示可能在服务器上使用了WebDAV。由于dav方法允许客户端操纵服务器上的文件，如果没有合理配置dav，有可能允许未授权的用户对其进行利用，修改服务器上的文件。\n\n```\n  response.addHeader(\"Access-Control-Allow-Methods\", \"GET,POST\"); // 实际上DELETE等方法还是可以使用。不过漏洞扫描不出来了\n```\n```\n  // 在过滤器中过滤\n  String method = request.getMethod();  \n  if(HttpMethod.GET.toString().equals(method)|| HttpMethod.POST.toString().equals(method)){  \n      return true;\n  }  \n  return false;\n```\n\n#### X-Frame-Options响应头缺失\n  The X-Frame-Options HTTP 响应头是用来给浏览器 指示允许一个页面 可否在 <frame>, <iframe>, <embed> 或者 <object> 中展现的标记。站点可以通过确保网站没有被嵌入到别人的站点里面，从而避免 clickjacking 攻击。\n\n```\n  response.addHeader(\"X-Frame-Options\", \"DENY\");  // 不能被嵌入\n  response.addHeader(\"X-Frame-Options\", \"SAMEORIGIN\");  // 只能嵌入本站。\n  response.addHeader(\"X-Frame-Options\", \"ALLOW-FROM https://example.com/\"); // 指定能嵌入的站点\n```\n\n#### 响应头总结\n\n```\n  response.addHeader(\"X-Frame-Options\", \"SAMEORIGIN\");\n  response.addHeader(\"X-XSS-Protection\", \"1; mode=block\");\n  response.addHeader(\"X-Content-Type-Options\", \"nosniff\");\n  response.addHeader(\"X-Content-Security-Policy\", \"default-src 'self'\");\n  # other\n  response.addHeader(\"Referer-Policy\", \"origin\");\n  response.addHeader(\"X-Permitted-Cross-Domain-Policies\", \"master-only\");\n  response.addHeader(\"X-Download-Options\", \"noopen\");\n  response.addHeader(\"Cache-control\", \"public\");\n```\n\n#### 检测到目标主机可能存在缓慢的HTTP拒绝服务攻击\n  缓慢的HTTP拒绝服务攻击时一种专门针对Web的应用层拒绝服务攻击，攻击者操纵网络上的肉鸡，对目标Web服务器进行海量HTTP请求攻击，直到服务器带宽被打满，造成了拒绝服务。\n\n```\n  # springboot\n  # application-properties文件增加\n  server.tomcat.max-threads=1000\n  server.tomcat.max-connections=20000\n  \n  # tomact\n  # server.xml <Connector /> 增加maxThreads、connectionTimeout\n  <Connector port=\"80\" maxHttpHeaderSize=\"8192\"\n    maxThreads=\"1000\" minSpareThreads=\"25\" maxSpareThreads=\"75\"\n    enableLookups=\"false\" redirectPort=\"8443\" acceptCount=\"100\"\n    connectionTimeout=\"20000\" disableUploadTimeout=\"true\" URIEncoding=\"UTF-8\" maxPostSize=\"-1\" server=\"unknown\"/>\n\n```\n\n\n#### 检测到目标URL存在http host头攻击漏洞\n\n```\n  // 头攻击检测  过滤主机名\n  String requestHost = request.getHeader(\"host\");\n  if (requestHost != null && !checkBlankList(requestHost)) {\n      response.setStatus(403);\n      return;\n  }\n  //判断主机是否存在白名单中\n  private boolean checkBlankList(String host){\n      if(host.contains(\"127.0.0.1\")){//此处为自己网站的主机地址\n          return true;\n      }\n      return false;\n  }\n```\n\n","source":"_posts/web-security_1.md","raw":"---\ntitle: web安全相关-http响应头\ndate: 2021-05-24 10:13:37\ntags:\n- web\n- security\ncategories:\n- security\n---\n\n\n### WEB项目的HTTP HEADER安全漏洞梳理\n\n###\n<font color=\"#075DC4\" size=2>这个网址可查询HTTP Header信息</font>\n    <https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers>\n\n\n#### X-Content-Type-Options响应头缺失\n  X-Content-Type-Options HTTP 消息头相当于一个提示标志，被服务器用来提示客户端一定要遵循在 Content-Type 首部中对  MIME 类型 的设定，而不能对其进行修改。这就禁用了客户端的 MIME 类型嗅探行为，换句话说，也就是意味着网站管理员确定自己的设置没有问题。\n\n```\n  response.addHeader(\"X-Content-Type-Options\", \"nosniff\");\n```\n\n#### X-XSS-Protection响应头缺失\n  HTTP X-XSS-Protection 响应头是 Internet Explorer，Chrome 和 Safari 的一个特性，当检测到跨站脚本攻击 (XSS (en-US))时，浏览器将停止加载页面。\n\n```\n  response.addHeader(\"X-XSS-Protection\", \"1; mode=block\"); //启动XSS；mode= block:检测到攻击，浏览器将阻止页面的呈现，而不是过滤页面中的XSS内容\n  # response.addHeader(\"X-XSS-Protection\", \"1; mode=block\"); // 禁用XSS\n```\n\n#### 启用了不安全的HTTP方法\n  检测到目标WEB服务器配置成允许下列其中一个（或多个）HTTP方法：DELETE,SEARCH,COPY,MOVE,PROPFIND,PROPPATCH,MKCOL,LOCK,UNLOCK。 这些方法表示可能在服务器上使用了WebDAV。由于dav方法允许客户端操纵服务器上的文件，如果没有合理配置dav，有可能允许未授权的用户对其进行利用，修改服务器上的文件。\n\n```\n  response.addHeader(\"Access-Control-Allow-Methods\", \"GET,POST\"); // 实际上DELETE等方法还是可以使用。不过漏洞扫描不出来了\n```\n```\n  // 在过滤器中过滤\n  String method = request.getMethod();  \n  if(HttpMethod.GET.toString().equals(method)|| HttpMethod.POST.toString().equals(method)){  \n      return true;\n  }  \n  return false;\n```\n\n#### X-Frame-Options响应头缺失\n  The X-Frame-Options HTTP 响应头是用来给浏览器 指示允许一个页面 可否在 <frame>, <iframe>, <embed> 或者 <object> 中展现的标记。站点可以通过确保网站没有被嵌入到别人的站点里面，从而避免 clickjacking 攻击。\n\n```\n  response.addHeader(\"X-Frame-Options\", \"DENY\");  // 不能被嵌入\n  response.addHeader(\"X-Frame-Options\", \"SAMEORIGIN\");  // 只能嵌入本站。\n  response.addHeader(\"X-Frame-Options\", \"ALLOW-FROM https://example.com/\"); // 指定能嵌入的站点\n```\n\n#### 响应头总结\n\n```\n  response.addHeader(\"X-Frame-Options\", \"SAMEORIGIN\");\n  response.addHeader(\"X-XSS-Protection\", \"1; mode=block\");\n  response.addHeader(\"X-Content-Type-Options\", \"nosniff\");\n  response.addHeader(\"X-Content-Security-Policy\", \"default-src 'self'\");\n  # other\n  response.addHeader(\"Referer-Policy\", \"origin\");\n  response.addHeader(\"X-Permitted-Cross-Domain-Policies\", \"master-only\");\n  response.addHeader(\"X-Download-Options\", \"noopen\");\n  response.addHeader(\"Cache-control\", \"public\");\n```\n\n#### 检测到目标主机可能存在缓慢的HTTP拒绝服务攻击\n  缓慢的HTTP拒绝服务攻击时一种专门针对Web的应用层拒绝服务攻击，攻击者操纵网络上的肉鸡，对目标Web服务器进行海量HTTP请求攻击，直到服务器带宽被打满，造成了拒绝服务。\n\n```\n  # springboot\n  # application-properties文件增加\n  server.tomcat.max-threads=1000\n  server.tomcat.max-connections=20000\n  \n  # tomact\n  # server.xml <Connector /> 增加maxThreads、connectionTimeout\n  <Connector port=\"80\" maxHttpHeaderSize=\"8192\"\n    maxThreads=\"1000\" minSpareThreads=\"25\" maxSpareThreads=\"75\"\n    enableLookups=\"false\" redirectPort=\"8443\" acceptCount=\"100\"\n    connectionTimeout=\"20000\" disableUploadTimeout=\"true\" URIEncoding=\"UTF-8\" maxPostSize=\"-1\" server=\"unknown\"/>\n\n```\n\n\n#### 检测到目标URL存在http host头攻击漏洞\n\n```\n  // 头攻击检测  过滤主机名\n  String requestHost = request.getHeader(\"host\");\n  if (requestHost != null && !checkBlankList(requestHost)) {\n      response.setStatus(403);\n      return;\n  }\n  //判断主机是否存在白名单中\n  private boolean checkBlankList(String host){\n      if(host.contains(\"127.0.0.1\")){//此处为自己网站的主机地址\n          return true;\n      }\n      return false;\n  }\n```\n\n","slug":"web-security_1","published":1,"updated":"2021-05-24T08:38:15.390Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0rqqlzg001dugqsce3v854k","content":"<h3 id=\"WEB项目的HTTP-HEADER安全漏洞梳理\"><a href=\"#WEB项目的HTTP-HEADER安全漏洞梳理\" class=\"headerlink\" title=\"WEB项目的HTTP HEADER安全漏洞梳理\"></a>WEB项目的HTTP HEADER安全漏洞梳理</h3><p>###<br><font color=\"#075DC4\" size=\"2\">这个网址可查询HTTP Header信息</font><br>    <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers</a></p>\n<h4 id=\"X-Content-Type-Options响应头缺失\"><a href=\"#X-Content-Type-Options响应头缺失\" class=\"headerlink\" title=\"X-Content-Type-Options响应头缺失\"></a>X-Content-Type-Options响应头缺失</h4><p>  X-Content-Type-Options HTTP 消息头相当于一个提示标志，被服务器用来提示客户端一定要遵循在 Content-Type 首部中对  MIME 类型 的设定，而不能对其进行修改。这就禁用了客户端的 MIME 类型嗅探行为，换句话说，也就是意味着网站管理员确定自己的设置没有问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.addHeader(&quot;X-Content-Type-Options&quot;, &quot;nosniff&quot;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"X-XSS-Protection响应头缺失\"><a href=\"#X-XSS-Protection响应头缺失\" class=\"headerlink\" title=\"X-XSS-Protection响应头缺失\"></a>X-XSS-Protection响应头缺失</h4><p>  HTTP X-XSS-Protection 响应头是 Internet Explorer，Chrome 和 Safari 的一个特性，当检测到跨站脚本攻击 (XSS (en-US))时，浏览器将停止加载页面。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.addHeader(&quot;X-XSS-Protection&quot;, &quot;1; mode=block&quot;); //启动XSS；mode= block:检测到攻击，浏览器将阻止页面的呈现，而不是过滤页面中的XSS内容</span><br><span class=\"line\"># response.addHeader(&quot;X-XSS-Protection&quot;, &quot;1; mode=block&quot;); // 禁用XSS</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启用了不安全的HTTP方法\"><a href=\"#启用了不安全的HTTP方法\" class=\"headerlink\" title=\"启用了不安全的HTTP方法\"></a>启用了不安全的HTTP方法</h4><p>  检测到目标WEB服务器配置成允许下列其中一个（或多个）HTTP方法：DELETE,SEARCH,COPY,MOVE,PROPFIND,PROPPATCH,MKCOL,LOCK,UNLOCK。 这些方法表示可能在服务器上使用了WebDAV。由于dav方法允许客户端操纵服务器上的文件，如果没有合理配置dav，有可能允许未授权的用户对其进行利用，修改服务器上的文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.addHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;GET,POST&quot;); // 实际上DELETE等方法还是可以使用。不过漏洞扫描不出来了</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在过滤器中过滤</span><br><span class=\"line\">String method = request.getMethod();  </span><br><span class=\"line\">if(HttpMethod.GET.toString().equals(method)|| HttpMethod.POST.toString().equals(method))&#123;  </span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">return false;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"X-Frame-Options响应头缺失\"><a href=\"#X-Frame-Options响应头缺失\" class=\"headerlink\" title=\"X-Frame-Options响应头缺失\"></a>X-Frame-Options响应头缺失</h4><p>  The X-Frame-Options HTTP 响应头是用来给浏览器 指示允许一个页面 可否在 <frame>, <iframe>, <embed> 或者 <object> 中展现的标记。站点可以通过确保网站没有被嵌入到别人的站点里面，从而避免 clickjacking 攻击。</object></iframe></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.addHeader(&quot;X-Frame-Options&quot;, &quot;DENY&quot;);  // 不能被嵌入</span><br><span class=\"line\">response.addHeader(&quot;X-Frame-Options&quot;, &quot;SAMEORIGIN&quot;);  // 只能嵌入本站。</span><br><span class=\"line\">response.addHeader(&quot;X-Frame-Options&quot;, &quot;ALLOW-FROM https://example.com/&quot;); // 指定能嵌入的站点</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"响应头总结\"><a href=\"#响应头总结\" class=\"headerlink\" title=\"响应头总结\"></a>响应头总结</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.addHeader(&quot;X-Frame-Options&quot;, &quot;SAMEORIGIN&quot;);</span><br><span class=\"line\">response.addHeader(&quot;X-XSS-Protection&quot;, &quot;1; mode=block&quot;);</span><br><span class=\"line\">response.addHeader(&quot;X-Content-Type-Options&quot;, &quot;nosniff&quot;);</span><br><span class=\"line\">response.addHeader(&quot;X-Content-Security-Policy&quot;, &quot;default-src &apos;self&apos;&quot;);</span><br><span class=\"line\"># other</span><br><span class=\"line\">response.addHeader(&quot;Referer-Policy&quot;, &quot;origin&quot;);</span><br><span class=\"line\">response.addHeader(&quot;X-Permitted-Cross-Domain-Policies&quot;, &quot;master-only&quot;);</span><br><span class=\"line\">response.addHeader(&quot;X-Download-Options&quot;, &quot;noopen&quot;);</span><br><span class=\"line\">response.addHeader(&quot;Cache-control&quot;, &quot;public&quot;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"检测到目标主机可能存在缓慢的HTTP拒绝服务攻击\"><a href=\"#检测到目标主机可能存在缓慢的HTTP拒绝服务攻击\" class=\"headerlink\" title=\"检测到目标主机可能存在缓慢的HTTP拒绝服务攻击\"></a>检测到目标主机可能存在缓慢的HTTP拒绝服务攻击</h4><p>  缓慢的HTTP拒绝服务攻击时一种专门针对Web的应用层拒绝服务攻击，攻击者操纵网络上的肉鸡，对目标Web服务器进行海量HTTP请求攻击，直到服务器带宽被打满，造成了拒绝服务。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># springboot</span><br><span class=\"line\"># application-properties文件增加</span><br><span class=\"line\">server.tomcat.max-threads=1000</span><br><span class=\"line\">server.tomcat.max-connections=20000</span><br><span class=\"line\"></span><br><span class=\"line\"># tomact</span><br><span class=\"line\"># server.xml &lt;Connector /&gt; 增加maxThreads、connectionTimeout</span><br><span class=\"line\">&lt;Connector port=&quot;80&quot; maxHttpHeaderSize=&quot;8192&quot;</span><br><span class=\"line\">  maxThreads=&quot;1000&quot; minSpareThreads=&quot;25&quot; maxSpareThreads=&quot;75&quot;</span><br><span class=\"line\">  enableLookups=&quot;false&quot; redirectPort=&quot;8443&quot; acceptCount=&quot;100&quot;</span><br><span class=\"line\">  connectionTimeout=&quot;20000&quot; disableUploadTimeout=&quot;true&quot; URIEncoding=&quot;UTF-8&quot; maxPostSize=&quot;-1&quot; server=&quot;unknown&quot;/&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"检测到目标URL存在http-host头攻击漏洞\"><a href=\"#检测到目标URL存在http-host头攻击漏洞\" class=\"headerlink\" title=\"检测到目标URL存在http host头攻击漏洞\"></a>检测到目标URL存在http host头攻击漏洞</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 头攻击检测  过滤主机名</span><br><span class=\"line\">String requestHost = request.getHeader(&quot;host&quot;);</span><br><span class=\"line\">if (requestHost != null &amp;&amp; !checkBlankList(requestHost)) &#123;</span><br><span class=\"line\">    response.setStatus(403);</span><br><span class=\"line\">    return;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//判断主机是否存在白名单中</span><br><span class=\"line\">private boolean checkBlankList(String host)&#123;</span><br><span class=\"line\">    if(host.contains(&quot;127.0.0.1&quot;))&#123;//此处为自己网站的主机地址</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"WEB项目的HTTP-HEADER安全漏洞梳理\"><a href=\"#WEB项目的HTTP-HEADER安全漏洞梳理\" class=\"headerlink\" title=\"WEB项目的HTTP HEADER安全漏洞梳理\"></a>WEB项目的HTTP HEADER安全漏洞梳理</h3><p>###<br><font color=\"#075DC4\" size=\"2\">这个网址可查询HTTP Header信息</font><br>    <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers</a></p>\n<h4 id=\"X-Content-Type-Options响应头缺失\"><a href=\"#X-Content-Type-Options响应头缺失\" class=\"headerlink\" title=\"X-Content-Type-Options响应头缺失\"></a>X-Content-Type-Options响应头缺失</h4><p>  X-Content-Type-Options HTTP 消息头相当于一个提示标志，被服务器用来提示客户端一定要遵循在 Content-Type 首部中对  MIME 类型 的设定，而不能对其进行修改。这就禁用了客户端的 MIME 类型嗅探行为，换句话说，也就是意味着网站管理员确定自己的设置没有问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.addHeader(&quot;X-Content-Type-Options&quot;, &quot;nosniff&quot;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"X-XSS-Protection响应头缺失\"><a href=\"#X-XSS-Protection响应头缺失\" class=\"headerlink\" title=\"X-XSS-Protection响应头缺失\"></a>X-XSS-Protection响应头缺失</h4><p>  HTTP X-XSS-Protection 响应头是 Internet Explorer，Chrome 和 Safari 的一个特性，当检测到跨站脚本攻击 (XSS (en-US))时，浏览器将停止加载页面。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.addHeader(&quot;X-XSS-Protection&quot;, &quot;1; mode=block&quot;); //启动XSS；mode= block:检测到攻击，浏览器将阻止页面的呈现，而不是过滤页面中的XSS内容</span><br><span class=\"line\"># response.addHeader(&quot;X-XSS-Protection&quot;, &quot;1; mode=block&quot;); // 禁用XSS</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启用了不安全的HTTP方法\"><a href=\"#启用了不安全的HTTP方法\" class=\"headerlink\" title=\"启用了不安全的HTTP方法\"></a>启用了不安全的HTTP方法</h4><p>  检测到目标WEB服务器配置成允许下列其中一个（或多个）HTTP方法：DELETE,SEARCH,COPY,MOVE,PROPFIND,PROPPATCH,MKCOL,LOCK,UNLOCK。 这些方法表示可能在服务器上使用了WebDAV。由于dav方法允许客户端操纵服务器上的文件，如果没有合理配置dav，有可能允许未授权的用户对其进行利用，修改服务器上的文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.addHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;GET,POST&quot;); // 实际上DELETE等方法还是可以使用。不过漏洞扫描不出来了</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在过滤器中过滤</span><br><span class=\"line\">String method = request.getMethod();  </span><br><span class=\"line\">if(HttpMethod.GET.toString().equals(method)|| HttpMethod.POST.toString().equals(method))&#123;  </span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">return false;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"X-Frame-Options响应头缺失\"><a href=\"#X-Frame-Options响应头缺失\" class=\"headerlink\" title=\"X-Frame-Options响应头缺失\"></a>X-Frame-Options响应头缺失</h4><p>  The X-Frame-Options HTTP 响应头是用来给浏览器 指示允许一个页面 可否在 <frame>, <iframe>, <embed> 或者 <object> 中展现的标记。站点可以通过确保网站没有被嵌入到别人的站点里面，从而避免 clickjacking 攻击。</object></iframe></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.addHeader(&quot;X-Frame-Options&quot;, &quot;DENY&quot;);  // 不能被嵌入</span><br><span class=\"line\">response.addHeader(&quot;X-Frame-Options&quot;, &quot;SAMEORIGIN&quot;);  // 只能嵌入本站。</span><br><span class=\"line\">response.addHeader(&quot;X-Frame-Options&quot;, &quot;ALLOW-FROM https://example.com/&quot;); // 指定能嵌入的站点</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"响应头总结\"><a href=\"#响应头总结\" class=\"headerlink\" title=\"响应头总结\"></a>响应头总结</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.addHeader(&quot;X-Frame-Options&quot;, &quot;SAMEORIGIN&quot;);</span><br><span class=\"line\">response.addHeader(&quot;X-XSS-Protection&quot;, &quot;1; mode=block&quot;);</span><br><span class=\"line\">response.addHeader(&quot;X-Content-Type-Options&quot;, &quot;nosniff&quot;);</span><br><span class=\"line\">response.addHeader(&quot;X-Content-Security-Policy&quot;, &quot;default-src &apos;self&apos;&quot;);</span><br><span class=\"line\"># other</span><br><span class=\"line\">response.addHeader(&quot;Referer-Policy&quot;, &quot;origin&quot;);</span><br><span class=\"line\">response.addHeader(&quot;X-Permitted-Cross-Domain-Policies&quot;, &quot;master-only&quot;);</span><br><span class=\"line\">response.addHeader(&quot;X-Download-Options&quot;, &quot;noopen&quot;);</span><br><span class=\"line\">response.addHeader(&quot;Cache-control&quot;, &quot;public&quot;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"检测到目标主机可能存在缓慢的HTTP拒绝服务攻击\"><a href=\"#检测到目标主机可能存在缓慢的HTTP拒绝服务攻击\" class=\"headerlink\" title=\"检测到目标主机可能存在缓慢的HTTP拒绝服务攻击\"></a>检测到目标主机可能存在缓慢的HTTP拒绝服务攻击</h4><p>  缓慢的HTTP拒绝服务攻击时一种专门针对Web的应用层拒绝服务攻击，攻击者操纵网络上的肉鸡，对目标Web服务器进行海量HTTP请求攻击，直到服务器带宽被打满，造成了拒绝服务。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># springboot</span><br><span class=\"line\"># application-properties文件增加</span><br><span class=\"line\">server.tomcat.max-threads=1000</span><br><span class=\"line\">server.tomcat.max-connections=20000</span><br><span class=\"line\"></span><br><span class=\"line\"># tomact</span><br><span class=\"line\"># server.xml &lt;Connector /&gt; 增加maxThreads、connectionTimeout</span><br><span class=\"line\">&lt;Connector port=&quot;80&quot; maxHttpHeaderSize=&quot;8192&quot;</span><br><span class=\"line\">  maxThreads=&quot;1000&quot; minSpareThreads=&quot;25&quot; maxSpareThreads=&quot;75&quot;</span><br><span class=\"line\">  enableLookups=&quot;false&quot; redirectPort=&quot;8443&quot; acceptCount=&quot;100&quot;</span><br><span class=\"line\">  connectionTimeout=&quot;20000&quot; disableUploadTimeout=&quot;true&quot; URIEncoding=&quot;UTF-8&quot; maxPostSize=&quot;-1&quot; server=&quot;unknown&quot;/&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"检测到目标URL存在http-host头攻击漏洞\"><a href=\"#检测到目标URL存在http-host头攻击漏洞\" class=\"headerlink\" title=\"检测到目标URL存在http host头攻击漏洞\"></a>检测到目标URL存在http host头攻击漏洞</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 头攻击检测  过滤主机名</span><br><span class=\"line\">String requestHost = request.getHeader(&quot;host&quot;);</span><br><span class=\"line\">if (requestHost != null &amp;&amp; !checkBlankList(requestHost)) &#123;</span><br><span class=\"line\">    response.setStatus(403);</span><br><span class=\"line\">    return;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//判断主机是否存在白名单中</span><br><span class=\"line\">private boolean checkBlankList(String host)&#123;</span><br><span class=\"line\">    if(host.contains(&quot;127.0.0.1&quot;))&#123;//此处为自己网站的主机地址</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"git常用命令实践","date":"2019-07-19T03:40:09.000Z","_content":"\n## 关系图\n![](/images/git/relation.png)\n* Workspace：工作区\n* Index/Stage：暂存区\n* Repository：本地仓库\n* Remote：远程仓库\n\n## 本地仓库\n\n### 新建仓库\n```bash\n# 在当前目录新建一个Git仓库\n$ git init\n\n# 新建一个目录，将其初始化成Git仓库\n$ git init [project-name]\n```\n\n### 配置信息\n```bash\n# 显示配置列表\n$ git config --list\n\n# 设置用户信息\n# 当前仓库设置用户名\n$ git config --global user.name \"Zhaoxinjie\"\n\n# 当前仓库设置用户邮箱\n$ git config --global user.email \"543008186@qq.com\"\n\n# 全局设置用户名\n$ git config --global user.name \"Zhaoxinjie\"\n\n# 全局设置用户邮箱\n$ git config --global user.email \"543008186@qq.com\"\n\n# 不设置值即为查看\n```\n![](/images/git/1.png)\n\n### 显示工作区和暂存区的状态\n```bash\n$ git status\n```\n![](/images/git/2.png)\n\n### 添加文件到暂存区\n```bash\n# 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区\n$ git add [div]\n\n# 添加当前目录所有文件到暂存区\n$ git add .\n```\n这里可以看到新添加了一个文件\n![](/images/git/3.png)\n\n### 提交到本地仓库\n```bash\n# 提交暂存区到仓库区，message是每次提交的说明，查看历史记录的时候会显示\n$ git commit -m [message]\n\n# 提交暂存区指定文件到仓库区\n$ git commit [file1] [file2] -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有变化，则用来修改上一次commit的提交信息\n$ git commit --amend -m [message]\n```\n可以看到在这次提交中，一个文件变动，增加了1行\n![](/images/git/4.png)\n\n新增加一个test1.txt，并修改test.txt。然后用--amend替代上一次提交。\n![](/images/git/5.png)\n\n### 查看文件提交纪录\n```bash\n# 显示当前分支的历史版本\n$ git log\n\n# 显示commit历史，单行显示（--pretty=oneline）,以及每次commit发生变更的文件（--stat）\n$ git log --stat --pretty=oneline查看某文件暂存区和工作区的差异\n```\n![](/images/git/6.png)\n![](/images/git/7.png)\n\n### 查看文件变动\n```bash\n# 查看某文件暂存区和工作区的差异\n$ git diff [file]\n\n# 查看暂存区和工作区的差异\n$ git diff\n\n# 查看某文件暂存区和本地仓库的差异\n$ git diff --cached [file]\n\n# 查看暂存区和本地仓库的差异\n$ git diff --cached\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n```\n这里可以看到test.txt删除了第2行，添加了234567行\n![](/images/git/8.png)\n\n把test.txt添加到暂存区，查看修改\n![](/images/git/9.png)\n\n### 撤销工作区的修改\n```bash\n# 恢复暂存区的指定文件到工作区，譬如在工作区修改了test.txt，还没有add，但是现在突然不要这修改了，可以用这个方式撤销\n$ git checkout [file]\n```\n![](/images/git/10.png)\n\n### 撤销暂存区的修改\n```bash\n# 将add的文件撤销到工作区\n$ git reset HEAD \n```\n可以看到执行git reset HEAD，之前git add的文件重新回到了工作区\n![](/images/git/11.png)\n\n### 版本回退\n```bash\n# commitId为每次commit的token，可以用git log查看。commitId为空或者为HEAD，为当前版本，即上一次commit的状态\n$ git reset --hard [commintId]\n\n# 一个^代表回退一个版本\n$ git reset --hard^\n\n# ~后跟的数字代表回退几个版本\n$ git reset --hard~1\n```\n![](/images/git/12.png)\n\n\n### 查看当前分支的提交纪录\n```bash\n$ git reflog\n```\n![](/images/git/13.png)\n\n## 远程仓库\n\n### 从远程仓库克隆\n```bash\n# 从远程仓库克隆\n$ git clone https://gitee.com/zzdzxj/test1.git\n```\n\n### 本地仓库与远程仓库连接\n```bash\n# 如果已经有本地仓库，想要和远程仓库连接\n$ git remote add origin https://gitee.com/zzdzxj/test1.git\n\n# 与本地仓库连接之后，需要把本地修改先推送到远程仓库上\n$ git push -u origin master\n```\ngitee上新建一个仓库的例子\n![](/images/git/14.png)\n\n### 使用fetch从远程仓库拉取代码/查看更新\n```bash\n# 从远程仓库拉取代码，不合并。可用来查看有没有其他人更新\n$ git fetch origin master\n\n# 比较本地的master分支与origin的master分支的区别\n$ git log -p master  ..origin/master\n\n# 进行合并\n$ git merge origin/master\n```\n![](/images/git/15.png)\n\n### 使用pull从远程仓库拉取代码\n```bash\n# 从远程仓库拉取代码并合并。如果要拉取的分支与当前分支连接，参数可省略\n$ git pull [remote] [branch]\n```\n![](/images/git/16.png)\n\n### 推送代码到远程仓库\n```bash\n# 推送代码到远程仓库。如果要拉取的分支与当前分支连接，参数可省略\n# 第一次推送可能要登录\n$ git push [remote] [branch]\n```\n![](/images/git/17.png)\n\n## 分支管理\n\n### 查看分支\n```bash\n# 查看本地分支\n$ git branch\n\n# 查看远程分支\n$ git branch -r\n\n# 查看本地分支和远程分支\n$ git branch -a\n```\n![](/images/git/18.png)\n\n### 新建分支\n```bash\n# 新建分支\n$ git branch [branch-name]\n\n# 新建分支，并切换到该分支\n$ git checkout -b [branch-name]\n```\ngit checkout -b [branch-name] \n等价于  \ngit branch [branch-name]\ngit checkout [branch-name]\n![](/images/git/19.png)\n\n### 从远程仓库拉取分支\n```bash\n# clone下来的新仓库，只有默认分支的代码，如果需要拉取其他分支\n$ git checkout -b [branch-name] [remote]/[branch]\n```\n以程仓库的develop为模板，在本地建立一个dev的分支，并切换到dev分支。\n![](/images/git/20.png)\n\n\n### 本地分支与远程分支建立追踪关系\n```bash\n$ git branch --set-upstream-to=origin/[remote branch] [branch]\n```\n将本地分支dev与远程分支develop建立连接\n![](/images/git/21.png)\n\n### 切换分支\n```bash\n# 切换到指定分支，并更新工作区\n$ git checkout [branch]\n\n# 切换到上一个分支\n$ git checkout -\n```\n![](/images/git/22.png)\n\n### 删除分支\n```bash\n$ git branch -d [branch]\n```\n![](/images/git/23.png)\n\n### 删除远程分支\n```bash\n$ git push origin --delete [remote branch]\n```\n删除远程仓库上的develop分支\n![](/images/git/24.png)\n\n### 新建远程分支\n```bash\n# 本地分支与远程分支名称相同\n$ git push --set-upstream origin [branch]\n\n# 本地分支与远程分支名称不同\n$ git push --set-upstream origin [branch]:[remote branch]\n```\n![](/images/git/24_1.png)\n\n### 查看分支信息\n查看git项目是从git的哪个分支上拉下来\n```\n$ git remote show origin\n```\n![](/images/git/24_2.png)\n\n### 合并分支\n```bash\n# 合并指定分支到当前分支\n$ git merge [branch]\n```\n![](/images/git/25.png)\n\n## 储藏\n\ngit stash命令的作用就是将目前还不想提交的但是已经修改的内容进行保存至堆栈中，后续可以在某个分支上恢复出堆栈中的内容。这也就是说，stash中的内容不仅仅可以恢复到原先开发的分支，也可以恢复到其他任意指定的分支上。git stash作用的范围包括工作区和暂存区中的内容，也就是说没有提交的内容都会保存至堆栈中。\n### 应用场景\n* 当正在dev分支上开发某个项目，这时项目中出现一个bug，需要紧急修复，但是正在开发的内容只是完成一半，还不想提交，这时可以用git stash命令将修改的内容保存至堆栈区，然后顺利切换到hotfix分支进行bug修复，修复完成后，再次切回到dev分支，从堆栈中恢复刚刚保存的内容。 \n* 由于疏忽，本应该在dev分支开发的内容，却在master上进行了开发，需要重新切回到dev分支上进行开发，可以用git stash将内容保存至堆栈中，切回到dev分支后，再次恢复内容即可。 \n\n### git stash\n能够将所有未提交的修改（工作区和暂存区）保存至堆栈中，用于后续恢复当前工作目录。\n```bash\n$ git stash\n```\n![](/images/git/26.png)\n\n### git stash save\n等同于git stash，只是多了注释\n```bash\n$ git stash save [message]\n```\n![](/images/git/27.png)\n\n### git stash list\n查看当前stash中的内容\n```bash\n$ git stash list\n```\n可以看到之前保存的2个\n![](/images/git/28.png)\n\n### git stash pop\n将当前stash中的内容弹出，并应用到当前分支对应的工作目录上。 \n注：该命令将堆栈中最近保存的内容删除（栈是先进后出） \n```bash\n$ git stash pop\n```\n![](/images/git/29.png)\n\n### git stash apply\n将堆栈中的内容应用到当前目录，不同于git stash pop，该命令不会将内容从堆栈中删除，也就说该命令能够将堆栈的内容多次应用到工作目录中，适应于多个分支的情况。\n也可以使用git stash apply + stash名字（如stash@{1}）指定恢复哪个stash到当前的工作目录。\n```bash\n$ git stash apply\n```\n![](/images/git/30.png)\n\n### git stash drop\n从堆栈中移除某个指定的stash，不指定删除stash@{0}\n```bash\n$ git stash drop [stash-name]\n```\n![](/images/git/31.png)\n\n### git stash clean\n清除堆栈中的所有内容\n```bash\n$ git stash clear\n```\n\n### git stash show\n查看堆栈中最新保存的stash和当前目录的差异。\n```bash\n$ git stash show\n\n# 查看指定的stash和当前目录差异。 \n$ git stash show stash@{1}\n\n# 查看详细的不同\n$ git stash show -p\n\n# 查看指定的stash的差异内容\n$ git stash show stash@{1} -p\n```\n![](/images/git/32.png)\n\n### git stash branch\n从最新的stash创建分支，与pop一样，会删除stash。\n```bash\n# 根据最近的stash创建\n$ git stash branch [branch-name]\n\n# 根据指定的stash创建\n$ git stash branch [branch-name] stash@{1}\n```\n![](/images/git/33.png)\n\n应用场景：当储藏了部分工作，暂时不去理会，继续在当前分支进行开发，后续想将stash中的内容恢复到当前工作目录时，如果是针对同一个文件的修改（即便不是同行数据），那么可能会发生冲突，恢复失败，这里通过创建新的分支来解决。可以用于解决stash中的内容和当前目录的内容发生冲突的情景。 \n发生冲突时，需手动解决冲突。\n\n## 标签\n\n### 列出所有标签\n```bash\n$ git tag\n```\n\n### 新建标签\n```bash\n# 在当前commit新建一个tag\n$ git tag [tag]\n\n# 在指定commit新建一个tag\n$ git tag [tag] [commit]\n```\n![](/images/git/34.png)\n\n### 查看标签\n```bash\n$ git show [tag]\n```\n![](/images/git/35.png)\n\n### 删除本地标签\n```bash\n$ git tag -d [tag]\n```\n![](/images/git/36.png)\n\n### 推送标签\n```bash\n# 推送指定标签到远程仓库\n$ git push [remote] [tag]\n\n# 推送所有标签到远程仓库\n$ git push [remote] --tags\n```\n![](/images/git/37.png)\n\n### 查看远程标签\n```bash\n$ git ls-remote –-tags [remote]\n```\n![](/images/git/38.png)\n\n### 删除远程标签\n```bash\n# 先删除本地标签\n$ git tag -d [tag]\n\n# 推送到远程仓库\n$ git push [remote] :refs/tags/[tag]\n```\n![](/images/git/39.png)\n\n## 冲突\n\n### 合并分支冲突\n\n新建一个feat分支，修改文件并提交\n![](/images/git/40.png)\n\n切换到master分支，同样同一个文件同一行并提交\n![](/images/git/41.png)\n\n合并分支时，发现合并冲突了\n![](/images/git/42.png)\n\n冲突文件：\n![](/images/git/43.png)\n\nGit用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，修改后重新提交。\n```bash\n# 查看分支合并情况\n$ git log --graph --pretty=oneline --abbrev-commit\n```\n![](/images/git/44.png)\n\n### 本地仓库与远程仓库冲突\n\n如果多人合作，其他人推送了他的提交，刚好你对同一文件做了修改，推送的时候就会有问题。\n这时候先用git pull把最新的提交抓下来，在本地合并，解决冲突后再推送。","source":"_posts/git-bash.md","raw":"---\ntitle: git常用命令实践\ndate: 2019-07-19 11:40:09\ntags:\n- git\ncategories:\n- git\n---\n\n## 关系图\n![](/images/git/relation.png)\n* Workspace：工作区\n* Index/Stage：暂存区\n* Repository：本地仓库\n* Remote：远程仓库\n\n## 本地仓库\n\n### 新建仓库\n```bash\n# 在当前目录新建一个Git仓库\n$ git init\n\n# 新建一个目录，将其初始化成Git仓库\n$ git init [project-name]\n```\n\n### 配置信息\n```bash\n# 显示配置列表\n$ git config --list\n\n# 设置用户信息\n# 当前仓库设置用户名\n$ git config --global user.name \"Zhaoxinjie\"\n\n# 当前仓库设置用户邮箱\n$ git config --global user.email \"543008186@qq.com\"\n\n# 全局设置用户名\n$ git config --global user.name \"Zhaoxinjie\"\n\n# 全局设置用户邮箱\n$ git config --global user.email \"543008186@qq.com\"\n\n# 不设置值即为查看\n```\n![](/images/git/1.png)\n\n### 显示工作区和暂存区的状态\n```bash\n$ git status\n```\n![](/images/git/2.png)\n\n### 添加文件到暂存区\n```bash\n# 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区\n$ git add [div]\n\n# 添加当前目录所有文件到暂存区\n$ git add .\n```\n这里可以看到新添加了一个文件\n![](/images/git/3.png)\n\n### 提交到本地仓库\n```bash\n# 提交暂存区到仓库区，message是每次提交的说明，查看历史记录的时候会显示\n$ git commit -m [message]\n\n# 提交暂存区指定文件到仓库区\n$ git commit [file1] [file2] -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有变化，则用来修改上一次commit的提交信息\n$ git commit --amend -m [message]\n```\n可以看到在这次提交中，一个文件变动，增加了1行\n![](/images/git/4.png)\n\n新增加一个test1.txt，并修改test.txt。然后用--amend替代上一次提交。\n![](/images/git/5.png)\n\n### 查看文件提交纪录\n```bash\n# 显示当前分支的历史版本\n$ git log\n\n# 显示commit历史，单行显示（--pretty=oneline）,以及每次commit发生变更的文件（--stat）\n$ git log --stat --pretty=oneline查看某文件暂存区和工作区的差异\n```\n![](/images/git/6.png)\n![](/images/git/7.png)\n\n### 查看文件变动\n```bash\n# 查看某文件暂存区和工作区的差异\n$ git diff [file]\n\n# 查看暂存区和工作区的差异\n$ git diff\n\n# 查看某文件暂存区和本地仓库的差异\n$ git diff --cached [file]\n\n# 查看暂存区和本地仓库的差异\n$ git diff --cached\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n```\n这里可以看到test.txt删除了第2行，添加了234567行\n![](/images/git/8.png)\n\n把test.txt添加到暂存区，查看修改\n![](/images/git/9.png)\n\n### 撤销工作区的修改\n```bash\n# 恢复暂存区的指定文件到工作区，譬如在工作区修改了test.txt，还没有add，但是现在突然不要这修改了，可以用这个方式撤销\n$ git checkout [file]\n```\n![](/images/git/10.png)\n\n### 撤销暂存区的修改\n```bash\n# 将add的文件撤销到工作区\n$ git reset HEAD \n```\n可以看到执行git reset HEAD，之前git add的文件重新回到了工作区\n![](/images/git/11.png)\n\n### 版本回退\n```bash\n# commitId为每次commit的token，可以用git log查看。commitId为空或者为HEAD，为当前版本，即上一次commit的状态\n$ git reset --hard [commintId]\n\n# 一个^代表回退一个版本\n$ git reset --hard^\n\n# ~后跟的数字代表回退几个版本\n$ git reset --hard~1\n```\n![](/images/git/12.png)\n\n\n### 查看当前分支的提交纪录\n```bash\n$ git reflog\n```\n![](/images/git/13.png)\n\n## 远程仓库\n\n### 从远程仓库克隆\n```bash\n# 从远程仓库克隆\n$ git clone https://gitee.com/zzdzxj/test1.git\n```\n\n### 本地仓库与远程仓库连接\n```bash\n# 如果已经有本地仓库，想要和远程仓库连接\n$ git remote add origin https://gitee.com/zzdzxj/test1.git\n\n# 与本地仓库连接之后，需要把本地修改先推送到远程仓库上\n$ git push -u origin master\n```\ngitee上新建一个仓库的例子\n![](/images/git/14.png)\n\n### 使用fetch从远程仓库拉取代码/查看更新\n```bash\n# 从远程仓库拉取代码，不合并。可用来查看有没有其他人更新\n$ git fetch origin master\n\n# 比较本地的master分支与origin的master分支的区别\n$ git log -p master  ..origin/master\n\n# 进行合并\n$ git merge origin/master\n```\n![](/images/git/15.png)\n\n### 使用pull从远程仓库拉取代码\n```bash\n# 从远程仓库拉取代码并合并。如果要拉取的分支与当前分支连接，参数可省略\n$ git pull [remote] [branch]\n```\n![](/images/git/16.png)\n\n### 推送代码到远程仓库\n```bash\n# 推送代码到远程仓库。如果要拉取的分支与当前分支连接，参数可省略\n# 第一次推送可能要登录\n$ git push [remote] [branch]\n```\n![](/images/git/17.png)\n\n## 分支管理\n\n### 查看分支\n```bash\n# 查看本地分支\n$ git branch\n\n# 查看远程分支\n$ git branch -r\n\n# 查看本地分支和远程分支\n$ git branch -a\n```\n![](/images/git/18.png)\n\n### 新建分支\n```bash\n# 新建分支\n$ git branch [branch-name]\n\n# 新建分支，并切换到该分支\n$ git checkout -b [branch-name]\n```\ngit checkout -b [branch-name] \n等价于  \ngit branch [branch-name]\ngit checkout [branch-name]\n![](/images/git/19.png)\n\n### 从远程仓库拉取分支\n```bash\n# clone下来的新仓库，只有默认分支的代码，如果需要拉取其他分支\n$ git checkout -b [branch-name] [remote]/[branch]\n```\n以程仓库的develop为模板，在本地建立一个dev的分支，并切换到dev分支。\n![](/images/git/20.png)\n\n\n### 本地分支与远程分支建立追踪关系\n```bash\n$ git branch --set-upstream-to=origin/[remote branch] [branch]\n```\n将本地分支dev与远程分支develop建立连接\n![](/images/git/21.png)\n\n### 切换分支\n```bash\n# 切换到指定分支，并更新工作区\n$ git checkout [branch]\n\n# 切换到上一个分支\n$ git checkout -\n```\n![](/images/git/22.png)\n\n### 删除分支\n```bash\n$ git branch -d [branch]\n```\n![](/images/git/23.png)\n\n### 删除远程分支\n```bash\n$ git push origin --delete [remote branch]\n```\n删除远程仓库上的develop分支\n![](/images/git/24.png)\n\n### 新建远程分支\n```bash\n# 本地分支与远程分支名称相同\n$ git push --set-upstream origin [branch]\n\n# 本地分支与远程分支名称不同\n$ git push --set-upstream origin [branch]:[remote branch]\n```\n![](/images/git/24_1.png)\n\n### 查看分支信息\n查看git项目是从git的哪个分支上拉下来\n```\n$ git remote show origin\n```\n![](/images/git/24_2.png)\n\n### 合并分支\n```bash\n# 合并指定分支到当前分支\n$ git merge [branch]\n```\n![](/images/git/25.png)\n\n## 储藏\n\ngit stash命令的作用就是将目前还不想提交的但是已经修改的内容进行保存至堆栈中，后续可以在某个分支上恢复出堆栈中的内容。这也就是说，stash中的内容不仅仅可以恢复到原先开发的分支，也可以恢复到其他任意指定的分支上。git stash作用的范围包括工作区和暂存区中的内容，也就是说没有提交的内容都会保存至堆栈中。\n### 应用场景\n* 当正在dev分支上开发某个项目，这时项目中出现一个bug，需要紧急修复，但是正在开发的内容只是完成一半，还不想提交，这时可以用git stash命令将修改的内容保存至堆栈区，然后顺利切换到hotfix分支进行bug修复，修复完成后，再次切回到dev分支，从堆栈中恢复刚刚保存的内容。 \n* 由于疏忽，本应该在dev分支开发的内容，却在master上进行了开发，需要重新切回到dev分支上进行开发，可以用git stash将内容保存至堆栈中，切回到dev分支后，再次恢复内容即可。 \n\n### git stash\n能够将所有未提交的修改（工作区和暂存区）保存至堆栈中，用于后续恢复当前工作目录。\n```bash\n$ git stash\n```\n![](/images/git/26.png)\n\n### git stash save\n等同于git stash，只是多了注释\n```bash\n$ git stash save [message]\n```\n![](/images/git/27.png)\n\n### git stash list\n查看当前stash中的内容\n```bash\n$ git stash list\n```\n可以看到之前保存的2个\n![](/images/git/28.png)\n\n### git stash pop\n将当前stash中的内容弹出，并应用到当前分支对应的工作目录上。 \n注：该命令将堆栈中最近保存的内容删除（栈是先进后出） \n```bash\n$ git stash pop\n```\n![](/images/git/29.png)\n\n### git stash apply\n将堆栈中的内容应用到当前目录，不同于git stash pop，该命令不会将内容从堆栈中删除，也就说该命令能够将堆栈的内容多次应用到工作目录中，适应于多个分支的情况。\n也可以使用git stash apply + stash名字（如stash@{1}）指定恢复哪个stash到当前的工作目录。\n```bash\n$ git stash apply\n```\n![](/images/git/30.png)\n\n### git stash drop\n从堆栈中移除某个指定的stash，不指定删除stash@{0}\n```bash\n$ git stash drop [stash-name]\n```\n![](/images/git/31.png)\n\n### git stash clean\n清除堆栈中的所有内容\n```bash\n$ git stash clear\n```\n\n### git stash show\n查看堆栈中最新保存的stash和当前目录的差异。\n```bash\n$ git stash show\n\n# 查看指定的stash和当前目录差异。 \n$ git stash show stash@{1}\n\n# 查看详细的不同\n$ git stash show -p\n\n# 查看指定的stash的差异内容\n$ git stash show stash@{1} -p\n```\n![](/images/git/32.png)\n\n### git stash branch\n从最新的stash创建分支，与pop一样，会删除stash。\n```bash\n# 根据最近的stash创建\n$ git stash branch [branch-name]\n\n# 根据指定的stash创建\n$ git stash branch [branch-name] stash@{1}\n```\n![](/images/git/33.png)\n\n应用场景：当储藏了部分工作，暂时不去理会，继续在当前分支进行开发，后续想将stash中的内容恢复到当前工作目录时，如果是针对同一个文件的修改（即便不是同行数据），那么可能会发生冲突，恢复失败，这里通过创建新的分支来解决。可以用于解决stash中的内容和当前目录的内容发生冲突的情景。 \n发生冲突时，需手动解决冲突。\n\n## 标签\n\n### 列出所有标签\n```bash\n$ git tag\n```\n\n### 新建标签\n```bash\n# 在当前commit新建一个tag\n$ git tag [tag]\n\n# 在指定commit新建一个tag\n$ git tag [tag] [commit]\n```\n![](/images/git/34.png)\n\n### 查看标签\n```bash\n$ git show [tag]\n```\n![](/images/git/35.png)\n\n### 删除本地标签\n```bash\n$ git tag -d [tag]\n```\n![](/images/git/36.png)\n\n### 推送标签\n```bash\n# 推送指定标签到远程仓库\n$ git push [remote] [tag]\n\n# 推送所有标签到远程仓库\n$ git push [remote] --tags\n```\n![](/images/git/37.png)\n\n### 查看远程标签\n```bash\n$ git ls-remote –-tags [remote]\n```\n![](/images/git/38.png)\n\n### 删除远程标签\n```bash\n# 先删除本地标签\n$ git tag -d [tag]\n\n# 推送到远程仓库\n$ git push [remote] :refs/tags/[tag]\n```\n![](/images/git/39.png)\n\n## 冲突\n\n### 合并分支冲突\n\n新建一个feat分支，修改文件并提交\n![](/images/git/40.png)\n\n切换到master分支，同样同一个文件同一行并提交\n![](/images/git/41.png)\n\n合并分支时，发现合并冲突了\n![](/images/git/42.png)\n\n冲突文件：\n![](/images/git/43.png)\n\nGit用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，修改后重新提交。\n```bash\n# 查看分支合并情况\n$ git log --graph --pretty=oneline --abbrev-commit\n```\n![](/images/git/44.png)\n\n### 本地仓库与远程仓库冲突\n\n如果多人合作，其他人推送了他的提交，刚好你对同一文件做了修改，推送的时候就会有问题。\n这时候先用git pull把最新的提交抓下来，在本地合并，解决冲突后再推送。","slug":"git-bash","published":1,"updated":"2019-08-08T08:04:22.832Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0rqqm0o002vugqs7p85e829","content":"<h2 id=\"关系图\"><a href=\"#关系图\" class=\"headerlink\" title=\"关系图\"></a>关系图</h2><p><img src=\"/images/git/relation.png\" alt></p>\n<ul>\n<li>Workspace：工作区</li>\n<li>Index/Stage：暂存区</li>\n<li>Repository：本地仓库</li>\n<li>Remote：远程仓库</li>\n</ul>\n<h2 id=\"本地仓库\"><a href=\"#本地仓库\" class=\"headerlink\" title=\"本地仓库\"></a>本地仓库</h2><h3 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在当前目录新建一个Git仓库</span></span><br><span class=\"line\">$ git init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个目录，将其初始化成Git仓库</span></span><br><span class=\"line\">$ git init [project-name]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置信息\"><a href=\"#配置信息\" class=\"headerlink\" title=\"配置信息\"></a>配置信息</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示配置列表</span></span><br><span class=\"line\">$ git config --list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置用户信息</span></span><br><span class=\"line\"><span class=\"comment\"># 当前仓库设置用户名</span></span><br><span class=\"line\">$ git config --global user.name <span class=\"string\">\"Zhaoxinjie\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当前仓库设置用户邮箱</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"543008186@qq.com\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 全局设置用户名</span></span><br><span class=\"line\">$ git config --global user.name <span class=\"string\">\"Zhaoxinjie\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 全局设置用户邮箱</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"543008186@qq.com\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 不设置值即为查看</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/1.png\" alt></p>\n<h3 id=\"显示工作区和暂存区的状态\"><a href=\"#显示工作区和暂存区的状态\" class=\"headerlink\" title=\"显示工作区和暂存区的状态\"></a>显示工作区和暂存区的状态</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/2.png\" alt></p>\n<h3 id=\"添加文件到暂存区\"><a href=\"#添加文件到暂存区\" class=\"headerlink\" title=\"添加文件到暂存区\"></a>添加文件到暂存区</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加指定文件到暂存区</span></span><br><span class=\"line\">$ git add [file1] [file2] ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加指定目录到暂存区</span></span><br><span class=\"line\">$ git add [div]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加当前目录所有文件到暂存区</span></span><br><span class=\"line\">$ git add .</span><br></pre></td></tr></table></figure>\n\n<p>这里可以看到新添加了一个文件<br><img src=\"/images/git/3.png\" alt></p>\n<h3 id=\"提交到本地仓库\"><a href=\"#提交到本地仓库\" class=\"headerlink\" title=\"提交到本地仓库\"></a>提交到本地仓库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提交暂存区到仓库区，message是每次提交的说明，查看历史记录的时候会显示</span></span><br><span class=\"line\">$ git commit -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交暂存区指定文件到仓库区</span></span><br><span class=\"line\">$ git commit [file1] [file2] -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class=\"line\">$ git commit -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交时显示所有diff信息</span></span><br><span class=\"line\">$ git commit -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用一次新的commit，替代上一次提交</span></span><br><span class=\"line\"><span class=\"comment\"># 如果代码没有变化，则用来修改上一次commit的提交信息</span></span><br><span class=\"line\">$ git commit --amend -m [message]</span><br></pre></td></tr></table></figure>\n\n<p>可以看到在这次提交中，一个文件变动，增加了1行<br><img src=\"/images/git/4.png\" alt></p>\n<p>新增加一个test1.txt，并修改test.txt。然后用–amend替代上一次提交。<br><img src=\"/images/git/5.png\" alt></p>\n<h3 id=\"查看文件提交纪录\"><a href=\"#查看文件提交纪录\" class=\"headerlink\" title=\"查看文件提交纪录\"></a>查看文件提交纪录</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示当前分支的历史版本</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示commit历史，单行显示（--pretty=oneline）,以及每次commit发生变更的文件（--stat）</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span> --pretty=oneline查看某文件暂存区和工作区的差异</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/6.png\" alt><br><img src=\"/images/git/7.png\" alt></p>\n<h3 id=\"查看文件变动\"><a href=\"#查看文件变动\" class=\"headerlink\" title=\"查看文件变动\"></a>查看文件变动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看某文件暂存区和工作区的差异</span></span><br><span class=\"line\">$ git diff [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看暂存区和工作区的差异</span></span><br><span class=\"line\">$ git diff</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看某文件暂存区和本地仓库的差异</span></span><br><span class=\"line\">$ git diff --cached [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看暂存区和本地仓库的差异</span></span><br><span class=\"line\">$ git diff --cached</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class=\"line\">$ git diff HEAD</span><br></pre></td></tr></table></figure>\n\n<p>这里可以看到test.txt删除了第2行，添加了234567行<br><img src=\"/images/git/8.png\" alt></p>\n<p>把test.txt添加到暂存区，查看修改<br><img src=\"/images/git/9.png\" alt></p>\n<h3 id=\"撤销工作区的修改\"><a href=\"#撤销工作区的修改\" class=\"headerlink\" title=\"撤销工作区的修改\"></a>撤销工作区的修改</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 恢复暂存区的指定文件到工作区，譬如在工作区修改了test.txt，还没有add，但是现在突然不要这修改了，可以用这个方式撤销</span></span><br><span class=\"line\">$ git checkout [file]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/10.png\" alt></p>\n<h3 id=\"撤销暂存区的修改\"><a href=\"#撤销暂存区的修改\" class=\"headerlink\" title=\"撤销暂存区的修改\"></a>撤销暂存区的修改</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将add的文件撤销到工作区</span></span><br><span class=\"line\">$ git reset HEAD</span><br></pre></td></tr></table></figure>\n\n<p>可以看到执行git reset HEAD，之前git add的文件重新回到了工作区<br><img src=\"/images/git/11.png\" alt></p>\n<h3 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># commitId为每次commit的token，可以用git log查看。commitId为空或者为HEAD，为当前版本，即上一次commit的状态</span></span><br><span class=\"line\">$ git reset --hard [commintId]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一个^代表回退一个版本</span></span><br><span class=\"line\">$ git reset --hard^</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ~后跟的数字代表回退几个版本</span></span><br><span class=\"line\">$ git reset --hard~1</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/12.png\" alt></p>\n<h3 id=\"查看当前分支的提交纪录\"><a href=\"#查看当前分支的提交纪录\" class=\"headerlink\" title=\"查看当前分支的提交纪录\"></a>查看当前分支的提交纪录</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reflog</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/13.png\" alt></p>\n<h2 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h2><h3 id=\"从远程仓库克隆\"><a href=\"#从远程仓库克隆\" class=\"headerlink\" title=\"从远程仓库克隆\"></a>从远程仓库克隆</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从远程仓库克隆</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://gitee.com/zzdzxj/test1.git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"本地仓库与远程仓库连接\"><a href=\"#本地仓库与远程仓库连接\" class=\"headerlink\" title=\"本地仓库与远程仓库连接\"></a>本地仓库与远程仓库连接</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果已经有本地仓库，想要和远程仓库连接</span></span><br><span class=\"line\">$ git remote add origin https://gitee.com/zzdzxj/test1.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 与本地仓库连接之后，需要把本地修改先推送到远程仓库上</span></span><br><span class=\"line\">$ git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<p>gitee上新建一个仓库的例子<br><img src=\"/images/git/14.png\" alt></p>\n<h3 id=\"使用fetch从远程仓库拉取代码-查看更新\"><a href=\"#使用fetch从远程仓库拉取代码-查看更新\" class=\"headerlink\" title=\"使用fetch从远程仓库拉取代码/查看更新\"></a>使用fetch从远程仓库拉取代码/查看更新</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从远程仓库拉取代码，不合并。可用来查看有没有其他人更新</span></span><br><span class=\"line\">$ git fetch origin master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 比较本地的master分支与origin的master分支的区别</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> -p master  ..origin/master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进行合并</span></span><br><span class=\"line\">$ git merge origin/master</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/15.png\" alt></p>\n<h3 id=\"使用pull从远程仓库拉取代码\"><a href=\"#使用pull从远程仓库拉取代码\" class=\"headerlink\" title=\"使用pull从远程仓库拉取代码\"></a>使用pull从远程仓库拉取代码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从远程仓库拉取代码并合并。如果要拉取的分支与当前分支连接，参数可省略</span></span><br><span class=\"line\">$ git pull [remote] [branch]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/16.png\" alt></p>\n<h3 id=\"推送代码到远程仓库\"><a href=\"#推送代码到远程仓库\" class=\"headerlink\" title=\"推送代码到远程仓库\"></a>推送代码到远程仓库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 推送代码到远程仓库。如果要拉取的分支与当前分支连接，参数可省略</span></span><br><span class=\"line\"><span class=\"comment\"># 第一次推送可能要登录</span></span><br><span class=\"line\">$ git push [remote] [branch]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/17.png\" alt></p>\n<h2 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h2><h3 id=\"查看分支\"><a href=\"#查看分支\" class=\"headerlink\" title=\"查看分支\"></a>查看分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看本地分支</span></span><br><span class=\"line\">$ git branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看远程分支</span></span><br><span class=\"line\">$ git branch -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看本地分支和远程分支</span></span><br><span class=\"line\">$ git branch -a</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/18.png\" alt></p>\n<h3 id=\"新建分支\"><a href=\"#新建分支\" class=\"headerlink\" title=\"新建分支\"></a>新建分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 新建分支</span></span><br><span class=\"line\">$ git branch [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建分支，并切换到该分支</span></span><br><span class=\"line\">$ git checkout -b [branch-name]</span><br></pre></td></tr></table></figure>\n\n<p>git checkout -b [branch-name]<br>等价于<br>git branch [branch-name]<br>git checkout [branch-name]<br><img src=\"/images/git/19.png\" alt></p>\n<h3 id=\"从远程仓库拉取分支\"><a href=\"#从远程仓库拉取分支\" class=\"headerlink\" title=\"从远程仓库拉取分支\"></a>从远程仓库拉取分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># clone下来的新仓库，只有默认分支的代码，如果需要拉取其他分支</span></span><br><span class=\"line\">$ git checkout -b [branch-name] [remote]/[branch]</span><br></pre></td></tr></table></figure>\n\n<p>以程仓库的develop为模板，在本地建立一个dev的分支，并切换到dev分支。<br><img src=\"/images/git/20.png\" alt></p>\n<h3 id=\"本地分支与远程分支建立追踪关系\"><a href=\"#本地分支与远程分支建立追踪关系\" class=\"headerlink\" title=\"本地分支与远程分支建立追踪关系\"></a>本地分支与远程分支建立追踪关系</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch --<span class=\"built_in\">set</span>-upstream-to=origin/[remote branch] [branch]</span><br></pre></td></tr></table></figure>\n\n<p>将本地分支dev与远程分支develop建立连接<br><img src=\"/images/git/21.png\" alt></p>\n<h3 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切换到指定分支，并更新工作区</span></span><br><span class=\"line\">$ git checkout [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到上一个分支</span></span><br><span class=\"line\">$ git checkout -</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/22.png\" alt></p>\n<h3 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -d [branch]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/23.png\" alt></p>\n<h3 id=\"删除远程分支\"><a href=\"#删除远程分支\" class=\"headerlink\" title=\"删除远程分支\"></a>删除远程分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin --delete [remote branch]</span><br></pre></td></tr></table></figure>\n\n<p>删除远程仓库上的develop分支<br><img src=\"/images/git/24.png\" alt></p>\n<h3 id=\"新建远程分支\"><a href=\"#新建远程分支\" class=\"headerlink\" title=\"新建远程分支\"></a>新建远程分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 本地分支与远程分支名称相同</span></span><br><span class=\"line\">$ git push --<span class=\"built_in\">set</span>-upstream origin [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 本地分支与远程分支名称不同</span></span><br><span class=\"line\">$ git push --<span class=\"built_in\">set</span>-upstream origin [branch]:[remote branch]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/24_1.png\" alt></p>\n<h3 id=\"查看分支信息\"><a href=\"#查看分支信息\" class=\"headerlink\" title=\"查看分支信息\"></a>查看分支信息</h3><p>查看git项目是从git的哪个分支上拉下来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote show origin</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/24_2.png\" alt></p>\n<h3 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 合并指定分支到当前分支</span></span><br><span class=\"line\">$ git merge [branch]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/25.png\" alt></p>\n<h2 id=\"储藏\"><a href=\"#储藏\" class=\"headerlink\" title=\"储藏\"></a>储藏</h2><p>git stash命令的作用就是将目前还不想提交的但是已经修改的内容进行保存至堆栈中，后续可以在某个分支上恢复出堆栈中的内容。这也就是说，stash中的内容不仅仅可以恢复到原先开发的分支，也可以恢复到其他任意指定的分支上。git stash作用的范围包括工作区和暂存区中的内容，也就是说没有提交的内容都会保存至堆栈中。</p>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><ul>\n<li>当正在dev分支上开发某个项目，这时项目中出现一个bug，需要紧急修复，但是正在开发的内容只是完成一半，还不想提交，这时可以用git stash命令将修改的内容保存至堆栈区，然后顺利切换到hotfix分支进行bug修复，修复完成后，再次切回到dev分支，从堆栈中恢复刚刚保存的内容。 </li>\n<li>由于疏忽，本应该在dev分支开发的内容，却在master上进行了开发，需要重新切回到dev分支上进行开发，可以用git stash将内容保存至堆栈中，切回到dev分支后，再次恢复内容即可。 </li>\n</ul>\n<h3 id=\"git-stash\"><a href=\"#git-stash\" class=\"headerlink\" title=\"git stash\"></a>git stash</h3><p>能够将所有未提交的修改（工作区和暂存区）保存至堆栈中，用于后续恢复当前工作目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/26.png\" alt></p>\n<h3 id=\"git-stash-save\"><a href=\"#git-stash-save\" class=\"headerlink\" title=\"git stash save\"></a>git stash save</h3><p>等同于git stash，只是多了注释</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash save [message]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/27.png\" alt></p>\n<h3 id=\"git-stash-list\"><a href=\"#git-stash-list\" class=\"headerlink\" title=\"git stash list\"></a>git stash list</h3><p>查看当前stash中的内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash list</span><br></pre></td></tr></table></figure>\n\n<p>可以看到之前保存的2个<br><img src=\"/images/git/28.png\" alt></p>\n<h3 id=\"git-stash-pop\"><a href=\"#git-stash-pop\" class=\"headerlink\" title=\"git stash pop\"></a>git stash pop</h3><p>将当前stash中的内容弹出，并应用到当前分支对应的工作目录上。<br>注：该命令将堆栈中最近保存的内容删除（栈是先进后出） </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash pop</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/29.png\" alt></p>\n<h3 id=\"git-stash-apply\"><a href=\"#git-stash-apply\" class=\"headerlink\" title=\"git stash apply\"></a>git stash apply</h3><p>将堆栈中的内容应用到当前目录，不同于git stash pop，该命令不会将内容从堆栈中删除，也就说该命令能够将堆栈的内容多次应用到工作目录中，适应于多个分支的情况。<br>也可以使用git stash apply + stash名字（如stash@{1}）指定恢复哪个stash到当前的工作目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash apply</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/30.png\" alt></p>\n<h3 id=\"git-stash-drop\"><a href=\"#git-stash-drop\" class=\"headerlink\" title=\"git stash drop\"></a>git stash drop</h3><p>从堆栈中移除某个指定的stash，不指定删除stash@{0}</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash drop [stash-name]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/31.png\" alt></p>\n<h3 id=\"git-stash-clean\"><a href=\"#git-stash-clean\" class=\"headerlink\" title=\"git stash clean\"></a>git stash clean</h3><p>清除堆栈中的所有内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash clear</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-stash-show\"><a href=\"#git-stash-show\" class=\"headerlink\" title=\"git stash show\"></a>git stash show</h3><p>查看堆栈中最新保存的stash和当前目录的差异。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash show</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定的stash和当前目录差异。 </span></span><br><span class=\"line\">$ git stash show stash@&#123;1&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看详细的不同</span></span><br><span class=\"line\">$ git stash show -p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定的stash的差异内容</span></span><br><span class=\"line\">$ git stash show stash@&#123;1&#125; -p</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/32.png\" alt></p>\n<h3 id=\"git-stash-branch\"><a href=\"#git-stash-branch\" class=\"headerlink\" title=\"git stash branch\"></a>git stash branch</h3><p>从最新的stash创建分支，与pop一样，会删除stash。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 根据最近的stash创建</span></span><br><span class=\"line\">$ git stash branch [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 根据指定的stash创建</span></span><br><span class=\"line\">$ git stash branch [branch-name] stash@&#123;1&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/33.png\" alt></p>\n<p>应用场景：当储藏了部分工作，暂时不去理会，继续在当前分支进行开发，后续想将stash中的内容恢复到当前工作目录时，如果是针对同一个文件的修改（即便不是同行数据），那么可能会发生冲突，恢复失败，这里通过创建新的分支来解决。可以用于解决stash中的内容和当前目录的内容发生冲突的情景。<br>发生冲突时，需手动解决冲突。</p>\n<h2 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h2><h3 id=\"列出所有标签\"><a href=\"#列出所有标签\" class=\"headerlink\" title=\"列出所有标签\"></a>列出所有标签</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新建标签\"><a href=\"#新建标签\" class=\"headerlink\" title=\"新建标签\"></a>新建标签</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在当前commit新建一个tag</span></span><br><span class=\"line\">$ git tag [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在指定commit新建一个tag</span></span><br><span class=\"line\">$ git tag [tag] [commit]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/34.png\" alt></p>\n<h3 id=\"查看标签\"><a href=\"#查看标签\" class=\"headerlink\" title=\"查看标签\"></a>查看标签</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git show [tag]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/35.png\" alt></p>\n<h3 id=\"删除本地标签\"><a href=\"#删除本地标签\" class=\"headerlink\" title=\"删除本地标签\"></a>删除本地标签</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -d [tag]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/36.png\" alt></p>\n<h3 id=\"推送标签\"><a href=\"#推送标签\" class=\"headerlink\" title=\"推送标签\"></a>推送标签</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 推送指定标签到远程仓库</span></span><br><span class=\"line\">$ git push [remote] [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送所有标签到远程仓库</span></span><br><span class=\"line\">$ git push [remote] --tags</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/37.png\" alt></p>\n<h3 id=\"查看远程标签\"><a href=\"#查看远程标签\" class=\"headerlink\" title=\"查看远程标签\"></a>查看远程标签</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git ls-remote –-tags [remote]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/38.png\" alt></p>\n<h3 id=\"删除远程标签\"><a href=\"#删除远程标签\" class=\"headerlink\" title=\"删除远程标签\"></a>删除远程标签</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先删除本地标签</span></span><br><span class=\"line\">$ git tag -d [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送到远程仓库</span></span><br><span class=\"line\">$ git push [remote] :refs/tags/[tag]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/39.png\" alt></p>\n<h2 id=\"冲突\"><a href=\"#冲突\" class=\"headerlink\" title=\"冲突\"></a>冲突</h2><h3 id=\"合并分支冲突\"><a href=\"#合并分支冲突\" class=\"headerlink\" title=\"合并分支冲突\"></a>合并分支冲突</h3><p>新建一个feat分支，修改文件并提交<br><img src=\"/images/git/40.png\" alt></p>\n<p>切换到master分支，同样同一个文件同一行并提交<br><img src=\"/images/git/41.png\" alt></p>\n<p>合并分支时，发现合并冲突了<br><img src=\"/images/git/42.png\" alt></p>\n<p>冲突文件：<br><img src=\"/images/git/43.png\" alt></p>\n<p>Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，修改后重新提交。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看分支合并情况</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/44.png\" alt></p>\n<h3 id=\"本地仓库与远程仓库冲突\"><a href=\"#本地仓库与远程仓库冲突\" class=\"headerlink\" title=\"本地仓库与远程仓库冲突\"></a>本地仓库与远程仓库冲突</h3><p>如果多人合作，其他人推送了他的提交，刚好你对同一文件做了修改，推送的时候就会有问题。<br>这时候先用git pull把最新的提交抓下来，在本地合并，解决冲突后再推送。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关系图\"><a href=\"#关系图\" class=\"headerlink\" title=\"关系图\"></a>关系图</h2><p><img src=\"/images/git/relation.png\" alt></p>\n<ul>\n<li>Workspace：工作区</li>\n<li>Index/Stage：暂存区</li>\n<li>Repository：本地仓库</li>\n<li>Remote：远程仓库</li>\n</ul>\n<h2 id=\"本地仓库\"><a href=\"#本地仓库\" class=\"headerlink\" title=\"本地仓库\"></a>本地仓库</h2><h3 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在当前目录新建一个Git仓库</span></span><br><span class=\"line\">$ git init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个目录，将其初始化成Git仓库</span></span><br><span class=\"line\">$ git init [project-name]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置信息\"><a href=\"#配置信息\" class=\"headerlink\" title=\"配置信息\"></a>配置信息</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示配置列表</span></span><br><span class=\"line\">$ git config --list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置用户信息</span></span><br><span class=\"line\"><span class=\"comment\"># 当前仓库设置用户名</span></span><br><span class=\"line\">$ git config --global user.name <span class=\"string\">\"Zhaoxinjie\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当前仓库设置用户邮箱</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"543008186@qq.com\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 全局设置用户名</span></span><br><span class=\"line\">$ git config --global user.name <span class=\"string\">\"Zhaoxinjie\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 全局设置用户邮箱</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"543008186@qq.com\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 不设置值即为查看</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/1.png\" alt></p>\n<h3 id=\"显示工作区和暂存区的状态\"><a href=\"#显示工作区和暂存区的状态\" class=\"headerlink\" title=\"显示工作区和暂存区的状态\"></a>显示工作区和暂存区的状态</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/2.png\" alt></p>\n<h3 id=\"添加文件到暂存区\"><a href=\"#添加文件到暂存区\" class=\"headerlink\" title=\"添加文件到暂存区\"></a>添加文件到暂存区</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加指定文件到暂存区</span></span><br><span class=\"line\">$ git add [file1] [file2] ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加指定目录到暂存区</span></span><br><span class=\"line\">$ git add [div]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加当前目录所有文件到暂存区</span></span><br><span class=\"line\">$ git add .</span><br></pre></td></tr></table></figure>\n\n<p>这里可以看到新添加了一个文件<br><img src=\"/images/git/3.png\" alt></p>\n<h3 id=\"提交到本地仓库\"><a href=\"#提交到本地仓库\" class=\"headerlink\" title=\"提交到本地仓库\"></a>提交到本地仓库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提交暂存区到仓库区，message是每次提交的说明，查看历史记录的时候会显示</span></span><br><span class=\"line\">$ git commit -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交暂存区指定文件到仓库区</span></span><br><span class=\"line\">$ git commit [file1] [file2] -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class=\"line\">$ git commit -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交时显示所有diff信息</span></span><br><span class=\"line\">$ git commit -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用一次新的commit，替代上一次提交</span></span><br><span class=\"line\"><span class=\"comment\"># 如果代码没有变化，则用来修改上一次commit的提交信息</span></span><br><span class=\"line\">$ git commit --amend -m [message]</span><br></pre></td></tr></table></figure>\n\n<p>可以看到在这次提交中，一个文件变动，增加了1行<br><img src=\"/images/git/4.png\" alt></p>\n<p>新增加一个test1.txt，并修改test.txt。然后用–amend替代上一次提交。<br><img src=\"/images/git/5.png\" alt></p>\n<h3 id=\"查看文件提交纪录\"><a href=\"#查看文件提交纪录\" class=\"headerlink\" title=\"查看文件提交纪录\"></a>查看文件提交纪录</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示当前分支的历史版本</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示commit历史，单行显示（--pretty=oneline）,以及每次commit发生变更的文件（--stat）</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span> --pretty=oneline查看某文件暂存区和工作区的差异</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/6.png\" alt><br><img src=\"/images/git/7.png\" alt></p>\n<h3 id=\"查看文件变动\"><a href=\"#查看文件变动\" class=\"headerlink\" title=\"查看文件变动\"></a>查看文件变动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看某文件暂存区和工作区的差异</span></span><br><span class=\"line\">$ git diff [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看暂存区和工作区的差异</span></span><br><span class=\"line\">$ git diff</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看某文件暂存区和本地仓库的差异</span></span><br><span class=\"line\">$ git diff --cached [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看暂存区和本地仓库的差异</span></span><br><span class=\"line\">$ git diff --cached</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class=\"line\">$ git diff HEAD</span><br></pre></td></tr></table></figure>\n\n<p>这里可以看到test.txt删除了第2行，添加了234567行<br><img src=\"/images/git/8.png\" alt></p>\n<p>把test.txt添加到暂存区，查看修改<br><img src=\"/images/git/9.png\" alt></p>\n<h3 id=\"撤销工作区的修改\"><a href=\"#撤销工作区的修改\" class=\"headerlink\" title=\"撤销工作区的修改\"></a>撤销工作区的修改</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 恢复暂存区的指定文件到工作区，譬如在工作区修改了test.txt，还没有add，但是现在突然不要这修改了，可以用这个方式撤销</span></span><br><span class=\"line\">$ git checkout [file]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/10.png\" alt></p>\n<h3 id=\"撤销暂存区的修改\"><a href=\"#撤销暂存区的修改\" class=\"headerlink\" title=\"撤销暂存区的修改\"></a>撤销暂存区的修改</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将add的文件撤销到工作区</span></span><br><span class=\"line\">$ git reset HEAD</span><br></pre></td></tr></table></figure>\n\n<p>可以看到执行git reset HEAD，之前git add的文件重新回到了工作区<br><img src=\"/images/git/11.png\" alt></p>\n<h3 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># commitId为每次commit的token，可以用git log查看。commitId为空或者为HEAD，为当前版本，即上一次commit的状态</span></span><br><span class=\"line\">$ git reset --hard [commintId]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一个^代表回退一个版本</span></span><br><span class=\"line\">$ git reset --hard^</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ~后跟的数字代表回退几个版本</span></span><br><span class=\"line\">$ git reset --hard~1</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/12.png\" alt></p>\n<h3 id=\"查看当前分支的提交纪录\"><a href=\"#查看当前分支的提交纪录\" class=\"headerlink\" title=\"查看当前分支的提交纪录\"></a>查看当前分支的提交纪录</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reflog</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/13.png\" alt></p>\n<h2 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h2><h3 id=\"从远程仓库克隆\"><a href=\"#从远程仓库克隆\" class=\"headerlink\" title=\"从远程仓库克隆\"></a>从远程仓库克隆</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从远程仓库克隆</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://gitee.com/zzdzxj/test1.git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"本地仓库与远程仓库连接\"><a href=\"#本地仓库与远程仓库连接\" class=\"headerlink\" title=\"本地仓库与远程仓库连接\"></a>本地仓库与远程仓库连接</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果已经有本地仓库，想要和远程仓库连接</span></span><br><span class=\"line\">$ git remote add origin https://gitee.com/zzdzxj/test1.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 与本地仓库连接之后，需要把本地修改先推送到远程仓库上</span></span><br><span class=\"line\">$ git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<p>gitee上新建一个仓库的例子<br><img src=\"/images/git/14.png\" alt></p>\n<h3 id=\"使用fetch从远程仓库拉取代码-查看更新\"><a href=\"#使用fetch从远程仓库拉取代码-查看更新\" class=\"headerlink\" title=\"使用fetch从远程仓库拉取代码/查看更新\"></a>使用fetch从远程仓库拉取代码/查看更新</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从远程仓库拉取代码，不合并。可用来查看有没有其他人更新</span></span><br><span class=\"line\">$ git fetch origin master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 比较本地的master分支与origin的master分支的区别</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> -p master  ..origin/master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进行合并</span></span><br><span class=\"line\">$ git merge origin/master</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/15.png\" alt></p>\n<h3 id=\"使用pull从远程仓库拉取代码\"><a href=\"#使用pull从远程仓库拉取代码\" class=\"headerlink\" title=\"使用pull从远程仓库拉取代码\"></a>使用pull从远程仓库拉取代码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从远程仓库拉取代码并合并。如果要拉取的分支与当前分支连接，参数可省略</span></span><br><span class=\"line\">$ git pull [remote] [branch]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/16.png\" alt></p>\n<h3 id=\"推送代码到远程仓库\"><a href=\"#推送代码到远程仓库\" class=\"headerlink\" title=\"推送代码到远程仓库\"></a>推送代码到远程仓库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 推送代码到远程仓库。如果要拉取的分支与当前分支连接，参数可省略</span></span><br><span class=\"line\"><span class=\"comment\"># 第一次推送可能要登录</span></span><br><span class=\"line\">$ git push [remote] [branch]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/17.png\" alt></p>\n<h2 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h2><h3 id=\"查看分支\"><a href=\"#查看分支\" class=\"headerlink\" title=\"查看分支\"></a>查看分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看本地分支</span></span><br><span class=\"line\">$ git branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看远程分支</span></span><br><span class=\"line\">$ git branch -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看本地分支和远程分支</span></span><br><span class=\"line\">$ git branch -a</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/18.png\" alt></p>\n<h3 id=\"新建分支\"><a href=\"#新建分支\" class=\"headerlink\" title=\"新建分支\"></a>新建分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 新建分支</span></span><br><span class=\"line\">$ git branch [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建分支，并切换到该分支</span></span><br><span class=\"line\">$ git checkout -b [branch-name]</span><br></pre></td></tr></table></figure>\n\n<p>git checkout -b [branch-name]<br>等价于<br>git branch [branch-name]<br>git checkout [branch-name]<br><img src=\"/images/git/19.png\" alt></p>\n<h3 id=\"从远程仓库拉取分支\"><a href=\"#从远程仓库拉取分支\" class=\"headerlink\" title=\"从远程仓库拉取分支\"></a>从远程仓库拉取分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># clone下来的新仓库，只有默认分支的代码，如果需要拉取其他分支</span></span><br><span class=\"line\">$ git checkout -b [branch-name] [remote]/[branch]</span><br></pre></td></tr></table></figure>\n\n<p>以程仓库的develop为模板，在本地建立一个dev的分支，并切换到dev分支。<br><img src=\"/images/git/20.png\" alt></p>\n<h3 id=\"本地分支与远程分支建立追踪关系\"><a href=\"#本地分支与远程分支建立追踪关系\" class=\"headerlink\" title=\"本地分支与远程分支建立追踪关系\"></a>本地分支与远程分支建立追踪关系</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch --<span class=\"built_in\">set</span>-upstream-to=origin/[remote branch] [branch]</span><br></pre></td></tr></table></figure>\n\n<p>将本地分支dev与远程分支develop建立连接<br><img src=\"/images/git/21.png\" alt></p>\n<h3 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切换到指定分支，并更新工作区</span></span><br><span class=\"line\">$ git checkout [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到上一个分支</span></span><br><span class=\"line\">$ git checkout -</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/22.png\" alt></p>\n<h3 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -d [branch]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/23.png\" alt></p>\n<h3 id=\"删除远程分支\"><a href=\"#删除远程分支\" class=\"headerlink\" title=\"删除远程分支\"></a>删除远程分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin --delete [remote branch]</span><br></pre></td></tr></table></figure>\n\n<p>删除远程仓库上的develop分支<br><img src=\"/images/git/24.png\" alt></p>\n<h3 id=\"新建远程分支\"><a href=\"#新建远程分支\" class=\"headerlink\" title=\"新建远程分支\"></a>新建远程分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 本地分支与远程分支名称相同</span></span><br><span class=\"line\">$ git push --<span class=\"built_in\">set</span>-upstream origin [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 本地分支与远程分支名称不同</span></span><br><span class=\"line\">$ git push --<span class=\"built_in\">set</span>-upstream origin [branch]:[remote branch]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/24_1.png\" alt></p>\n<h3 id=\"查看分支信息\"><a href=\"#查看分支信息\" class=\"headerlink\" title=\"查看分支信息\"></a>查看分支信息</h3><p>查看git项目是从git的哪个分支上拉下来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote show origin</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/24_2.png\" alt></p>\n<h3 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 合并指定分支到当前分支</span></span><br><span class=\"line\">$ git merge [branch]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/25.png\" alt></p>\n<h2 id=\"储藏\"><a href=\"#储藏\" class=\"headerlink\" title=\"储藏\"></a>储藏</h2><p>git stash命令的作用就是将目前还不想提交的但是已经修改的内容进行保存至堆栈中，后续可以在某个分支上恢复出堆栈中的内容。这也就是说，stash中的内容不仅仅可以恢复到原先开发的分支，也可以恢复到其他任意指定的分支上。git stash作用的范围包括工作区和暂存区中的内容，也就是说没有提交的内容都会保存至堆栈中。</p>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><ul>\n<li>当正在dev分支上开发某个项目，这时项目中出现一个bug，需要紧急修复，但是正在开发的内容只是完成一半，还不想提交，这时可以用git stash命令将修改的内容保存至堆栈区，然后顺利切换到hotfix分支进行bug修复，修复完成后，再次切回到dev分支，从堆栈中恢复刚刚保存的内容。 </li>\n<li>由于疏忽，本应该在dev分支开发的内容，却在master上进行了开发，需要重新切回到dev分支上进行开发，可以用git stash将内容保存至堆栈中，切回到dev分支后，再次恢复内容即可。 </li>\n</ul>\n<h3 id=\"git-stash\"><a href=\"#git-stash\" class=\"headerlink\" title=\"git stash\"></a>git stash</h3><p>能够将所有未提交的修改（工作区和暂存区）保存至堆栈中，用于后续恢复当前工作目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/26.png\" alt></p>\n<h3 id=\"git-stash-save\"><a href=\"#git-stash-save\" class=\"headerlink\" title=\"git stash save\"></a>git stash save</h3><p>等同于git stash，只是多了注释</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash save [message]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/27.png\" alt></p>\n<h3 id=\"git-stash-list\"><a href=\"#git-stash-list\" class=\"headerlink\" title=\"git stash list\"></a>git stash list</h3><p>查看当前stash中的内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash list</span><br></pre></td></tr></table></figure>\n\n<p>可以看到之前保存的2个<br><img src=\"/images/git/28.png\" alt></p>\n<h3 id=\"git-stash-pop\"><a href=\"#git-stash-pop\" class=\"headerlink\" title=\"git stash pop\"></a>git stash pop</h3><p>将当前stash中的内容弹出，并应用到当前分支对应的工作目录上。<br>注：该命令将堆栈中最近保存的内容删除（栈是先进后出） </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash pop</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/29.png\" alt></p>\n<h3 id=\"git-stash-apply\"><a href=\"#git-stash-apply\" class=\"headerlink\" title=\"git stash apply\"></a>git stash apply</h3><p>将堆栈中的内容应用到当前目录，不同于git stash pop，该命令不会将内容从堆栈中删除，也就说该命令能够将堆栈的内容多次应用到工作目录中，适应于多个分支的情况。<br>也可以使用git stash apply + stash名字（如stash@{1}）指定恢复哪个stash到当前的工作目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash apply</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/30.png\" alt></p>\n<h3 id=\"git-stash-drop\"><a href=\"#git-stash-drop\" class=\"headerlink\" title=\"git stash drop\"></a>git stash drop</h3><p>从堆栈中移除某个指定的stash，不指定删除stash@{0}</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash drop [stash-name]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/31.png\" alt></p>\n<h3 id=\"git-stash-clean\"><a href=\"#git-stash-clean\" class=\"headerlink\" title=\"git stash clean\"></a>git stash clean</h3><p>清除堆栈中的所有内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash clear</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-stash-show\"><a href=\"#git-stash-show\" class=\"headerlink\" title=\"git stash show\"></a>git stash show</h3><p>查看堆栈中最新保存的stash和当前目录的差异。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash show</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定的stash和当前目录差异。 </span></span><br><span class=\"line\">$ git stash show stash@&#123;1&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看详细的不同</span></span><br><span class=\"line\">$ git stash show -p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定的stash的差异内容</span></span><br><span class=\"line\">$ git stash show stash@&#123;1&#125; -p</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/32.png\" alt></p>\n<h3 id=\"git-stash-branch\"><a href=\"#git-stash-branch\" class=\"headerlink\" title=\"git stash branch\"></a>git stash branch</h3><p>从最新的stash创建分支，与pop一样，会删除stash。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 根据最近的stash创建</span></span><br><span class=\"line\">$ git stash branch [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 根据指定的stash创建</span></span><br><span class=\"line\">$ git stash branch [branch-name] stash@&#123;1&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/33.png\" alt></p>\n<p>应用场景：当储藏了部分工作，暂时不去理会，继续在当前分支进行开发，后续想将stash中的内容恢复到当前工作目录时，如果是针对同一个文件的修改（即便不是同行数据），那么可能会发生冲突，恢复失败，这里通过创建新的分支来解决。可以用于解决stash中的内容和当前目录的内容发生冲突的情景。<br>发生冲突时，需手动解决冲突。</p>\n<h2 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h2><h3 id=\"列出所有标签\"><a href=\"#列出所有标签\" class=\"headerlink\" title=\"列出所有标签\"></a>列出所有标签</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新建标签\"><a href=\"#新建标签\" class=\"headerlink\" title=\"新建标签\"></a>新建标签</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在当前commit新建一个tag</span></span><br><span class=\"line\">$ git tag [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在指定commit新建一个tag</span></span><br><span class=\"line\">$ git tag [tag] [commit]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/34.png\" alt></p>\n<h3 id=\"查看标签\"><a href=\"#查看标签\" class=\"headerlink\" title=\"查看标签\"></a>查看标签</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git show [tag]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/35.png\" alt></p>\n<h3 id=\"删除本地标签\"><a href=\"#删除本地标签\" class=\"headerlink\" title=\"删除本地标签\"></a>删除本地标签</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -d [tag]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/36.png\" alt></p>\n<h3 id=\"推送标签\"><a href=\"#推送标签\" class=\"headerlink\" title=\"推送标签\"></a>推送标签</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 推送指定标签到远程仓库</span></span><br><span class=\"line\">$ git push [remote] [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送所有标签到远程仓库</span></span><br><span class=\"line\">$ git push [remote] --tags</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/37.png\" alt></p>\n<h3 id=\"查看远程标签\"><a href=\"#查看远程标签\" class=\"headerlink\" title=\"查看远程标签\"></a>查看远程标签</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git ls-remote –-tags [remote]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/38.png\" alt></p>\n<h3 id=\"删除远程标签\"><a href=\"#删除远程标签\" class=\"headerlink\" title=\"删除远程标签\"></a>删除远程标签</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先删除本地标签</span></span><br><span class=\"line\">$ git tag -d [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送到远程仓库</span></span><br><span class=\"line\">$ git push [remote] :refs/tags/[tag]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/39.png\" alt></p>\n<h2 id=\"冲突\"><a href=\"#冲突\" class=\"headerlink\" title=\"冲突\"></a>冲突</h2><h3 id=\"合并分支冲突\"><a href=\"#合并分支冲突\" class=\"headerlink\" title=\"合并分支冲突\"></a>合并分支冲突</h3><p>新建一个feat分支，修改文件并提交<br><img src=\"/images/git/40.png\" alt></p>\n<p>切换到master分支，同样同一个文件同一行并提交<br><img src=\"/images/git/41.png\" alt></p>\n<p>合并分支时，发现合并冲突了<br><img src=\"/images/git/42.png\" alt></p>\n<p>冲突文件：<br><img src=\"/images/git/43.png\" alt></p>\n<p>Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，修改后重新提交。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看分支合并情况</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/git/44.png\" alt></p>\n<h3 id=\"本地仓库与远程仓库冲突\"><a href=\"#本地仓库与远程仓库冲突\" class=\"headerlink\" title=\"本地仓库与远程仓库冲突\"></a>本地仓库与远程仓库冲突</h3><p>如果多人合作，其他人推送了他的提交，刚好你对同一文件做了修改，推送的时候就会有问题。<br>这时候先用git pull把最新的提交抓下来，在本地合并，解决冲突后再推送。</p>\n"},{"title":"设计模式","date":"2019-07-10T03:35:37.000Z","_content":"\n### 软件设计模式的概念和意义\n\n1. 软件设计模式的概念\n软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。其目的是为了提高代码的可重用性、代码的可读性和代码的可靠性。\n\n2. 学习设计模式的意义\n设计模式的本质是面向对象设计原则的实际运用、是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。正确使用设计模式具有以下优点：\n* 可以提高程序员的思维能力、编程能力和设计能力。\n* 使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。\n* 使设计的代码的可重用性高、可读性强、可靠性高、灵活性好、可维护性强。\n当然，软件设计模式只是一个引导。在具体的软件幵发中，必须根据设计的应用系统的特点和要求来恰当选择。对于简单的程序开发，苛能写一个简单的算法要比引入某种设计模式更加容易。但对大项目的开发或者框架设计，用设计模式来组织代码显然更好。\n\n### 软件设计模式的基本要素\n软件设计模式使人们可以更加简单方便地复用成功的设计和体系结构，它通常包含以下几个基本要素：模式名称、别名、动机、问题、解决方案、效果、结构、模式角色、合作关系、实现方法、适用性、已知应用、例程、模式扩展和相关模式等，其中最关键的元素包括以下4个主要部分。\n\n1. 模式名称\n每一个模式都有自己的名称，通常用一两个词来描述，可以根据模式的问题、特点、解决方案、功能和效果来命名。模式名称（PatternName）有助于我们理解和记忆该模式，也方便我们来讨论自己的设计。\n\n2. 问题\n问题（Problem）描述了该模式的应用环境，即何时使用该模式。它解释了设计问题和问题存在的前因后果，以及必须满足的一系列先决条件。\n\n3. 解决方案\n模式问题的解决方案（Solution）包括设计的组成部分、它们之间的相互关系及各自的职责和协作方式。因为模式就像一个模板，可应用于多种不同场合，所以解决方案并不描述一个特定而具体的设计或实现，而是提供实际问题的抽象描述和怎样用一个具有一般意义的元素组合（类或对象的组合）来解决这个问题。\n\n4. 效果\n描述了模式的应用效果以及使用该模式应该权衡的问题，即模式的优缺点。主要是对时间和空间的衡量，以及该模式对系统的灵活性、扩充性、可移植性的影响，也考虑其实现问题。显式地列出这些效果（Consequence）对理解和评价这些模式有很大的帮助。\n\n### 分类和功能\n设计模式有两种分类方法，即根据模式的目的来分和根据模式的作用的范围来分。\n1. 根据目的来分\n  1. 创建型模式：用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。（单例、原型、工厂方法、抽象工厂、建造者）\n  2. 结构型模式：用于描述如何将类或对象按某种布局组成更大的结构。（代理、适配器、桥接、装饰、外观、享元、组合）。\n  3. 行为型模式：用于描述类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，以及怎样分配职责。（模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器）\n\n\n2. 根据作用范围来分\n  1. 类模式：用于处理类与子类之间的关系，这些关系通过继承来建立，是静态的，在编译时刻便确定下来了。（工厂方法、适配器、模板方法、解释器）\n  2. 对象模式：用于处理对象之间的关系，这些关系可以通过组合或聚合来实现，在运行时刻是可以变化的，更具动态性。（除上面4种）\n\n| 范围\\目的 | 创建型模式 | 结构型模式  | 行为型模式\n|:-:|:-:|:-:|:-:|\n| 类模式 | 工厂方法 | （类）适配器 | 模板方式、解释器 |\n| 对象模式 | 单例<br>原型<br>抽象工厂<br>建造者 | 代理<br>（对象）适配器<br>桥接<br>装饰<br>外观<br>享元<br>组合 | 策略<br>命令<br>职责链<br>状态<br>观察者<br>中介者<br>迭代器<br>访问者<br>备忘录 |\n\n3. 23种设计模式的功能\n  1. 单例（Singleton）模式：某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。\n  2. 原型（Prototype）模式：将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。\n  3. 工厂方法（Factory Method）模式：定义一个用于创建产品的接口，由子类决定生产什么产品。\n  4. 抽象工厂（AbstractFactory）模式：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。\n  5. 建造者（Builder）模式：将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。\n  6. 代理（Proxy）模式：为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。\n  7. 适配器（Adapter）模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。\n  8. 桥接（Bridge）模式：将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。\n  9. 装饰（Decorator）模式：动态的给对象增加一些职责，即增加其额外的功能。\n  10. 外观（Facade）模式：为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。\n  11. 享元（Flyweight）模式：运用共享技术来有效地支持大量细粒度对象的复用。\n  12. 组合（Composite）模式：将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。\n  13. 模板方法（TemplateMethod）模式：定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。\n  14. 策略（Strategy）模式：定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户。\n  15. 命令（Command）模式：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。\n  16. 职责链（Chain of Responsibility）模式：把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合。\n  17. 状态（State）模式：允许一个对象在其内部状态发生改变时改变其行为能力。\n  18. 观察者（Observer）模式：多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。\n  19. 中介者（Mediator）模式：定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解。\n  20. 迭代器（Iterator）模式：提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。\n  21. 访问者（Visitor）模式：在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问。\n  22. 备忘录（Memento）模式：在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它。\n  23. 解释器（Interpreter）模式：提供如何定义语言的文法，以及对语言句子的解释方法，即解释器。\n\n### 开闭原则\n\n#### 定义\n**软件实体应当对扩展开放、对修改关闭。**\n\n软件实体：\n1. 项目中划分出的模块\n2. 类与接口\n3. 方法\n\n**开闭原则的含义是：当应用的需求改变时，在不修改软件实体的源代码或者二进制代码的前提下，可以扩展模块的功能，使其满足新的需求。**\n\n#### 作用\n开闭原则是面向对象程序设计的终极目标，它使软件实体拥有一定的适应性和灵活性的同时具备稳定性和延续性。具体来说，其作用如下。\n1. 对软件测试的影响\n软件遵守开闭原则的话，软件测试时只需要对扩展的代码进行测试就可以了，因为原有的测试代码仍然能够正常运行。\n2. 可以提高代码的可复用性\n粒度越小，被复用的可能性就越大；在面向对象的程序设计中，根据原子和抽象编程可以提高代码的可复用性。\n3. 可以提高软件的可维护性\n遵守开闭原则的软件，其稳定性高和延续性强，从而易于扩展和维护。\n\n### 里式替换原则\n\n#### 定义\n**继承必须确保超类所拥有的性质在子类中仍然成立**\n\n#### 作用\n1. 里氏替换原则是实现开闭原则的重要方式之一。\n2. 它克服了继承中重写父类造成的可复用性变差的缺点。\n3. 它是动作正确性的保证。即类的扩展不会给已有的系统引入新的错误，降低了代码出错的可能性。\n\n#### 实现方法\n**里氏替换原则通俗来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。**也就是说：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。\n\n### 依赖倒置原则\n\n#### 定义\n高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。其核心思想是：**要面向接口编程，不要面向实现编程。**\n**依赖倒置原则是实现开闭原则的重要途径之一，它降低了客户与实现模块之间的耦合。**\n由于在软件设计中，细节具有多变性，而抽象层则相对稳定，因此以抽象为基础搭建起来的架构要比以细节为基础搭建起来的架构要稳定得多。这里的抽象指的是接口或者抽象类，而细节是指具体的实现类。\n使用接口或者抽象类的目的是制定好规范和契约，而不去涉及任何具体的操作，把展现细节的任务交给它们的实现类去完成。\n\n#### 作用\n**依赖倒置原则的目的是通过要面向接口的编程来降低类间的耦合性**，所以我们在实际编程中只要遵循以下4点，就能在项目中满足这个规则。\n1. 每个类尽量提供接口或抽象类，或者两者都具备。\n2. 变量的声明类型尽量是接口或者是抽象类。\n3. 任何类都不应该从具体类派生。\n4. 使用继承时尽量遵循里氏替换原则。\n\n### 单一职责原则\n\n#### 定义\n**规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分**\n该原则提出对象不应该承担太多职责，如果一个对象承担了太多的职责，至少存在以下两个缺点：\n1. 一个职责的变化可能会削弱或者抑制这个类实现其他职责的能力；\n2. 当客户端需要该对象的某一个职责时，不得不将其他不需要的职责全都包含进来，从而造成冗余代码或代码的浪费。\n\n#### 优点\n单一职责原则的核心就是控制类的粒度大小、将对象解耦、提高其内聚性。如果遵循单一职责原则将有以下优点。\n1. 降低类的复杂度。一个类只负责一项职责，其逻辑肯定要比负责多项职责简单得多。\n2. 提高类的可读性。复杂性降低，自然其可读性会提高。\n3. 提高系统的可维护性。可读性提高，那自然更容易维护了。\n4. 变更引起的风险降低。变更是必然的，如果单一职责原则遵守得好，当修改一个功能时，可以显著降低对其他功能的影响。\n\n#### 实现方法\n单一职责原则是最简单但又最难运用的原则，需要设计人员发现类的不同职责并将其分离，再封装到不同的类或模块中。而发现类的多重职责需要设计人员具有较强的分析设计能力和相关重构经验。下面以大学学生工作管理程序为例介绍单一职责原则的应用。\n\n### 接口隔离原则\n\n#### 定义\n**客户端不应该被迫依赖于它不使用的方法**\n**一个类对另一个类的依赖应该建立在最小的接口上**\n\n接口隔离原则和单一职责都是为了提高类的内聚性、降低它们之间的耦合性，体现了封装的思想，但两者是不同的：\n1. 单一职责原则注重的是职责，而接口隔离原则注重的是对接口依赖的隔离。\n2. 单一职责原则主要是约束类，它针对的是程序中的实现和细节；接口隔离原则主要约束接口，主要针对抽象和程序整体框架的构建。\n\n#### 优点\n接口隔离原则是为了约束接口、降低类对接口的依赖性，遵循接口隔离原则有以下 5 个优点。\n1. 将臃肿庞大的接口分解为多个粒度小的接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。\n2. 接口隔离提高了系统的内聚性，减少了对外交互，降低了系统的耦合性。\n3. 如果接口的粒度大小定义合理，能够保证系统的稳定性；但是，如果定义过小，则会造成接口数量过多，使设计复杂化；如果定义太大，灵活性降低，无法提供定制服务，给整体项目带来无法预料的风险。\n4. 使用多个专门的接口还能够体现对象的层次，因为可以通过接口的继承，实现对总接口的定义。\n5. 能减少项目工程中的代码冗余。过大的大接口里面通常放置许多不用的方法，当实现这个接口的时候，被迫设计冗余的代码。\n\n#### 实现方法\n\n在具体应用接口隔离原则时，应该根据以下几个规则来衡量。\n1. 接口尽量小，但是要有限度。一个接口只服务于一个子模块或业务逻辑。\n2. 为依赖接口的类定制服务。只提供调用者需要的方法，屏蔽不需要的方法。\n3. 了解环境，拒绝盲从。每个项目或产品都有选定的环境因素，环境不同，接口拆分的标准就不同深入了解业务逻辑。\n4. 提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。\n\n### 迪米特法则\n\n#### 定义\n**只与你的直接朋友交谈，不跟“陌生人”说话。其含义是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。**\n迪米特法则中的“朋友”是指：当前对象本身、当前对象的成员对象、当前对象所创建的对象、当前对象的方法参数等，这些对象同当前对象存在关联、聚合或组合关系，可以直接访问这些对象的方法。\n\n#### 优点\n迪米特法则要求限制软件实体之间通信的宽度和深度，正确使用迪米特法则将有以下两个优点。\n1. 降低了类之间的耦合度，提高了模块的相对独立性。\n2. 由于亲合度降低，从而提高了类的可复用率和系统的扩展性。\n\n但是，过度使用迪米特法则会使系统产生大量的中介类，从而增加系统的复杂性，使模块之间的通信效率降低。所以，在釆用迪米特法则时需要反复权衡，确保高内聚和低耦合的同时，保证系统的结构清晰。\n\n#### 实现方法\n从迪米特法则的定义和特点可知，它强调以下两点：\n1. 从依赖者的角度来说，只依赖应该依赖的对象。\n2. 从被依赖者的角度说，只暴露应该暴露的方法。\n\n所以，在运用迪米特法则时要注意以下 6 点。\n1. 在类的划分上，应该创建弱耦合的类。类与类之间的耦合越弱，就越有利于实现可复用的目标。\n2. 在类的结构设计上，尽量降低类成员的访问权限。\n3. 在类的设计上，优先考虑将一个类设置成不变类。\n4. 在对其他类的引用上，将引用其他对象的次数降到最低。\n5. 不暴露类的属性成员，而应该提供相应的访问器（set 和 get 方法）。\n6. 谨慎使用序列化（Serializable）功能。\n\n### 合成复用原则\n\n#### 定义\n合成复用原则又叫组合/聚合复用原则。它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。**如果要使用继承关系，则必须严格遵循里氏替换原则。**\n合成复用原则同里氏替换原则相辅相成的，两者都是开闭原则的具体实现规范。\n\n#### 重要性\n通常类的复用分为继承复用和合成复用两种，继承复用虽然有简单和易实现的优点，但它也存在以下缺点。\n1. 继承复用破坏了类的封装性。因为继承会将父类的实现细节暴露给子类，父类对子类是透明的，所以这种复用又称为“白箱”复用。\n2. 子类与父类的耦合度高。父类的实现的任何改变都会导致子类的实现发生变化，这不利于类的扩展与维护。\n3. 它限制了复用的灵活性。从父类继承而来的实现是静态的，在编译时已经定义，所以在运行时不可能发生变化。\n\n采用组合或聚合复用时，可以将已有对象纳入新对象中，使之成为新对象的一部分，新对象可以调用已有对象的功能，它有以下优点。\n1. 它维持了类的封装性。因为成分对象的内部细节是新对象看不见的，所以这种复用又称为“黑箱”复用。\n2. 新旧类之间的耦合度低。这种复用所需的依赖较少，新对象存取成分对象的唯一方法是通过成分对象的接口。\n3. 复用的灵活性高。这种复用可以在运行时动态进行，新对象可以动态地引用与成分对象类型相同的对象。\n\n#### 实现方法\n合成复用原则是通过将已有的对象纳入新对象中，作为新对象的成员对象来实现的，新对象可以调用已有对象的功能，从而达到复用。\n\n### 七种设计原则总结。\n**开闭原则是总纲，它告诉我们要对扩展开放，对修改关闭；**\n**里氏替换原则告诉我们不要破坏继承体系；**\n**依赖倒置原则告诉我们要面向接口编程；**\n**单一职责原则告诉我们实现类要职责单一；**\n**接口隔离原则告诉我们在设计接口的时候要精简单一；**\n**迪米特法则告诉我们要降低耦合度；**\n**合成复用原则告诉我们要优先使用组合或者聚合关系复用，少用继承关系复用。**","source":"_posts/design-pattern.md","raw":"---\ntitle: 设计模式\ndate: 2019-07-10 11:35:37\ntags: \n- java\ncategories: \n- java\n---\n\n### 软件设计模式的概念和意义\n\n1. 软件设计模式的概念\n软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。其目的是为了提高代码的可重用性、代码的可读性和代码的可靠性。\n\n2. 学习设计模式的意义\n设计模式的本质是面向对象设计原则的实际运用、是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。正确使用设计模式具有以下优点：\n* 可以提高程序员的思维能力、编程能力和设计能力。\n* 使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。\n* 使设计的代码的可重用性高、可读性强、可靠性高、灵活性好、可维护性强。\n当然，软件设计模式只是一个引导。在具体的软件幵发中，必须根据设计的应用系统的特点和要求来恰当选择。对于简单的程序开发，苛能写一个简单的算法要比引入某种设计模式更加容易。但对大项目的开发或者框架设计，用设计模式来组织代码显然更好。\n\n### 软件设计模式的基本要素\n软件设计模式使人们可以更加简单方便地复用成功的设计和体系结构，它通常包含以下几个基本要素：模式名称、别名、动机、问题、解决方案、效果、结构、模式角色、合作关系、实现方法、适用性、已知应用、例程、模式扩展和相关模式等，其中最关键的元素包括以下4个主要部分。\n\n1. 模式名称\n每一个模式都有自己的名称，通常用一两个词来描述，可以根据模式的问题、特点、解决方案、功能和效果来命名。模式名称（PatternName）有助于我们理解和记忆该模式，也方便我们来讨论自己的设计。\n\n2. 问题\n问题（Problem）描述了该模式的应用环境，即何时使用该模式。它解释了设计问题和问题存在的前因后果，以及必须满足的一系列先决条件。\n\n3. 解决方案\n模式问题的解决方案（Solution）包括设计的组成部分、它们之间的相互关系及各自的职责和协作方式。因为模式就像一个模板，可应用于多种不同场合，所以解决方案并不描述一个特定而具体的设计或实现，而是提供实际问题的抽象描述和怎样用一个具有一般意义的元素组合（类或对象的组合）来解决这个问题。\n\n4. 效果\n描述了模式的应用效果以及使用该模式应该权衡的问题，即模式的优缺点。主要是对时间和空间的衡量，以及该模式对系统的灵活性、扩充性、可移植性的影响，也考虑其实现问题。显式地列出这些效果（Consequence）对理解和评价这些模式有很大的帮助。\n\n### 分类和功能\n设计模式有两种分类方法，即根据模式的目的来分和根据模式的作用的范围来分。\n1. 根据目的来分\n  1. 创建型模式：用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。（单例、原型、工厂方法、抽象工厂、建造者）\n  2. 结构型模式：用于描述如何将类或对象按某种布局组成更大的结构。（代理、适配器、桥接、装饰、外观、享元、组合）。\n  3. 行为型模式：用于描述类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，以及怎样分配职责。（模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器）\n\n\n2. 根据作用范围来分\n  1. 类模式：用于处理类与子类之间的关系，这些关系通过继承来建立，是静态的，在编译时刻便确定下来了。（工厂方法、适配器、模板方法、解释器）\n  2. 对象模式：用于处理对象之间的关系，这些关系可以通过组合或聚合来实现，在运行时刻是可以变化的，更具动态性。（除上面4种）\n\n| 范围\\目的 | 创建型模式 | 结构型模式  | 行为型模式\n|:-:|:-:|:-:|:-:|\n| 类模式 | 工厂方法 | （类）适配器 | 模板方式、解释器 |\n| 对象模式 | 单例<br>原型<br>抽象工厂<br>建造者 | 代理<br>（对象）适配器<br>桥接<br>装饰<br>外观<br>享元<br>组合 | 策略<br>命令<br>职责链<br>状态<br>观察者<br>中介者<br>迭代器<br>访问者<br>备忘录 |\n\n3. 23种设计模式的功能\n  1. 单例（Singleton）模式：某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。\n  2. 原型（Prototype）模式：将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。\n  3. 工厂方法（Factory Method）模式：定义一个用于创建产品的接口，由子类决定生产什么产品。\n  4. 抽象工厂（AbstractFactory）模式：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。\n  5. 建造者（Builder）模式：将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。\n  6. 代理（Proxy）模式：为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。\n  7. 适配器（Adapter）模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。\n  8. 桥接（Bridge）模式：将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。\n  9. 装饰（Decorator）模式：动态的给对象增加一些职责，即增加其额外的功能。\n  10. 外观（Facade）模式：为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。\n  11. 享元（Flyweight）模式：运用共享技术来有效地支持大量细粒度对象的复用。\n  12. 组合（Composite）模式：将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。\n  13. 模板方法（TemplateMethod）模式：定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。\n  14. 策略（Strategy）模式：定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户。\n  15. 命令（Command）模式：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。\n  16. 职责链（Chain of Responsibility）模式：把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合。\n  17. 状态（State）模式：允许一个对象在其内部状态发生改变时改变其行为能力。\n  18. 观察者（Observer）模式：多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。\n  19. 中介者（Mediator）模式：定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解。\n  20. 迭代器（Iterator）模式：提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。\n  21. 访问者（Visitor）模式：在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问。\n  22. 备忘录（Memento）模式：在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它。\n  23. 解释器（Interpreter）模式：提供如何定义语言的文法，以及对语言句子的解释方法，即解释器。\n\n### 开闭原则\n\n#### 定义\n**软件实体应当对扩展开放、对修改关闭。**\n\n软件实体：\n1. 项目中划分出的模块\n2. 类与接口\n3. 方法\n\n**开闭原则的含义是：当应用的需求改变时，在不修改软件实体的源代码或者二进制代码的前提下，可以扩展模块的功能，使其满足新的需求。**\n\n#### 作用\n开闭原则是面向对象程序设计的终极目标，它使软件实体拥有一定的适应性和灵活性的同时具备稳定性和延续性。具体来说，其作用如下。\n1. 对软件测试的影响\n软件遵守开闭原则的话，软件测试时只需要对扩展的代码进行测试就可以了，因为原有的测试代码仍然能够正常运行。\n2. 可以提高代码的可复用性\n粒度越小，被复用的可能性就越大；在面向对象的程序设计中，根据原子和抽象编程可以提高代码的可复用性。\n3. 可以提高软件的可维护性\n遵守开闭原则的软件，其稳定性高和延续性强，从而易于扩展和维护。\n\n### 里式替换原则\n\n#### 定义\n**继承必须确保超类所拥有的性质在子类中仍然成立**\n\n#### 作用\n1. 里氏替换原则是实现开闭原则的重要方式之一。\n2. 它克服了继承中重写父类造成的可复用性变差的缺点。\n3. 它是动作正确性的保证。即类的扩展不会给已有的系统引入新的错误，降低了代码出错的可能性。\n\n#### 实现方法\n**里氏替换原则通俗来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。**也就是说：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。\n\n### 依赖倒置原则\n\n#### 定义\n高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。其核心思想是：**要面向接口编程，不要面向实现编程。**\n**依赖倒置原则是实现开闭原则的重要途径之一，它降低了客户与实现模块之间的耦合。**\n由于在软件设计中，细节具有多变性，而抽象层则相对稳定，因此以抽象为基础搭建起来的架构要比以细节为基础搭建起来的架构要稳定得多。这里的抽象指的是接口或者抽象类，而细节是指具体的实现类。\n使用接口或者抽象类的目的是制定好规范和契约，而不去涉及任何具体的操作，把展现细节的任务交给它们的实现类去完成。\n\n#### 作用\n**依赖倒置原则的目的是通过要面向接口的编程来降低类间的耦合性**，所以我们在实际编程中只要遵循以下4点，就能在项目中满足这个规则。\n1. 每个类尽量提供接口或抽象类，或者两者都具备。\n2. 变量的声明类型尽量是接口或者是抽象类。\n3. 任何类都不应该从具体类派生。\n4. 使用继承时尽量遵循里氏替换原则。\n\n### 单一职责原则\n\n#### 定义\n**规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分**\n该原则提出对象不应该承担太多职责，如果一个对象承担了太多的职责，至少存在以下两个缺点：\n1. 一个职责的变化可能会削弱或者抑制这个类实现其他职责的能力；\n2. 当客户端需要该对象的某一个职责时，不得不将其他不需要的职责全都包含进来，从而造成冗余代码或代码的浪费。\n\n#### 优点\n单一职责原则的核心就是控制类的粒度大小、将对象解耦、提高其内聚性。如果遵循单一职责原则将有以下优点。\n1. 降低类的复杂度。一个类只负责一项职责，其逻辑肯定要比负责多项职责简单得多。\n2. 提高类的可读性。复杂性降低，自然其可读性会提高。\n3. 提高系统的可维护性。可读性提高，那自然更容易维护了。\n4. 变更引起的风险降低。变更是必然的，如果单一职责原则遵守得好，当修改一个功能时，可以显著降低对其他功能的影响。\n\n#### 实现方法\n单一职责原则是最简单但又最难运用的原则，需要设计人员发现类的不同职责并将其分离，再封装到不同的类或模块中。而发现类的多重职责需要设计人员具有较强的分析设计能力和相关重构经验。下面以大学学生工作管理程序为例介绍单一职责原则的应用。\n\n### 接口隔离原则\n\n#### 定义\n**客户端不应该被迫依赖于它不使用的方法**\n**一个类对另一个类的依赖应该建立在最小的接口上**\n\n接口隔离原则和单一职责都是为了提高类的内聚性、降低它们之间的耦合性，体现了封装的思想，但两者是不同的：\n1. 单一职责原则注重的是职责，而接口隔离原则注重的是对接口依赖的隔离。\n2. 单一职责原则主要是约束类，它针对的是程序中的实现和细节；接口隔离原则主要约束接口，主要针对抽象和程序整体框架的构建。\n\n#### 优点\n接口隔离原则是为了约束接口、降低类对接口的依赖性，遵循接口隔离原则有以下 5 个优点。\n1. 将臃肿庞大的接口分解为多个粒度小的接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。\n2. 接口隔离提高了系统的内聚性，减少了对外交互，降低了系统的耦合性。\n3. 如果接口的粒度大小定义合理，能够保证系统的稳定性；但是，如果定义过小，则会造成接口数量过多，使设计复杂化；如果定义太大，灵活性降低，无法提供定制服务，给整体项目带来无法预料的风险。\n4. 使用多个专门的接口还能够体现对象的层次，因为可以通过接口的继承，实现对总接口的定义。\n5. 能减少项目工程中的代码冗余。过大的大接口里面通常放置许多不用的方法，当实现这个接口的时候，被迫设计冗余的代码。\n\n#### 实现方法\n\n在具体应用接口隔离原则时，应该根据以下几个规则来衡量。\n1. 接口尽量小，但是要有限度。一个接口只服务于一个子模块或业务逻辑。\n2. 为依赖接口的类定制服务。只提供调用者需要的方法，屏蔽不需要的方法。\n3. 了解环境，拒绝盲从。每个项目或产品都有选定的环境因素，环境不同，接口拆分的标准就不同深入了解业务逻辑。\n4. 提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。\n\n### 迪米特法则\n\n#### 定义\n**只与你的直接朋友交谈，不跟“陌生人”说话。其含义是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。**\n迪米特法则中的“朋友”是指：当前对象本身、当前对象的成员对象、当前对象所创建的对象、当前对象的方法参数等，这些对象同当前对象存在关联、聚合或组合关系，可以直接访问这些对象的方法。\n\n#### 优点\n迪米特法则要求限制软件实体之间通信的宽度和深度，正确使用迪米特法则将有以下两个优点。\n1. 降低了类之间的耦合度，提高了模块的相对独立性。\n2. 由于亲合度降低，从而提高了类的可复用率和系统的扩展性。\n\n但是，过度使用迪米特法则会使系统产生大量的中介类，从而增加系统的复杂性，使模块之间的通信效率降低。所以，在釆用迪米特法则时需要反复权衡，确保高内聚和低耦合的同时，保证系统的结构清晰。\n\n#### 实现方法\n从迪米特法则的定义和特点可知，它强调以下两点：\n1. 从依赖者的角度来说，只依赖应该依赖的对象。\n2. 从被依赖者的角度说，只暴露应该暴露的方法。\n\n所以，在运用迪米特法则时要注意以下 6 点。\n1. 在类的划分上，应该创建弱耦合的类。类与类之间的耦合越弱，就越有利于实现可复用的目标。\n2. 在类的结构设计上，尽量降低类成员的访问权限。\n3. 在类的设计上，优先考虑将一个类设置成不变类。\n4. 在对其他类的引用上，将引用其他对象的次数降到最低。\n5. 不暴露类的属性成员，而应该提供相应的访问器（set 和 get 方法）。\n6. 谨慎使用序列化（Serializable）功能。\n\n### 合成复用原则\n\n#### 定义\n合成复用原则又叫组合/聚合复用原则。它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。**如果要使用继承关系，则必须严格遵循里氏替换原则。**\n合成复用原则同里氏替换原则相辅相成的，两者都是开闭原则的具体实现规范。\n\n#### 重要性\n通常类的复用分为继承复用和合成复用两种，继承复用虽然有简单和易实现的优点，但它也存在以下缺点。\n1. 继承复用破坏了类的封装性。因为继承会将父类的实现细节暴露给子类，父类对子类是透明的，所以这种复用又称为“白箱”复用。\n2. 子类与父类的耦合度高。父类的实现的任何改变都会导致子类的实现发生变化，这不利于类的扩展与维护。\n3. 它限制了复用的灵活性。从父类继承而来的实现是静态的，在编译时已经定义，所以在运行时不可能发生变化。\n\n采用组合或聚合复用时，可以将已有对象纳入新对象中，使之成为新对象的一部分，新对象可以调用已有对象的功能，它有以下优点。\n1. 它维持了类的封装性。因为成分对象的内部细节是新对象看不见的，所以这种复用又称为“黑箱”复用。\n2. 新旧类之间的耦合度低。这种复用所需的依赖较少，新对象存取成分对象的唯一方法是通过成分对象的接口。\n3. 复用的灵活性高。这种复用可以在运行时动态进行，新对象可以动态地引用与成分对象类型相同的对象。\n\n#### 实现方法\n合成复用原则是通过将已有的对象纳入新对象中，作为新对象的成员对象来实现的，新对象可以调用已有对象的功能，从而达到复用。\n\n### 七种设计原则总结。\n**开闭原则是总纲，它告诉我们要对扩展开放，对修改关闭；**\n**里氏替换原则告诉我们不要破坏继承体系；**\n**依赖倒置原则告诉我们要面向接口编程；**\n**单一职责原则告诉我们实现类要职责单一；**\n**接口隔离原则告诉我们在设计接口的时候要精简单一；**\n**迪米特法则告诉我们要降低耦合度；**\n**合成复用原则告诉我们要优先使用组合或者聚合关系复用，少用继承关系复用。**","slug":"design-pattern","published":1,"updated":"2019-08-06T02:49:47.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0rqqm21002yugqsw178c5nw","content":"<h3 id=\"软件设计模式的概念和意义\"><a href=\"#软件设计模式的概念和意义\" class=\"headerlink\" title=\"软件设计模式的概念和意义\"></a>软件设计模式的概念和意义</h3><ol>\n<li><p>软件设计模式的概念<br>软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。其目的是为了提高代码的可重用性、代码的可读性和代码的可靠性。</p>\n</li>\n<li><p>学习设计模式的意义<br>设计模式的本质是面向对象设计原则的实际运用、是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。正确使用设计模式具有以下优点：</p>\n</li>\n</ol>\n<ul>\n<li>可以提高程序员的思维能力、编程能力和设计能力。</li>\n<li>使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。</li>\n<li>使设计的代码的可重用性高、可读性强、可靠性高、灵活性好、可维护性强。<br>当然，软件设计模式只是一个引导。在具体的软件幵发中，必须根据设计的应用系统的特点和要求来恰当选择。对于简单的程序开发，苛能写一个简单的算法要比引入某种设计模式更加容易。但对大项目的开发或者框架设计，用设计模式来组织代码显然更好。</li>\n</ul>\n<h3 id=\"软件设计模式的基本要素\"><a href=\"#软件设计模式的基本要素\" class=\"headerlink\" title=\"软件设计模式的基本要素\"></a>软件设计模式的基本要素</h3><p>软件设计模式使人们可以更加简单方便地复用成功的设计和体系结构，它通常包含以下几个基本要素：模式名称、别名、动机、问题、解决方案、效果、结构、模式角色、合作关系、实现方法、适用性、已知应用、例程、模式扩展和相关模式等，其中最关键的元素包括以下4个主要部分。</p>\n<ol>\n<li><p>模式名称<br>每一个模式都有自己的名称，通常用一两个词来描述，可以根据模式的问题、特点、解决方案、功能和效果来命名。模式名称（PatternName）有助于我们理解和记忆该模式，也方便我们来讨论自己的设计。</p>\n</li>\n<li><p>问题<br>问题（Problem）描述了该模式的应用环境，即何时使用该模式。它解释了设计问题和问题存在的前因后果，以及必须满足的一系列先决条件。</p>\n</li>\n<li><p>解决方案<br>模式问题的解决方案（Solution）包括设计的组成部分、它们之间的相互关系及各自的职责和协作方式。因为模式就像一个模板，可应用于多种不同场合，所以解决方案并不描述一个特定而具体的设计或实现，而是提供实际问题的抽象描述和怎样用一个具有一般意义的元素组合（类或对象的组合）来解决这个问题。</p>\n</li>\n<li><p>效果<br>描述了模式的应用效果以及使用该模式应该权衡的问题，即模式的优缺点。主要是对时间和空间的衡量，以及该模式对系统的灵活性、扩充性、可移植性的影响，也考虑其实现问题。显式地列出这些效果（Consequence）对理解和评价这些模式有很大的帮助。</p>\n</li>\n</ol>\n<h3 id=\"分类和功能\"><a href=\"#分类和功能\" class=\"headerlink\" title=\"分类和功能\"></a>分类和功能</h3><p>设计模式有两种分类方法，即根据模式的目的来分和根据模式的作用的范围来分。</p>\n<ol>\n<li>根据目的来分<ol>\n<li>创建型模式：用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。（单例、原型、工厂方法、抽象工厂、建造者）</li>\n<li>结构型模式：用于描述如何将类或对象按某种布局组成更大的结构。（代理、适配器、桥接、装饰、外观、享元、组合）。</li>\n<li>行为型模式：用于描述类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，以及怎样分配职责。（模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器）</li>\n</ol>\n</li>\n</ol>\n<ol start=\"2\">\n<li>根据作用范围来分<ol>\n<li>类模式：用于处理类与子类之间的关系，这些关系通过继承来建立，是静态的，在编译时刻便确定下来了。（工厂方法、适配器、模板方法、解释器）</li>\n<li>对象模式：用于处理对象之间的关系，这些关系可以通过组合或聚合来实现，在运行时刻是可以变化的，更具动态性。（除上面4种）</li>\n</ol>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">范围\\目的</th>\n<th align=\"center\">创建型模式</th>\n<th align=\"center\">结构型模式</th>\n<th align=\"center\">行为型模式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">类模式</td>\n<td align=\"center\">工厂方法</td>\n<td align=\"center\">（类）适配器</td>\n<td align=\"center\">模板方式、解释器</td>\n</tr>\n<tr>\n<td align=\"center\">对象模式</td>\n<td align=\"center\">单例<br>原型<br>抽象工厂<br>建造者</td>\n<td align=\"center\">代理<br>（对象）适配器<br>桥接<br>装饰<br>外观<br>享元<br>组合</td>\n<td align=\"center\">策略<br>命令<br>职责链<br>状态<br>观察者<br>中介者<br>迭代器<br>访问者<br>备忘录</td>\n</tr>\n</tbody></table>\n<ol start=\"3\">\n<li>23种设计模式的功能<ol>\n<li>单例（Singleton）模式：某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。</li>\n<li>原型（Prototype）模式：将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。</li>\n<li>工厂方法（Factory Method）模式：定义一个用于创建产品的接口，由子类决定生产什么产品。</li>\n<li>抽象工厂（AbstractFactory）模式：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。</li>\n<li>建造者（Builder）模式：将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。</li>\n<li>代理（Proxy）模式：为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。</li>\n<li>适配器（Adapter）模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。</li>\n<li>桥接（Bridge）模式：将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。</li>\n<li>装饰（Decorator）模式：动态的给对象增加一些职责，即增加其额外的功能。</li>\n<li>外观（Facade）模式：为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。</li>\n<li>享元（Flyweight）模式：运用共享技术来有效地支持大量细粒度对象的复用。</li>\n<li>组合（Composite）模式：将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。</li>\n<li>模板方法（TemplateMethod）模式：定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。</li>\n<li>策略（Strategy）模式：定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户。</li>\n<li>命令（Command）模式：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。</li>\n<li>职责链（Chain of Responsibility）模式：把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合。</li>\n<li>状态（State）模式：允许一个对象在其内部状态发生改变时改变其行为能力。</li>\n<li>观察者（Observer）模式：多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。</li>\n<li>中介者（Mediator）模式：定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解。</li>\n<li>迭代器（Iterator）模式：提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。</li>\n<li>访问者（Visitor）模式：在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问。</li>\n<li>备忘录（Memento）模式：在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它。</li>\n<li>解释器（Interpreter）模式：提供如何定义语言的文法，以及对语言句子的解释方法，即解释器。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"开闭原则\"><a href=\"#开闭原则\" class=\"headerlink\" title=\"开闭原则\"></a>开闭原则</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p><strong>软件实体应当对扩展开放、对修改关闭。</strong></p>\n<p>软件实体：</p>\n<ol>\n<li>项目中划分出的模块</li>\n<li>类与接口</li>\n<li>方法</li>\n</ol>\n<p><strong>开闭原则的含义是：当应用的需求改变时，在不修改软件实体的源代码或者二进制代码的前提下，可以扩展模块的功能，使其满足新的需求。</strong></p>\n<h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p>开闭原则是面向对象程序设计的终极目标，它使软件实体拥有一定的适应性和灵活性的同时具备稳定性和延续性。具体来说，其作用如下。</p>\n<ol>\n<li>对软件测试的影响<br>软件遵守开闭原则的话，软件测试时只需要对扩展的代码进行测试就可以了，因为原有的测试代码仍然能够正常运行。</li>\n<li>可以提高代码的可复用性<br>粒度越小，被复用的可能性就越大；在面向对象的程序设计中，根据原子和抽象编程可以提高代码的可复用性。</li>\n<li>可以提高软件的可维护性<br>遵守开闭原则的软件，其稳定性高和延续性强，从而易于扩展和维护。</li>\n</ol>\n<h3 id=\"里式替换原则\"><a href=\"#里式替换原则\" class=\"headerlink\" title=\"里式替换原则\"></a>里式替换原则</h3><h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p><strong>继承必须确保超类所拥有的性质在子类中仍然成立</strong></p>\n<h4 id=\"作用-1\"><a href=\"#作用-1\" class=\"headerlink\" title=\"作用\"></a>作用</h4><ol>\n<li>里氏替换原则是实现开闭原则的重要方式之一。</li>\n<li>它克服了继承中重写父类造成的可复用性变差的缺点。</li>\n<li>它是动作正确性的保证。即类的扩展不会给已有的系统引入新的错误，降低了代码出错的可能性。</li>\n</ol>\n<h4 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h4><p><strong>里氏替换原则通俗来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。</strong>也就是说：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。</p>\n<h3 id=\"依赖倒置原则\"><a href=\"#依赖倒置原则\" class=\"headerlink\" title=\"依赖倒置原则\"></a>依赖倒置原则</h3><h4 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。其核心思想是：<strong>要面向接口编程，不要面向实现编程。</strong><br><strong>依赖倒置原则是实现开闭原则的重要途径之一，它降低了客户与实现模块之间的耦合。</strong><br>由于在软件设计中，细节具有多变性，而抽象层则相对稳定，因此以抽象为基础搭建起来的架构要比以细节为基础搭建起来的架构要稳定得多。这里的抽象指的是接口或者抽象类，而细节是指具体的实现类。<br>使用接口或者抽象类的目的是制定好规范和契约，而不去涉及任何具体的操作，把展现细节的任务交给它们的实现类去完成。</p>\n<h4 id=\"作用-2\"><a href=\"#作用-2\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p><strong>依赖倒置原则的目的是通过要面向接口的编程来降低类间的耦合性</strong>，所以我们在实际编程中只要遵循以下4点，就能在项目中满足这个规则。</p>\n<ol>\n<li>每个类尽量提供接口或抽象类，或者两者都具备。</li>\n<li>变量的声明类型尽量是接口或者是抽象类。</li>\n<li>任何类都不应该从具体类派生。</li>\n<li>使用继承时尽量遵循里氏替换原则。</li>\n</ol>\n<h3 id=\"单一职责原则\"><a href=\"#单一职责原则\" class=\"headerlink\" title=\"单一职责原则\"></a>单一职责原则</h3><h4 id=\"定义-3\"><a href=\"#定义-3\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p><strong>规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分</strong><br>该原则提出对象不应该承担太多职责，如果一个对象承担了太多的职责，至少存在以下两个缺点：</p>\n<ol>\n<li>一个职责的变化可能会削弱或者抑制这个类实现其他职责的能力；</li>\n<li>当客户端需要该对象的某一个职责时，不得不将其他不需要的职责全都包含进来，从而造成冗余代码或代码的浪费。</li>\n</ol>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><p>单一职责原则的核心就是控制类的粒度大小、将对象解耦、提高其内聚性。如果遵循单一职责原则将有以下优点。</p>\n<ol>\n<li>降低类的复杂度。一个类只负责一项职责，其逻辑肯定要比负责多项职责简单得多。</li>\n<li>提高类的可读性。复杂性降低，自然其可读性会提高。</li>\n<li>提高系统的可维护性。可读性提高，那自然更容易维护了。</li>\n<li>变更引起的风险降低。变更是必然的，如果单一职责原则遵守得好，当修改一个功能时，可以显著降低对其他功能的影响。</li>\n</ol>\n<h4 id=\"实现方法-1\"><a href=\"#实现方法-1\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h4><p>单一职责原则是最简单但又最难运用的原则，需要设计人员发现类的不同职责并将其分离，再封装到不同的类或模块中。而发现类的多重职责需要设计人员具有较强的分析设计能力和相关重构经验。下面以大学学生工作管理程序为例介绍单一职责原则的应用。</p>\n<h3 id=\"接口隔离原则\"><a href=\"#接口隔离原则\" class=\"headerlink\" title=\"接口隔离原则\"></a>接口隔离原则</h3><h4 id=\"定义-4\"><a href=\"#定义-4\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p><strong>客户端不应该被迫依赖于它不使用的方法</strong><br><strong>一个类对另一个类的依赖应该建立在最小的接口上</strong></p>\n<p>接口隔离原则和单一职责都是为了提高类的内聚性、降低它们之间的耦合性，体现了封装的思想，但两者是不同的：</p>\n<ol>\n<li>单一职责原则注重的是职责，而接口隔离原则注重的是对接口依赖的隔离。</li>\n<li>单一职责原则主要是约束类，它针对的是程序中的实现和细节；接口隔离原则主要约束接口，主要针对抽象和程序整体框架的构建。</li>\n</ol>\n<h4 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h4><p>接口隔离原则是为了约束接口、降低类对接口的依赖性，遵循接口隔离原则有以下 5 个优点。</p>\n<ol>\n<li>将臃肿庞大的接口分解为多个粒度小的接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。</li>\n<li>接口隔离提高了系统的内聚性，减少了对外交互，降低了系统的耦合性。</li>\n<li>如果接口的粒度大小定义合理，能够保证系统的稳定性；但是，如果定义过小，则会造成接口数量过多，使设计复杂化；如果定义太大，灵活性降低，无法提供定制服务，给整体项目带来无法预料的风险。</li>\n<li>使用多个专门的接口还能够体现对象的层次，因为可以通过接口的继承，实现对总接口的定义。</li>\n<li>能减少项目工程中的代码冗余。过大的大接口里面通常放置许多不用的方法，当实现这个接口的时候，被迫设计冗余的代码。</li>\n</ol>\n<h4 id=\"实现方法-2\"><a href=\"#实现方法-2\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h4><p>在具体应用接口隔离原则时，应该根据以下几个规则来衡量。</p>\n<ol>\n<li>接口尽量小，但是要有限度。一个接口只服务于一个子模块或业务逻辑。</li>\n<li>为依赖接口的类定制服务。只提供调用者需要的方法，屏蔽不需要的方法。</li>\n<li>了解环境，拒绝盲从。每个项目或产品都有选定的环境因素，环境不同，接口拆分的标准就不同深入了解业务逻辑。</li>\n<li>提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。</li>\n</ol>\n<h3 id=\"迪米特法则\"><a href=\"#迪米特法则\" class=\"headerlink\" title=\"迪米特法则\"></a>迪米特法则</h3><h4 id=\"定义-5\"><a href=\"#定义-5\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p><strong>只与你的直接朋友交谈，不跟“陌生人”说话。其含义是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。</strong><br>迪米特法则中的“朋友”是指：当前对象本身、当前对象的成员对象、当前对象所创建的对象、当前对象的方法参数等，这些对象同当前对象存在关联、聚合或组合关系，可以直接访问这些对象的方法。</p>\n<h4 id=\"优点-2\"><a href=\"#优点-2\" class=\"headerlink\" title=\"优点\"></a>优点</h4><p>迪米特法则要求限制软件实体之间通信的宽度和深度，正确使用迪米特法则将有以下两个优点。</p>\n<ol>\n<li>降低了类之间的耦合度，提高了模块的相对独立性。</li>\n<li>由于亲合度降低，从而提高了类的可复用率和系统的扩展性。</li>\n</ol>\n<p>但是，过度使用迪米特法则会使系统产生大量的中介类，从而增加系统的复杂性，使模块之间的通信效率降低。所以，在釆用迪米特法则时需要反复权衡，确保高内聚和低耦合的同时，保证系统的结构清晰。</p>\n<h4 id=\"实现方法-3\"><a href=\"#实现方法-3\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h4><p>从迪米特法则的定义和特点可知，它强调以下两点：</p>\n<ol>\n<li>从依赖者的角度来说，只依赖应该依赖的对象。</li>\n<li>从被依赖者的角度说，只暴露应该暴露的方法。</li>\n</ol>\n<p>所以，在运用迪米特法则时要注意以下 6 点。</p>\n<ol>\n<li>在类的划分上，应该创建弱耦合的类。类与类之间的耦合越弱，就越有利于实现可复用的目标。</li>\n<li>在类的结构设计上，尽量降低类成员的访问权限。</li>\n<li>在类的设计上，优先考虑将一个类设置成不变类。</li>\n<li>在对其他类的引用上，将引用其他对象的次数降到最低。</li>\n<li>不暴露类的属性成员，而应该提供相应的访问器（set 和 get 方法）。</li>\n<li>谨慎使用序列化（Serializable）功能。</li>\n</ol>\n<h3 id=\"合成复用原则\"><a href=\"#合成复用原则\" class=\"headerlink\" title=\"合成复用原则\"></a>合成复用原则</h3><h4 id=\"定义-6\"><a href=\"#定义-6\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>合成复用原则又叫组合/聚合复用原则。它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。<strong>如果要使用继承关系，则必须严格遵循里氏替换原则。</strong><br>合成复用原则同里氏替换原则相辅相成的，两者都是开闭原则的具体实现规范。</p>\n<h4 id=\"重要性\"><a href=\"#重要性\" class=\"headerlink\" title=\"重要性\"></a>重要性</h4><p>通常类的复用分为继承复用和合成复用两种，继承复用虽然有简单和易实现的优点，但它也存在以下缺点。</p>\n<ol>\n<li>继承复用破坏了类的封装性。因为继承会将父类的实现细节暴露给子类，父类对子类是透明的，所以这种复用又称为“白箱”复用。</li>\n<li>子类与父类的耦合度高。父类的实现的任何改变都会导致子类的实现发生变化，这不利于类的扩展与维护。</li>\n<li>它限制了复用的灵活性。从父类继承而来的实现是静态的，在编译时已经定义，所以在运行时不可能发生变化。</li>\n</ol>\n<p>采用组合或聚合复用时，可以将已有对象纳入新对象中，使之成为新对象的一部分，新对象可以调用已有对象的功能，它有以下优点。</p>\n<ol>\n<li>它维持了类的封装性。因为成分对象的内部细节是新对象看不见的，所以这种复用又称为“黑箱”复用。</li>\n<li>新旧类之间的耦合度低。这种复用所需的依赖较少，新对象存取成分对象的唯一方法是通过成分对象的接口。</li>\n<li>复用的灵活性高。这种复用可以在运行时动态进行，新对象可以动态地引用与成分对象类型相同的对象。</li>\n</ol>\n<h4 id=\"实现方法-4\"><a href=\"#实现方法-4\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h4><p>合成复用原则是通过将已有的对象纳入新对象中，作为新对象的成员对象来实现的，新对象可以调用已有对象的功能，从而达到复用。</p>\n<h3 id=\"七种设计原则总结。\"><a href=\"#七种设计原则总结。\" class=\"headerlink\" title=\"七种设计原则总结。\"></a>七种设计原则总结。</h3><p><strong>开闭原则是总纲，它告诉我们要对扩展开放，对修改关闭；</strong><br><strong>里氏替换原则告诉我们不要破坏继承体系；</strong><br><strong>依赖倒置原则告诉我们要面向接口编程；</strong><br><strong>单一职责原则告诉我们实现类要职责单一；</strong><br><strong>接口隔离原则告诉我们在设计接口的时候要精简单一；</strong><br><strong>迪米特法则告诉我们要降低耦合度；</strong><br><strong>合成复用原则告诉我们要优先使用组合或者聚合关系复用，少用继承关系复用。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"软件设计模式的概念和意义\"><a href=\"#软件设计模式的概念和意义\" class=\"headerlink\" title=\"软件设计模式的概念和意义\"></a>软件设计模式的概念和意义</h3><ol>\n<li><p>软件设计模式的概念<br>软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。其目的是为了提高代码的可重用性、代码的可读性和代码的可靠性。</p>\n</li>\n<li><p>学习设计模式的意义<br>设计模式的本质是面向对象设计原则的实际运用、是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。正确使用设计模式具有以下优点：</p>\n</li>\n</ol>\n<ul>\n<li>可以提高程序员的思维能力、编程能力和设计能力。</li>\n<li>使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。</li>\n<li>使设计的代码的可重用性高、可读性强、可靠性高、灵活性好、可维护性强。<br>当然，软件设计模式只是一个引导。在具体的软件幵发中，必须根据设计的应用系统的特点和要求来恰当选择。对于简单的程序开发，苛能写一个简单的算法要比引入某种设计模式更加容易。但对大项目的开发或者框架设计，用设计模式来组织代码显然更好。</li>\n</ul>\n<h3 id=\"软件设计模式的基本要素\"><a href=\"#软件设计模式的基本要素\" class=\"headerlink\" title=\"软件设计模式的基本要素\"></a>软件设计模式的基本要素</h3><p>软件设计模式使人们可以更加简单方便地复用成功的设计和体系结构，它通常包含以下几个基本要素：模式名称、别名、动机、问题、解决方案、效果、结构、模式角色、合作关系、实现方法、适用性、已知应用、例程、模式扩展和相关模式等，其中最关键的元素包括以下4个主要部分。</p>\n<ol>\n<li><p>模式名称<br>每一个模式都有自己的名称，通常用一两个词来描述，可以根据模式的问题、特点、解决方案、功能和效果来命名。模式名称（PatternName）有助于我们理解和记忆该模式，也方便我们来讨论自己的设计。</p>\n</li>\n<li><p>问题<br>问题（Problem）描述了该模式的应用环境，即何时使用该模式。它解释了设计问题和问题存在的前因后果，以及必须满足的一系列先决条件。</p>\n</li>\n<li><p>解决方案<br>模式问题的解决方案（Solution）包括设计的组成部分、它们之间的相互关系及各自的职责和协作方式。因为模式就像一个模板，可应用于多种不同场合，所以解决方案并不描述一个特定而具体的设计或实现，而是提供实际问题的抽象描述和怎样用一个具有一般意义的元素组合（类或对象的组合）来解决这个问题。</p>\n</li>\n<li><p>效果<br>描述了模式的应用效果以及使用该模式应该权衡的问题，即模式的优缺点。主要是对时间和空间的衡量，以及该模式对系统的灵活性、扩充性、可移植性的影响，也考虑其实现问题。显式地列出这些效果（Consequence）对理解和评价这些模式有很大的帮助。</p>\n</li>\n</ol>\n<h3 id=\"分类和功能\"><a href=\"#分类和功能\" class=\"headerlink\" title=\"分类和功能\"></a>分类和功能</h3><p>设计模式有两种分类方法，即根据模式的目的来分和根据模式的作用的范围来分。</p>\n<ol>\n<li>根据目的来分<ol>\n<li>创建型模式：用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。（单例、原型、工厂方法、抽象工厂、建造者）</li>\n<li>结构型模式：用于描述如何将类或对象按某种布局组成更大的结构。（代理、适配器、桥接、装饰、外观、享元、组合）。</li>\n<li>行为型模式：用于描述类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，以及怎样分配职责。（模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器）</li>\n</ol>\n</li>\n</ol>\n<ol start=\"2\">\n<li>根据作用范围来分<ol>\n<li>类模式：用于处理类与子类之间的关系，这些关系通过继承来建立，是静态的，在编译时刻便确定下来了。（工厂方法、适配器、模板方法、解释器）</li>\n<li>对象模式：用于处理对象之间的关系，这些关系可以通过组合或聚合来实现，在运行时刻是可以变化的，更具动态性。（除上面4种）</li>\n</ol>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">范围\\目的</th>\n<th align=\"center\">创建型模式</th>\n<th align=\"center\">结构型模式</th>\n<th align=\"center\">行为型模式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">类模式</td>\n<td align=\"center\">工厂方法</td>\n<td align=\"center\">（类）适配器</td>\n<td align=\"center\">模板方式、解释器</td>\n</tr>\n<tr>\n<td align=\"center\">对象模式</td>\n<td align=\"center\">单例<br>原型<br>抽象工厂<br>建造者</td>\n<td align=\"center\">代理<br>（对象）适配器<br>桥接<br>装饰<br>外观<br>享元<br>组合</td>\n<td align=\"center\">策略<br>命令<br>职责链<br>状态<br>观察者<br>中介者<br>迭代器<br>访问者<br>备忘录</td>\n</tr>\n</tbody></table>\n<ol start=\"3\">\n<li>23种设计模式的功能<ol>\n<li>单例（Singleton）模式：某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。</li>\n<li>原型（Prototype）模式：将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。</li>\n<li>工厂方法（Factory Method）模式：定义一个用于创建产品的接口，由子类决定生产什么产品。</li>\n<li>抽象工厂（AbstractFactory）模式：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。</li>\n<li>建造者（Builder）模式：将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。</li>\n<li>代理（Proxy）模式：为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。</li>\n<li>适配器（Adapter）模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。</li>\n<li>桥接（Bridge）模式：将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。</li>\n<li>装饰（Decorator）模式：动态的给对象增加一些职责，即增加其额外的功能。</li>\n<li>外观（Facade）模式：为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。</li>\n<li>享元（Flyweight）模式：运用共享技术来有效地支持大量细粒度对象的复用。</li>\n<li>组合（Composite）模式：将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。</li>\n<li>模板方法（TemplateMethod）模式：定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。</li>\n<li>策略（Strategy）模式：定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户。</li>\n<li>命令（Command）模式：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。</li>\n<li>职责链（Chain of Responsibility）模式：把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合。</li>\n<li>状态（State）模式：允许一个对象在其内部状态发生改变时改变其行为能力。</li>\n<li>观察者（Observer）模式：多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。</li>\n<li>中介者（Mediator）模式：定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解。</li>\n<li>迭代器（Iterator）模式：提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。</li>\n<li>访问者（Visitor）模式：在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问。</li>\n<li>备忘录（Memento）模式：在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它。</li>\n<li>解释器（Interpreter）模式：提供如何定义语言的文法，以及对语言句子的解释方法，即解释器。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"开闭原则\"><a href=\"#开闭原则\" class=\"headerlink\" title=\"开闭原则\"></a>开闭原则</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p><strong>软件实体应当对扩展开放、对修改关闭。</strong></p>\n<p>软件实体：</p>\n<ol>\n<li>项目中划分出的模块</li>\n<li>类与接口</li>\n<li>方法</li>\n</ol>\n<p><strong>开闭原则的含义是：当应用的需求改变时，在不修改软件实体的源代码或者二进制代码的前提下，可以扩展模块的功能，使其满足新的需求。</strong></p>\n<h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p>开闭原则是面向对象程序设计的终极目标，它使软件实体拥有一定的适应性和灵活性的同时具备稳定性和延续性。具体来说，其作用如下。</p>\n<ol>\n<li>对软件测试的影响<br>软件遵守开闭原则的话，软件测试时只需要对扩展的代码进行测试就可以了，因为原有的测试代码仍然能够正常运行。</li>\n<li>可以提高代码的可复用性<br>粒度越小，被复用的可能性就越大；在面向对象的程序设计中，根据原子和抽象编程可以提高代码的可复用性。</li>\n<li>可以提高软件的可维护性<br>遵守开闭原则的软件，其稳定性高和延续性强，从而易于扩展和维护。</li>\n</ol>\n<h3 id=\"里式替换原则\"><a href=\"#里式替换原则\" class=\"headerlink\" title=\"里式替换原则\"></a>里式替换原则</h3><h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p><strong>继承必须确保超类所拥有的性质在子类中仍然成立</strong></p>\n<h4 id=\"作用-1\"><a href=\"#作用-1\" class=\"headerlink\" title=\"作用\"></a>作用</h4><ol>\n<li>里氏替换原则是实现开闭原则的重要方式之一。</li>\n<li>它克服了继承中重写父类造成的可复用性变差的缺点。</li>\n<li>它是动作正确性的保证。即类的扩展不会给已有的系统引入新的错误，降低了代码出错的可能性。</li>\n</ol>\n<h4 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h4><p><strong>里氏替换原则通俗来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。</strong>也就是说：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。</p>\n<h3 id=\"依赖倒置原则\"><a href=\"#依赖倒置原则\" class=\"headerlink\" title=\"依赖倒置原则\"></a>依赖倒置原则</h3><h4 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。其核心思想是：<strong>要面向接口编程，不要面向实现编程。</strong><br><strong>依赖倒置原则是实现开闭原则的重要途径之一，它降低了客户与实现模块之间的耦合。</strong><br>由于在软件设计中，细节具有多变性，而抽象层则相对稳定，因此以抽象为基础搭建起来的架构要比以细节为基础搭建起来的架构要稳定得多。这里的抽象指的是接口或者抽象类，而细节是指具体的实现类。<br>使用接口或者抽象类的目的是制定好规范和契约，而不去涉及任何具体的操作，把展现细节的任务交给它们的实现类去完成。</p>\n<h4 id=\"作用-2\"><a href=\"#作用-2\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p><strong>依赖倒置原则的目的是通过要面向接口的编程来降低类间的耦合性</strong>，所以我们在实际编程中只要遵循以下4点，就能在项目中满足这个规则。</p>\n<ol>\n<li>每个类尽量提供接口或抽象类，或者两者都具备。</li>\n<li>变量的声明类型尽量是接口或者是抽象类。</li>\n<li>任何类都不应该从具体类派生。</li>\n<li>使用继承时尽量遵循里氏替换原则。</li>\n</ol>\n<h3 id=\"单一职责原则\"><a href=\"#单一职责原则\" class=\"headerlink\" title=\"单一职责原则\"></a>单一职责原则</h3><h4 id=\"定义-3\"><a href=\"#定义-3\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p><strong>规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分</strong><br>该原则提出对象不应该承担太多职责，如果一个对象承担了太多的职责，至少存在以下两个缺点：</p>\n<ol>\n<li>一个职责的变化可能会削弱或者抑制这个类实现其他职责的能力；</li>\n<li>当客户端需要该对象的某一个职责时，不得不将其他不需要的职责全都包含进来，从而造成冗余代码或代码的浪费。</li>\n</ol>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><p>单一职责原则的核心就是控制类的粒度大小、将对象解耦、提高其内聚性。如果遵循单一职责原则将有以下优点。</p>\n<ol>\n<li>降低类的复杂度。一个类只负责一项职责，其逻辑肯定要比负责多项职责简单得多。</li>\n<li>提高类的可读性。复杂性降低，自然其可读性会提高。</li>\n<li>提高系统的可维护性。可读性提高，那自然更容易维护了。</li>\n<li>变更引起的风险降低。变更是必然的，如果单一职责原则遵守得好，当修改一个功能时，可以显著降低对其他功能的影响。</li>\n</ol>\n<h4 id=\"实现方法-1\"><a href=\"#实现方法-1\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h4><p>单一职责原则是最简单但又最难运用的原则，需要设计人员发现类的不同职责并将其分离，再封装到不同的类或模块中。而发现类的多重职责需要设计人员具有较强的分析设计能力和相关重构经验。下面以大学学生工作管理程序为例介绍单一职责原则的应用。</p>\n<h3 id=\"接口隔离原则\"><a href=\"#接口隔离原则\" class=\"headerlink\" title=\"接口隔离原则\"></a>接口隔离原则</h3><h4 id=\"定义-4\"><a href=\"#定义-4\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p><strong>客户端不应该被迫依赖于它不使用的方法</strong><br><strong>一个类对另一个类的依赖应该建立在最小的接口上</strong></p>\n<p>接口隔离原则和单一职责都是为了提高类的内聚性、降低它们之间的耦合性，体现了封装的思想，但两者是不同的：</p>\n<ol>\n<li>单一职责原则注重的是职责，而接口隔离原则注重的是对接口依赖的隔离。</li>\n<li>单一职责原则主要是约束类，它针对的是程序中的实现和细节；接口隔离原则主要约束接口，主要针对抽象和程序整体框架的构建。</li>\n</ol>\n<h4 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h4><p>接口隔离原则是为了约束接口、降低类对接口的依赖性，遵循接口隔离原则有以下 5 个优点。</p>\n<ol>\n<li>将臃肿庞大的接口分解为多个粒度小的接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。</li>\n<li>接口隔离提高了系统的内聚性，减少了对外交互，降低了系统的耦合性。</li>\n<li>如果接口的粒度大小定义合理，能够保证系统的稳定性；但是，如果定义过小，则会造成接口数量过多，使设计复杂化；如果定义太大，灵活性降低，无法提供定制服务，给整体项目带来无法预料的风险。</li>\n<li>使用多个专门的接口还能够体现对象的层次，因为可以通过接口的继承，实现对总接口的定义。</li>\n<li>能减少项目工程中的代码冗余。过大的大接口里面通常放置许多不用的方法，当实现这个接口的时候，被迫设计冗余的代码。</li>\n</ol>\n<h4 id=\"实现方法-2\"><a href=\"#实现方法-2\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h4><p>在具体应用接口隔离原则时，应该根据以下几个规则来衡量。</p>\n<ol>\n<li>接口尽量小，但是要有限度。一个接口只服务于一个子模块或业务逻辑。</li>\n<li>为依赖接口的类定制服务。只提供调用者需要的方法，屏蔽不需要的方法。</li>\n<li>了解环境，拒绝盲从。每个项目或产品都有选定的环境因素，环境不同，接口拆分的标准就不同深入了解业务逻辑。</li>\n<li>提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。</li>\n</ol>\n<h3 id=\"迪米特法则\"><a href=\"#迪米特法则\" class=\"headerlink\" title=\"迪米特法则\"></a>迪米特法则</h3><h4 id=\"定义-5\"><a href=\"#定义-5\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p><strong>只与你的直接朋友交谈，不跟“陌生人”说话。其含义是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。</strong><br>迪米特法则中的“朋友”是指：当前对象本身、当前对象的成员对象、当前对象所创建的对象、当前对象的方法参数等，这些对象同当前对象存在关联、聚合或组合关系，可以直接访问这些对象的方法。</p>\n<h4 id=\"优点-2\"><a href=\"#优点-2\" class=\"headerlink\" title=\"优点\"></a>优点</h4><p>迪米特法则要求限制软件实体之间通信的宽度和深度，正确使用迪米特法则将有以下两个优点。</p>\n<ol>\n<li>降低了类之间的耦合度，提高了模块的相对独立性。</li>\n<li>由于亲合度降低，从而提高了类的可复用率和系统的扩展性。</li>\n</ol>\n<p>但是，过度使用迪米特法则会使系统产生大量的中介类，从而增加系统的复杂性，使模块之间的通信效率降低。所以，在釆用迪米特法则时需要反复权衡，确保高内聚和低耦合的同时，保证系统的结构清晰。</p>\n<h4 id=\"实现方法-3\"><a href=\"#实现方法-3\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h4><p>从迪米特法则的定义和特点可知，它强调以下两点：</p>\n<ol>\n<li>从依赖者的角度来说，只依赖应该依赖的对象。</li>\n<li>从被依赖者的角度说，只暴露应该暴露的方法。</li>\n</ol>\n<p>所以，在运用迪米特法则时要注意以下 6 点。</p>\n<ol>\n<li>在类的划分上，应该创建弱耦合的类。类与类之间的耦合越弱，就越有利于实现可复用的目标。</li>\n<li>在类的结构设计上，尽量降低类成员的访问权限。</li>\n<li>在类的设计上，优先考虑将一个类设置成不变类。</li>\n<li>在对其他类的引用上，将引用其他对象的次数降到最低。</li>\n<li>不暴露类的属性成员，而应该提供相应的访问器（set 和 get 方法）。</li>\n<li>谨慎使用序列化（Serializable）功能。</li>\n</ol>\n<h3 id=\"合成复用原则\"><a href=\"#合成复用原则\" class=\"headerlink\" title=\"合成复用原则\"></a>合成复用原则</h3><h4 id=\"定义-6\"><a href=\"#定义-6\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>合成复用原则又叫组合/聚合复用原则。它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。<strong>如果要使用继承关系，则必须严格遵循里氏替换原则。</strong><br>合成复用原则同里氏替换原则相辅相成的，两者都是开闭原则的具体实现规范。</p>\n<h4 id=\"重要性\"><a href=\"#重要性\" class=\"headerlink\" title=\"重要性\"></a>重要性</h4><p>通常类的复用分为继承复用和合成复用两种，继承复用虽然有简单和易实现的优点，但它也存在以下缺点。</p>\n<ol>\n<li>继承复用破坏了类的封装性。因为继承会将父类的实现细节暴露给子类，父类对子类是透明的，所以这种复用又称为“白箱”复用。</li>\n<li>子类与父类的耦合度高。父类的实现的任何改变都会导致子类的实现发生变化，这不利于类的扩展与维护。</li>\n<li>它限制了复用的灵活性。从父类继承而来的实现是静态的，在编译时已经定义，所以在运行时不可能发生变化。</li>\n</ol>\n<p>采用组合或聚合复用时，可以将已有对象纳入新对象中，使之成为新对象的一部分，新对象可以调用已有对象的功能，它有以下优点。</p>\n<ol>\n<li>它维持了类的封装性。因为成分对象的内部细节是新对象看不见的，所以这种复用又称为“黑箱”复用。</li>\n<li>新旧类之间的耦合度低。这种复用所需的依赖较少，新对象存取成分对象的唯一方法是通过成分对象的接口。</li>\n<li>复用的灵活性高。这种复用可以在运行时动态进行，新对象可以动态地引用与成分对象类型相同的对象。</li>\n</ol>\n<h4 id=\"实现方法-4\"><a href=\"#实现方法-4\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h4><p>合成复用原则是通过将已有的对象纳入新对象中，作为新对象的成员对象来实现的，新对象可以调用已有对象的功能，从而达到复用。</p>\n<h3 id=\"七种设计原则总结。\"><a href=\"#七种设计原则总结。\" class=\"headerlink\" title=\"七种设计原则总结。\"></a>七种设计原则总结。</h3><p><strong>开闭原则是总纲，它告诉我们要对扩展开放，对修改关闭；</strong><br><strong>里氏替换原则告诉我们不要破坏继承体系；</strong><br><strong>依赖倒置原则告诉我们要面向接口编程；</strong><br><strong>单一职责原则告诉我们实现类要职责单一；</strong><br><strong>接口隔离原则告诉我们在设计接口的时候要精简单一；</strong><br><strong>迪米特法则告诉我们要降低耦合度；</strong><br><strong>合成复用原则告诉我们要优先使用组合或者聚合关系复用，少用继承关系复用。</strong></p>\n"},{"title":"redis主从-哨兵模式","date":"2022-03-15T01:24:52.000Z","_content":"\n## 主从模式\n\n### 1.主从模式的特点\n  1、master可以进行读写操作，当读写操作导致数据变化时会自动将数据同步给从数据库\n  2、salve只读\n  3、master一对多salve\n\n\n### 2.redis.conf配置\n\n#### master配置 \n```\n  bind 0.0.0.0        #任意ip都可以连接\n  protected-mode yes  #保护模式，需配置bind ip或者设置访问密码；no为关闭，外部网络可以直接访问\n  port 6379\t\t\t      #端口号\n  daemonize no        #后台运行，不设置docker会立即退出\n  pidfile /var/run/redis_6379.pid\t#进程守护文件，就是存放该进程号相关信息的地方\n  requirepass password #密码\n\n  ##### SNAPSHOTTING  默认开启RDB\n  save 900 1\n  save 300 10\n  save 60 10000\n\n  dbfilename dump.rdb #rdb文件\n  dir ./              #数据存放目录\n  rdbcompression yes  #默认开启数据压缩\n\n  ##### 配置AOF\n  appendonly yes                                              #开启AOF\n  appendfilename \"appendonly.aof\"                             #本地数据库文件名\n  appendfsync everysec                                        #更新日志条件 always 总是，每次数据发生变化会立刻写入，性能较差安全性高；everysec 每秒异步写入，默认值； no 不同步\n  auto-aof-rewrite-percentage 100                             #自动化重写百分比，100即一倍\n  auto-aof-rewrite-min-size 3gb                               #当AOF文件大小是上次rewrite后大小的一倍且文件大于3GB时触发\n\n  masterauth password                                         #从节点密码；后续使用哨兵，master节点挂了，哨兵选举其中一个slave节点升级为master1，等原master服务重新起来后，变更为从节点，需要连接master1，所以这里需要设置从节点的密码。且要保证主、从的密码一致。\n\n```\n\n#### slave配置\n  前面的设置和master一样；\n  port端口后面启动的时候指定\n  密码要和master的密码一致（后面做哨兵的时候需要）\n\n```\n  ##### slave特殊配置\n  replicaof 10.0.16.4 6379   #主节点信息\n  replica-read-only yes      #默认只读\n  masterauth password        #主节点密码\n\n```\n### 3.redis启动命令\n这里分三个节点，node1为master，node2、node3为slave\n\n##### node1\n```\ndocker run -idt --privileged=true --net=host -v /hzzxj/redis/redis-ms/node1/redis.conf:/usr/local/etc/redis/redis.conf -v /hzzxj/redis/redis-ms/node1/data:/data --name=redis-node1 redis:5.0.14 redis-server /usr/local/etc/redis/redis.conf --port 6379 \n```\n--net=host  #使用主机端口；使用-p 进行端口映射时，测试发现master节点里slave的信息是127.0.0.1 6379，导致后面做哨兵时，哨兵无法获取争取的salve信息\n--port 6379 #设置启动端口为6379\n\n##### node2\n```\ndocker run -idt --privileged=true --net=host -v /hzzxj/redis/redis-ms/node2/redis.conf:/usr/local/etc/redis/redis.conf -v /hzzxj/redis/redis-ms/node2/data:/data --name=redis-node2 redis:5.0.14 redis-server /usr/local/etc/redis/redis.conf --port 6380\n```\n--port 6380 #设置启动端口为6380；因为在一台服务器上测试，6379已被master占用\n\n##### node3\n```\ndocker run -idt --privileged=true --net=host -v /hzzxj/redis/redis-ms/node3/redis.conf:/usr/local/etc/redis/redis.conf -v /hzzxj/redis/redis-ms/node3/data:/data --name=redis-node3 redis:5.0.14 redis-server /usr/local/etc/redis/redis.conf --port 6381\n```\n--port 6381 #设置启动端口为6381\n\n\n### 4.redis主从测试\n```\ndocker ps -a | grep redis- #查看容器状态\n```\n![](/images/redis/redis-master1.png)\n\n\nmaster节点操作\n```\ndocker exec -it redis-node1 redis-cli -p 6379  #进入容器，redis-cli连接redis；-p 指定端口\n\n127.0.0.1:6379> auth password           #用户鉴权\n\n127.0.0.1:6379> info                    #查看节点信息\n\n127.0.0.1:6379> set redis test          #测试写入\n\n127.0.0.1:6379> get redis               #查询\n```\n![](/images/redis/redis-master2.png)\n![](/images/redis/redis-master3.png)\n\n\nsalve节点操作\n![](/images/redis/redis-master4.png)\n\n可以看到slave能查询到刚刚master节点写入的信息。而且是只读状态。\n\n\n## 哨兵模式\n\n### 1.哨兵功能\n\n1、监控redis集群是否正常\n2、master出现故障，自动将slave转化为master\n3、多哨兵配置的时候，哨兵之间也会自动监控\n\n### 2.哨兵配置\n  这里设置三个哨兵，端口分别为26379，26380，26381，其他配置一样\n```\nbind 0.0.0.0\nport 26379                                            # 由于布置在同一台主机上，所以只能区分端口，分别为26379，26380，26381\ndaemonize no\npidfile /var/run/keydb-sentinel.pid\nlogfile \"\"\ndir /tmp\nprotected-mode yes\nsentinel monitor mymaster 10.0.16.4 6379 2            # mymaster 集群名称；10.0.16.4 maseter节点ip；6379 master端口；2 需要由2个哨兵选举\nsentinel auth-pass mymaster password                  # 这一行要写在sentinel monitor后面，否则会报错\nsentinel down-after-milliseconds mymaster 5000\nsentinel parallel-syncs mymaster 1\nsentinel failover-timeout mymaster 180000\nsentinel deny-scripts-reconfig yes\n```\n\n### 3.哨兵启动命令\n 启动哨兵，用的也是redis的镜像\n```\n# 哨兵1，端口26379\ndocker run -idt --name=sentinel-26379 --net=host -v /hzzxj/redis/sentinel/26379/sentinel-26379.conf:/usr/local/etc/redis/sentinel.conf redis:5.0.14 redis-sentinel /usr/local/etc/redis/sentinel.conf\n\n# 哨兵1，端口26379\ndocker run -idt --name=sentinel-26380 --net=host -v /hzzxj/redis/sentinel/26380/sentinel-26380.conf:/usr/local/etc/redis/sentinel.conf redis:5.0.14 redis-sentinel /usr/local/etc/redis/sentinel.conf\n\n# 哨兵1，端口26379\ndocker run -idt --name=sentinel-26381 --net=host -v /hzzxj/redis/sentinel/26381/sentinel-26381.conf:/usr/local/etc/redis/sentinel.conf redis:5.0.14 redis-sentinel /usr/local/etc/redis/sentinel.conf\n```\n\n### 4.哨兵测试\n  查看容器状态\n![](/images/redis/redis-sentinel1.png)\n\n  启动后哨兵配置文件会自动写入集群信息\n![](/images/redis/redis-sentinel2.png)\n\n  哨兵启动日志\n![](/images/redis/redis-sentinel3.png)\n\n  这时候把master节点停了；docker stop redis-node1；查看哨兵日志发现master迁移到6380端口的节点上\n![](/images/redis/redis-sentinel4.png)\n\n  尝试往6380写入数据，可以写入了。再查看节点信息，成为了master节点，slave剩下6381\n![](/images/redis/redis-sentinel5.png)\n![](/images/redis/redis-sentinel6.png)\n\n  重新拉起node1节点，并不会把node1重新做为master，而是作为slave重新加入集群\n![](/images/redis/redis-sentinel7.png)","source":"_posts/docker-redis-master-slave.md","raw":"---\ntitle: redis主从-哨兵模式\ndate: 2022-03-15 09:24:52\ntags: \n- docker\n- redis\ncategories: \n- redis\n---\n\n## 主从模式\n\n### 1.主从模式的特点\n  1、master可以进行读写操作，当读写操作导致数据变化时会自动将数据同步给从数据库\n  2、salve只读\n  3、master一对多salve\n\n\n### 2.redis.conf配置\n\n#### master配置 \n```\n  bind 0.0.0.0        #任意ip都可以连接\n  protected-mode yes  #保护模式，需配置bind ip或者设置访问密码；no为关闭，外部网络可以直接访问\n  port 6379\t\t\t      #端口号\n  daemonize no        #后台运行，不设置docker会立即退出\n  pidfile /var/run/redis_6379.pid\t#进程守护文件，就是存放该进程号相关信息的地方\n  requirepass password #密码\n\n  ##### SNAPSHOTTING  默认开启RDB\n  save 900 1\n  save 300 10\n  save 60 10000\n\n  dbfilename dump.rdb #rdb文件\n  dir ./              #数据存放目录\n  rdbcompression yes  #默认开启数据压缩\n\n  ##### 配置AOF\n  appendonly yes                                              #开启AOF\n  appendfilename \"appendonly.aof\"                             #本地数据库文件名\n  appendfsync everysec                                        #更新日志条件 always 总是，每次数据发生变化会立刻写入，性能较差安全性高；everysec 每秒异步写入，默认值； no 不同步\n  auto-aof-rewrite-percentage 100                             #自动化重写百分比，100即一倍\n  auto-aof-rewrite-min-size 3gb                               #当AOF文件大小是上次rewrite后大小的一倍且文件大于3GB时触发\n\n  masterauth password                                         #从节点密码；后续使用哨兵，master节点挂了，哨兵选举其中一个slave节点升级为master1，等原master服务重新起来后，变更为从节点，需要连接master1，所以这里需要设置从节点的密码。且要保证主、从的密码一致。\n\n```\n\n#### slave配置\n  前面的设置和master一样；\n  port端口后面启动的时候指定\n  密码要和master的密码一致（后面做哨兵的时候需要）\n\n```\n  ##### slave特殊配置\n  replicaof 10.0.16.4 6379   #主节点信息\n  replica-read-only yes      #默认只读\n  masterauth password        #主节点密码\n\n```\n### 3.redis启动命令\n这里分三个节点，node1为master，node2、node3为slave\n\n##### node1\n```\ndocker run -idt --privileged=true --net=host -v /hzzxj/redis/redis-ms/node1/redis.conf:/usr/local/etc/redis/redis.conf -v /hzzxj/redis/redis-ms/node1/data:/data --name=redis-node1 redis:5.0.14 redis-server /usr/local/etc/redis/redis.conf --port 6379 \n```\n--net=host  #使用主机端口；使用-p 进行端口映射时，测试发现master节点里slave的信息是127.0.0.1 6379，导致后面做哨兵时，哨兵无法获取争取的salve信息\n--port 6379 #设置启动端口为6379\n\n##### node2\n```\ndocker run -idt --privileged=true --net=host -v /hzzxj/redis/redis-ms/node2/redis.conf:/usr/local/etc/redis/redis.conf -v /hzzxj/redis/redis-ms/node2/data:/data --name=redis-node2 redis:5.0.14 redis-server /usr/local/etc/redis/redis.conf --port 6380\n```\n--port 6380 #设置启动端口为6380；因为在一台服务器上测试，6379已被master占用\n\n##### node3\n```\ndocker run -idt --privileged=true --net=host -v /hzzxj/redis/redis-ms/node3/redis.conf:/usr/local/etc/redis/redis.conf -v /hzzxj/redis/redis-ms/node3/data:/data --name=redis-node3 redis:5.0.14 redis-server /usr/local/etc/redis/redis.conf --port 6381\n```\n--port 6381 #设置启动端口为6381\n\n\n### 4.redis主从测试\n```\ndocker ps -a | grep redis- #查看容器状态\n```\n![](/images/redis/redis-master1.png)\n\n\nmaster节点操作\n```\ndocker exec -it redis-node1 redis-cli -p 6379  #进入容器，redis-cli连接redis；-p 指定端口\n\n127.0.0.1:6379> auth password           #用户鉴权\n\n127.0.0.1:6379> info                    #查看节点信息\n\n127.0.0.1:6379> set redis test          #测试写入\n\n127.0.0.1:6379> get redis               #查询\n```\n![](/images/redis/redis-master2.png)\n![](/images/redis/redis-master3.png)\n\n\nsalve节点操作\n![](/images/redis/redis-master4.png)\n\n可以看到slave能查询到刚刚master节点写入的信息。而且是只读状态。\n\n\n## 哨兵模式\n\n### 1.哨兵功能\n\n1、监控redis集群是否正常\n2、master出现故障，自动将slave转化为master\n3、多哨兵配置的时候，哨兵之间也会自动监控\n\n### 2.哨兵配置\n  这里设置三个哨兵，端口分别为26379，26380，26381，其他配置一样\n```\nbind 0.0.0.0\nport 26379                                            # 由于布置在同一台主机上，所以只能区分端口，分别为26379，26380，26381\ndaemonize no\npidfile /var/run/keydb-sentinel.pid\nlogfile \"\"\ndir /tmp\nprotected-mode yes\nsentinel monitor mymaster 10.0.16.4 6379 2            # mymaster 集群名称；10.0.16.4 maseter节点ip；6379 master端口；2 需要由2个哨兵选举\nsentinel auth-pass mymaster password                  # 这一行要写在sentinel monitor后面，否则会报错\nsentinel down-after-milliseconds mymaster 5000\nsentinel parallel-syncs mymaster 1\nsentinel failover-timeout mymaster 180000\nsentinel deny-scripts-reconfig yes\n```\n\n### 3.哨兵启动命令\n 启动哨兵，用的也是redis的镜像\n```\n# 哨兵1，端口26379\ndocker run -idt --name=sentinel-26379 --net=host -v /hzzxj/redis/sentinel/26379/sentinel-26379.conf:/usr/local/etc/redis/sentinel.conf redis:5.0.14 redis-sentinel /usr/local/etc/redis/sentinel.conf\n\n# 哨兵1，端口26379\ndocker run -idt --name=sentinel-26380 --net=host -v /hzzxj/redis/sentinel/26380/sentinel-26380.conf:/usr/local/etc/redis/sentinel.conf redis:5.0.14 redis-sentinel /usr/local/etc/redis/sentinel.conf\n\n# 哨兵1，端口26379\ndocker run -idt --name=sentinel-26381 --net=host -v /hzzxj/redis/sentinel/26381/sentinel-26381.conf:/usr/local/etc/redis/sentinel.conf redis:5.0.14 redis-sentinel /usr/local/etc/redis/sentinel.conf\n```\n\n### 4.哨兵测试\n  查看容器状态\n![](/images/redis/redis-sentinel1.png)\n\n  启动后哨兵配置文件会自动写入集群信息\n![](/images/redis/redis-sentinel2.png)\n\n  哨兵启动日志\n![](/images/redis/redis-sentinel3.png)\n\n  这时候把master节点停了；docker stop redis-node1；查看哨兵日志发现master迁移到6380端口的节点上\n![](/images/redis/redis-sentinel4.png)\n\n  尝试往6380写入数据，可以写入了。再查看节点信息，成为了master节点，slave剩下6381\n![](/images/redis/redis-sentinel5.png)\n![](/images/redis/redis-sentinel6.png)\n\n  重新拉起node1节点，并不会把node1重新做为master，而是作为slave重新加入集群\n![](/images/redis/redis-sentinel7.png)","slug":"docker-redis-master-slave","published":1,"updated":"2022-03-21T12:45:44.677Z","_id":"cl0rr1szz0008ywqsc8onlnyi","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"主从模式\"><a href=\"#主从模式\" class=\"headerlink\" title=\"主从模式\"></a>主从模式</h2><h3 id=\"1-主从模式的特点\"><a href=\"#1-主从模式的特点\" class=\"headerlink\" title=\"1.主从模式的特点\"></a>1.主从模式的特点</h3><p>  1、master可以进行读写操作，当读写操作导致数据变化时会自动将数据同步给从数据库<br>  2、salve只读<br>  3、master一对多salve</p>\n<h3 id=\"2-redis-conf配置\"><a href=\"#2-redis-conf配置\" class=\"headerlink\" title=\"2.redis.conf配置\"></a>2.redis.conf配置</h3><h4 id=\"master配置\"><a href=\"#master配置\" class=\"headerlink\" title=\"master配置\"></a>master配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bind 0.0.0.0        #任意ip都可以连接</span><br><span class=\"line\">protected-mode yes  #保护模式，需配置bind ip或者设置访问密码；no为关闭，外部网络可以直接访问</span><br><span class=\"line\">port 6379\t\t\t      #端口号</span><br><span class=\"line\">daemonize no        #后台运行，不设置docker会立即退出</span><br><span class=\"line\">pidfile /var/run/redis_6379.pid\t#进程守护文件，就是存放该进程号相关信息的地方</span><br><span class=\"line\">requirepass password #密码</span><br><span class=\"line\"></span><br><span class=\"line\">##### SNAPSHOTTING  默认开启RDB</span><br><span class=\"line\">save 900 1</span><br><span class=\"line\">save 300 10</span><br><span class=\"line\">save 60 10000</span><br><span class=\"line\"></span><br><span class=\"line\">dbfilename dump.rdb #rdb文件</span><br><span class=\"line\">dir ./              #数据存放目录</span><br><span class=\"line\">rdbcompression yes  #默认开启数据压缩</span><br><span class=\"line\"></span><br><span class=\"line\">##### 配置AOF</span><br><span class=\"line\">appendonly yes                                              #开启AOF</span><br><span class=\"line\">appendfilename &quot;appendonly.aof&quot;                             #本地数据库文件名</span><br><span class=\"line\">appendfsync everysec                                        #更新日志条件 always 总是，每次数据发生变化会立刻写入，性能较差安全性高；everysec 每秒异步写入，默认值； no 不同步</span><br><span class=\"line\">auto-aof-rewrite-percentage 100                             #自动化重写百分比，100即一倍</span><br><span class=\"line\">auto-aof-rewrite-min-size 3gb                               #当AOF文件大小是上次rewrite后大小的一倍且文件大于3GB时触发</span><br><span class=\"line\"></span><br><span class=\"line\">masterauth password                                         #从节点密码；后续使用哨兵，master节点挂了，哨兵选举其中一个slave节点升级为master1，等原master服务重新起来后，变更为从节点，需要连接master1，所以这里需要设置从节点的密码。且要保证主、从的密码一致。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"slave配置\"><a href=\"#slave配置\" class=\"headerlink\" title=\"slave配置\"></a>slave配置</h4><p>  前面的设置和master一样；<br>  port端口后面启动的时候指定<br>  密码要和master的密码一致（后面做哨兵的时候需要）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##### slave特殊配置</span><br><span class=\"line\">replicaof 10.0.16.4 6379   #主节点信息</span><br><span class=\"line\">replica-read-only yes      #默认只读</span><br><span class=\"line\">masterauth password        #主节点密码</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-redis启动命令\"><a href=\"#3-redis启动命令\" class=\"headerlink\" title=\"3.redis启动命令\"></a>3.redis启动命令</h3><p>这里分三个节点，node1为master，node2、node3为slave</p>\n<h5 id=\"node1\"><a href=\"#node1\" class=\"headerlink\" title=\"node1\"></a>node1</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -idt --privileged=true --net=host -v /hzzxj/redis/redis-ms/node1/redis.conf:/usr/local/etc/redis/redis.conf -v /hzzxj/redis/redis-ms/node1/data:/data --name=redis-node1 redis:5.0.14 redis-server /usr/local/etc/redis/redis.conf --port 6379</span><br></pre></td></tr></table></figure>\n\n<p>–net=host  #使用主机端口；使用-p 进行端口映射时，测试发现master节点里slave的信息是127.0.0.1 6379，导致后面做哨兵时，哨兵无法获取争取的salve信息<br>–port 6379 #设置启动端口为6379</p>\n<h5 id=\"node2\"><a href=\"#node2\" class=\"headerlink\" title=\"node2\"></a>node2</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -idt --privileged=true --net=host -v /hzzxj/redis/redis-ms/node2/redis.conf:/usr/local/etc/redis/redis.conf -v /hzzxj/redis/redis-ms/node2/data:/data --name=redis-node2 redis:5.0.14 redis-server /usr/local/etc/redis/redis.conf --port 6380</span><br></pre></td></tr></table></figure>\n\n<p>–port 6380 #设置启动端口为6380；因为在一台服务器上测试，6379已被master占用</p>\n<h5 id=\"node3\"><a href=\"#node3\" class=\"headerlink\" title=\"node3\"></a>node3</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -idt --privileged=true --net=host -v /hzzxj/redis/redis-ms/node3/redis.conf:/usr/local/etc/redis/redis.conf -v /hzzxj/redis/redis-ms/node3/data:/data --name=redis-node3 redis:5.0.14 redis-server /usr/local/etc/redis/redis.conf --port 6381</span><br></pre></td></tr></table></figure>\n\n<p>–port 6381 #设置启动端口为6381</p>\n<h3 id=\"4-redis主从测试\"><a href=\"#4-redis主从测试\" class=\"headerlink\" title=\"4.redis主从测试\"></a>4.redis主从测试</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a | grep redis- #查看容器状态</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/redis/redis-master1.png\" alt></p>\n<p>master节点操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it redis-node1 redis-cli -p 6379  #进入容器，redis-cli连接redis；-p 指定端口</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; auth password           #用户鉴权</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; info                    #查看节点信息</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; set redis test          #测试写入</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; get redis               #查询</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/redis/redis-master2.png\" alt><br><img src=\"/images/redis/redis-master3.png\" alt></p>\n<p>salve节点操作<br><img src=\"/images/redis/redis-master4.png\" alt></p>\n<p>可以看到slave能查询到刚刚master节点写入的信息。而且是只读状态。</p>\n<h2 id=\"哨兵模式\"><a href=\"#哨兵模式\" class=\"headerlink\" title=\"哨兵模式\"></a>哨兵模式</h2><h3 id=\"1-哨兵功能\"><a href=\"#1-哨兵功能\" class=\"headerlink\" title=\"1.哨兵功能\"></a>1.哨兵功能</h3><p>1、监控redis集群是否正常<br>2、master出现故障，自动将slave转化为master<br>3、多哨兵配置的时候，哨兵之间也会自动监控</p>\n<h3 id=\"2-哨兵配置\"><a href=\"#2-哨兵配置\" class=\"headerlink\" title=\"2.哨兵配置\"></a>2.哨兵配置</h3><p>  这里设置三个哨兵，端口分别为26379，26380，26381，其他配置一样</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bind 0.0.0.0</span><br><span class=\"line\">port 26379                                            # 由于布置在同一台主机上，所以只能区分端口，分别为26379，26380，26381</span><br><span class=\"line\">daemonize no</span><br><span class=\"line\">pidfile /var/run/keydb-sentinel.pid</span><br><span class=\"line\">logfile &quot;&quot;</span><br><span class=\"line\">dir /tmp</span><br><span class=\"line\">protected-mode yes</span><br><span class=\"line\">sentinel monitor mymaster 10.0.16.4 6379 2            # mymaster 集群名称；10.0.16.4 maseter节点ip；6379 master端口；2 需要由2个哨兵选举</span><br><span class=\"line\">sentinel auth-pass mymaster password                  # 这一行要写在sentinel monitor后面，否则会报错</span><br><span class=\"line\">sentinel down-after-milliseconds mymaster 5000</span><br><span class=\"line\">sentinel parallel-syncs mymaster 1</span><br><span class=\"line\">sentinel failover-timeout mymaster 180000</span><br><span class=\"line\">sentinel deny-scripts-reconfig yes</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-哨兵启动命令\"><a href=\"#3-哨兵启动命令\" class=\"headerlink\" title=\"3.哨兵启动命令\"></a>3.哨兵启动命令</h3><p> 启动哨兵，用的也是redis的镜像</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 哨兵1，端口26379</span><br><span class=\"line\">docker run -idt --name=sentinel-26379 --net=host -v /hzzxj/redis/sentinel/26379/sentinel-26379.conf:/usr/local/etc/redis/sentinel.conf redis:5.0.14 redis-sentinel /usr/local/etc/redis/sentinel.conf</span><br><span class=\"line\"></span><br><span class=\"line\"># 哨兵1，端口26379</span><br><span class=\"line\">docker run -idt --name=sentinel-26380 --net=host -v /hzzxj/redis/sentinel/26380/sentinel-26380.conf:/usr/local/etc/redis/sentinel.conf redis:5.0.14 redis-sentinel /usr/local/etc/redis/sentinel.conf</span><br><span class=\"line\"></span><br><span class=\"line\"># 哨兵1，端口26379</span><br><span class=\"line\">docker run -idt --name=sentinel-26381 --net=host -v /hzzxj/redis/sentinel/26381/sentinel-26381.conf:/usr/local/etc/redis/sentinel.conf redis:5.0.14 redis-sentinel /usr/local/etc/redis/sentinel.conf</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-哨兵测试\"><a href=\"#4-哨兵测试\" class=\"headerlink\" title=\"4.哨兵测试\"></a>4.哨兵测试</h3><p>  查看容器状态<br><img src=\"/images/redis/redis-sentinel1.png\" alt></p>\n<p>  启动后哨兵配置文件会自动写入集群信息<br><img src=\"/images/redis/redis-sentinel2.png\" alt></p>\n<p>  哨兵启动日志<br><img src=\"/images/redis/redis-sentinel3.png\" alt></p>\n<p>  这时候把master节点停了；docker stop redis-node1；查看哨兵日志发现master迁移到6380端口的节点上<br><img src=\"/images/redis/redis-sentinel4.png\" alt></p>\n<p>  尝试往6380写入数据，可以写入了。再查看节点信息，成为了master节点，slave剩下6381<br><img src=\"/images/redis/redis-sentinel5.png\" alt><br><img src=\"/images/redis/redis-sentinel6.png\" alt></p>\n<p>  重新拉起node1节点，并不会把node1重新做为master，而是作为slave重新加入集群<br><img src=\"/images/redis/redis-sentinel7.png\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"主从模式\"><a href=\"#主从模式\" class=\"headerlink\" title=\"主从模式\"></a>主从模式</h2><h3 id=\"1-主从模式的特点\"><a href=\"#1-主从模式的特点\" class=\"headerlink\" title=\"1.主从模式的特点\"></a>1.主从模式的特点</h3><p>  1、master可以进行读写操作，当读写操作导致数据变化时会自动将数据同步给从数据库<br>  2、salve只读<br>  3、master一对多salve</p>\n<h3 id=\"2-redis-conf配置\"><a href=\"#2-redis-conf配置\" class=\"headerlink\" title=\"2.redis.conf配置\"></a>2.redis.conf配置</h3><h4 id=\"master配置\"><a href=\"#master配置\" class=\"headerlink\" title=\"master配置\"></a>master配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bind 0.0.0.0        #任意ip都可以连接</span><br><span class=\"line\">protected-mode yes  #保护模式，需配置bind ip或者设置访问密码；no为关闭，外部网络可以直接访问</span><br><span class=\"line\">port 6379\t\t\t      #端口号</span><br><span class=\"line\">daemonize no        #后台运行，不设置docker会立即退出</span><br><span class=\"line\">pidfile /var/run/redis_6379.pid\t#进程守护文件，就是存放该进程号相关信息的地方</span><br><span class=\"line\">requirepass password #密码</span><br><span class=\"line\"></span><br><span class=\"line\">##### SNAPSHOTTING  默认开启RDB</span><br><span class=\"line\">save 900 1</span><br><span class=\"line\">save 300 10</span><br><span class=\"line\">save 60 10000</span><br><span class=\"line\"></span><br><span class=\"line\">dbfilename dump.rdb #rdb文件</span><br><span class=\"line\">dir ./              #数据存放目录</span><br><span class=\"line\">rdbcompression yes  #默认开启数据压缩</span><br><span class=\"line\"></span><br><span class=\"line\">##### 配置AOF</span><br><span class=\"line\">appendonly yes                                              #开启AOF</span><br><span class=\"line\">appendfilename &quot;appendonly.aof&quot;                             #本地数据库文件名</span><br><span class=\"line\">appendfsync everysec                                        #更新日志条件 always 总是，每次数据发生变化会立刻写入，性能较差安全性高；everysec 每秒异步写入，默认值； no 不同步</span><br><span class=\"line\">auto-aof-rewrite-percentage 100                             #自动化重写百分比，100即一倍</span><br><span class=\"line\">auto-aof-rewrite-min-size 3gb                               #当AOF文件大小是上次rewrite后大小的一倍且文件大于3GB时触发</span><br><span class=\"line\"></span><br><span class=\"line\">masterauth password                                         #从节点密码；后续使用哨兵，master节点挂了，哨兵选举其中一个slave节点升级为master1，等原master服务重新起来后，变更为从节点，需要连接master1，所以这里需要设置从节点的密码。且要保证主、从的密码一致。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"slave配置\"><a href=\"#slave配置\" class=\"headerlink\" title=\"slave配置\"></a>slave配置</h4><p>  前面的设置和master一样；<br>  port端口后面启动的时候指定<br>  密码要和master的密码一致（后面做哨兵的时候需要）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##### slave特殊配置</span><br><span class=\"line\">replicaof 10.0.16.4 6379   #主节点信息</span><br><span class=\"line\">replica-read-only yes      #默认只读</span><br><span class=\"line\">masterauth password        #主节点密码</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-redis启动命令\"><a href=\"#3-redis启动命令\" class=\"headerlink\" title=\"3.redis启动命令\"></a>3.redis启动命令</h3><p>这里分三个节点，node1为master，node2、node3为slave</p>\n<h5 id=\"node1\"><a href=\"#node1\" class=\"headerlink\" title=\"node1\"></a>node1</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -idt --privileged=true --net=host -v /hzzxj/redis/redis-ms/node1/redis.conf:/usr/local/etc/redis/redis.conf -v /hzzxj/redis/redis-ms/node1/data:/data --name=redis-node1 redis:5.0.14 redis-server /usr/local/etc/redis/redis.conf --port 6379</span><br></pre></td></tr></table></figure>\n\n<p>–net=host  #使用主机端口；使用-p 进行端口映射时，测试发现master节点里slave的信息是127.0.0.1 6379，导致后面做哨兵时，哨兵无法获取争取的salve信息<br>–port 6379 #设置启动端口为6379</p>\n<h5 id=\"node2\"><a href=\"#node2\" class=\"headerlink\" title=\"node2\"></a>node2</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -idt --privileged=true --net=host -v /hzzxj/redis/redis-ms/node2/redis.conf:/usr/local/etc/redis/redis.conf -v /hzzxj/redis/redis-ms/node2/data:/data --name=redis-node2 redis:5.0.14 redis-server /usr/local/etc/redis/redis.conf --port 6380</span><br></pre></td></tr></table></figure>\n\n<p>–port 6380 #设置启动端口为6380；因为在一台服务器上测试，6379已被master占用</p>\n<h5 id=\"node3\"><a href=\"#node3\" class=\"headerlink\" title=\"node3\"></a>node3</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -idt --privileged=true --net=host -v /hzzxj/redis/redis-ms/node3/redis.conf:/usr/local/etc/redis/redis.conf -v /hzzxj/redis/redis-ms/node3/data:/data --name=redis-node3 redis:5.0.14 redis-server /usr/local/etc/redis/redis.conf --port 6381</span><br></pre></td></tr></table></figure>\n\n<p>–port 6381 #设置启动端口为6381</p>\n<h3 id=\"4-redis主从测试\"><a href=\"#4-redis主从测试\" class=\"headerlink\" title=\"4.redis主从测试\"></a>4.redis主从测试</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a | grep redis- #查看容器状态</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/redis/redis-master1.png\" alt></p>\n<p>master节点操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it redis-node1 redis-cli -p 6379  #进入容器，redis-cli连接redis；-p 指定端口</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; auth password           #用户鉴权</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; info                    #查看节点信息</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; set redis test          #测试写入</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; get redis               #查询</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/redis/redis-master2.png\" alt><br><img src=\"/images/redis/redis-master3.png\" alt></p>\n<p>salve节点操作<br><img src=\"/images/redis/redis-master4.png\" alt></p>\n<p>可以看到slave能查询到刚刚master节点写入的信息。而且是只读状态。</p>\n<h2 id=\"哨兵模式\"><a href=\"#哨兵模式\" class=\"headerlink\" title=\"哨兵模式\"></a>哨兵模式</h2><h3 id=\"1-哨兵功能\"><a href=\"#1-哨兵功能\" class=\"headerlink\" title=\"1.哨兵功能\"></a>1.哨兵功能</h3><p>1、监控redis集群是否正常<br>2、master出现故障，自动将slave转化为master<br>3、多哨兵配置的时候，哨兵之间也会自动监控</p>\n<h3 id=\"2-哨兵配置\"><a href=\"#2-哨兵配置\" class=\"headerlink\" title=\"2.哨兵配置\"></a>2.哨兵配置</h3><p>  这里设置三个哨兵，端口分别为26379，26380，26381，其他配置一样</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bind 0.0.0.0</span><br><span class=\"line\">port 26379                                            # 由于布置在同一台主机上，所以只能区分端口，分别为26379，26380，26381</span><br><span class=\"line\">daemonize no</span><br><span class=\"line\">pidfile /var/run/keydb-sentinel.pid</span><br><span class=\"line\">logfile &quot;&quot;</span><br><span class=\"line\">dir /tmp</span><br><span class=\"line\">protected-mode yes</span><br><span class=\"line\">sentinel monitor mymaster 10.0.16.4 6379 2            # mymaster 集群名称；10.0.16.4 maseter节点ip；6379 master端口；2 需要由2个哨兵选举</span><br><span class=\"line\">sentinel auth-pass mymaster password                  # 这一行要写在sentinel monitor后面，否则会报错</span><br><span class=\"line\">sentinel down-after-milliseconds mymaster 5000</span><br><span class=\"line\">sentinel parallel-syncs mymaster 1</span><br><span class=\"line\">sentinel failover-timeout mymaster 180000</span><br><span class=\"line\">sentinel deny-scripts-reconfig yes</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-哨兵启动命令\"><a href=\"#3-哨兵启动命令\" class=\"headerlink\" title=\"3.哨兵启动命令\"></a>3.哨兵启动命令</h3><p> 启动哨兵，用的也是redis的镜像</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 哨兵1，端口26379</span><br><span class=\"line\">docker run -idt --name=sentinel-26379 --net=host -v /hzzxj/redis/sentinel/26379/sentinel-26379.conf:/usr/local/etc/redis/sentinel.conf redis:5.0.14 redis-sentinel /usr/local/etc/redis/sentinel.conf</span><br><span class=\"line\"></span><br><span class=\"line\"># 哨兵1，端口26379</span><br><span class=\"line\">docker run -idt --name=sentinel-26380 --net=host -v /hzzxj/redis/sentinel/26380/sentinel-26380.conf:/usr/local/etc/redis/sentinel.conf redis:5.0.14 redis-sentinel /usr/local/etc/redis/sentinel.conf</span><br><span class=\"line\"></span><br><span class=\"line\"># 哨兵1，端口26379</span><br><span class=\"line\">docker run -idt --name=sentinel-26381 --net=host -v /hzzxj/redis/sentinel/26381/sentinel-26381.conf:/usr/local/etc/redis/sentinel.conf redis:5.0.14 redis-sentinel /usr/local/etc/redis/sentinel.conf</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-哨兵测试\"><a href=\"#4-哨兵测试\" class=\"headerlink\" title=\"4.哨兵测试\"></a>4.哨兵测试</h3><p>  查看容器状态<br><img src=\"/images/redis/redis-sentinel1.png\" alt></p>\n<p>  启动后哨兵配置文件会自动写入集群信息<br><img src=\"/images/redis/redis-sentinel2.png\" alt></p>\n<p>  哨兵启动日志<br><img src=\"/images/redis/redis-sentinel3.png\" alt></p>\n<p>  这时候把master节点停了；docker stop redis-node1；查看哨兵日志发现master迁移到6380端口的节点上<br><img src=\"/images/redis/redis-sentinel4.png\" alt></p>\n<p>  尝试往6380写入数据，可以写入了。再查看节点信息，成为了master节点，slave剩下6381<br><img src=\"/images/redis/redis-sentinel5.png\" alt><br><img src=\"/images/redis/redis-sentinel6.png\" alt></p>\n<p>  重新拉起node1节点，并不会把node1重新做为master，而是作为slave重新加入集群<br><img src=\"/images/redis/redis-sentinel7.png\" alt></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl0rqqlyr0008ugqsxviplcnp","category_id":"cl0rqqlyj0004ugqsxg2y5i8j","_id":"cl0rqqlz0000gugqsx4v5je8o"},{"post_id":"cl0rqqly80000ugqsimhqlbyg","category_id":"cl0rqqlyj0004ugqsxg2y5i8j","_id":"cl0rqqlz2000kugqsmnvo2upe"},{"post_id":"cl0rqqlyv000augqsccmfpw2f","category_id":"cl0rqqlyj0004ugqsxg2y5i8j","_id":"cl0rqqlz4000mugqs75ytt4rm"},{"post_id":"cl0rqqlyg0002ugqsbu25tmci","category_id":"cl0rqqlyj0004ugqsxg2y5i8j","_id":"cl0rqqlz6000qugqsem1mgfw3"},{"post_id":"cl0rqqlz0000fugqsq0ae5occ","category_id":"cl0rqqlyj0004ugqsxg2y5i8j","_id":"cl0rqqlz7000tugqsxsp24ccw"},{"post_id":"cl0rqqlyl0006ugqsf88ltheu","category_id":"cl0rqqlyj0004ugqsxg2y5i8j","_id":"cl0rqqlz9000yugqsqz3cr82m"},{"post_id":"cl0rqqlz5000pugqss7pfbkf6","category_id":"cl0rqqlyj0004ugqsxg2y5i8j","_id":"cl0rqqlza0010ugqssdzaeiqp"},{"post_id":"cl0rqqlyy000eugqsx819qplq","category_id":"cl0rqqlz4000nugqsqi7kni1x","_id":"cl0rqqlzc0014ugqsfquff1ul"},{"post_id":"cl0rqqlz2000jugqsg6jg1ey6","category_id":"cl0rqqlz7000vugqsvfcyyrdb","_id":"cl0rqqlze0018ugqs9ljslsc3"},{"post_id":"cl0rqqlzb0013ugqsrj94b7xb","category_id":"cl0rqqlz7000vugqsvfcyyrdb","_id":"cl0rqqlzg001eugqslgle52m8"},{"post_id":"cl0rqqlz3000lugqsnxsydsl4","category_id":"cl0rqqlzb0011ugqsweiy2fw3","_id":"cl0rqqlzh001gugqs81w9y5ud"},{"post_id":"cl0rqqlz6000sugqs5deha9yi","category_id":"cl0rqqlze0019ugqsiyw04ca4","_id":"cl0rqqlzj001mugqsjjq765ff"},{"post_id":"cl0rqqlz8000xugqs2ihd1ac9","category_id":"cl0rqqlze0019ugqsiyw04ca4","_id":"cl0rqqlzk001qugqsa1hjpbqf"},{"post_id":"cl0rqqlza000zugqso7c0c3kh","category_id":"cl0rqqlzj001lugqstcj7cnum","_id":"cl0rqqlzm001uugqs63onv76z"},{"post_id":"cl0rqqlzd0016ugqsfnu736ai","category_id":"cl0rqqlzk001rugqsyp3ajdjc","_id":"cl0rqqlzn001yugqswqmpdd9t"},{"post_id":"cl0rqqlze001bugqs4ggeshcf","category_id":"cl0rqqlzm001wugqs4atdjqo1","_id":"cl0rqqlzo0022ugqslcemko8h"},{"post_id":"cl0rqqlzg001dugqsce3v854k","category_id":"cl0rqqlzm001wugqs4atdjqo1","_id":"cl0rqqlzq0026ugqsxtkb8vk1"},{"post_id":"cl0rqqm0o002vugqs7p85e829","category_id":"cl0rqqlz4000nugqsqi7kni1x","_id":"cl0rqqm0t002xugqs00jzffbp"},{"post_id":"cl0rqqm21002yugqsw178c5nw","category_id":"cl0rqqlzb0011ugqsweiy2fw3","_id":"cl0rqqm220030ugqs799thyze"},{"post_id":"cl0rr1szz0008ywqsc8onlnyi","category_id":"cl0rrt5kx000cywqsziasqcuj","_id":"cl0rrt5ky000dywqsld4hawdm"}],"PostTag":[{"post_id":"cl0rqqly80000ugqsimhqlbyg","tag_id":"cl0rqqlyl0005ugqs6283sa32","_id":"cl0rqqlyy000dugqs8mj3roq6"},{"post_id":"cl0rqqlyg0002ugqsbu25tmci","tag_id":"cl0rqqlyl0005ugqs6283sa32","_id":"cl0rqqlz6000rugqs38ym14zq"},{"post_id":"cl0rqqlyg0002ugqsbu25tmci","tag_id":"cl0rqqlz1000iugqsgtiglr6g","_id":"cl0rqqlz7000uugqs8y38059a"},{"post_id":"cl0rqqlyl0006ugqsf88ltheu","tag_id":"cl0rqqlyl0005ugqs6283sa32","_id":"cl0rqqlzc0015ugqsjl3n28p7"},{"post_id":"cl0rqqlyl0006ugqsf88ltheu","tag_id":"cl0rqqlz8000wugqsq8xhhvpi","_id":"cl0rqqlzd0017ugqs4enqxjb9"},{"post_id":"cl0rqqlyr0008ugqsxviplcnp","tag_id":"cl0rqqlyl0005ugqs6283sa32","_id":"cl0rqqlzf001cugqsauudgdtn"},{"post_id":"cl0rqqlyr0008ugqsxviplcnp","tag_id":"cl0rqqlzb0012ugqsh9l25hqn","_id":"cl0rqqlzh001fugqsg3qo12eb"},{"post_id":"cl0rqqlzd0016ugqsfnu736ai","tag_id":"cl0rqqlz1000iugqsgtiglr6g","_id":"cl0rqqlzi001jugqsjj7ucybj"},{"post_id":"cl0rqqlyv000augqsccmfpw2f","tag_id":"cl0rqqlyl0005ugqs6283sa32","_id":"cl0rqqlzi001kugqsafdg010n"},{"post_id":"cl0rqqlyv000augqsccmfpw2f","tag_id":"cl0rqqlze001augqsrv5sev70","_id":"cl0rqqlzk001ougqs15pl7ymi"},{"post_id":"cl0rqqlyy000eugqsx819qplq","tag_id":"cl0rqqlzh001iugqs2opyrcs8","_id":"cl0rqqlzk001pugqsolrqw2uy"},{"post_id":"cl0rqqlz0000fugqsq0ae5occ","tag_id":"cl0rqqlyl0005ugqs6283sa32","_id":"cl0rqqlzl001tugqsz8d1s7uq"},{"post_id":"cl0rqqlz0000fugqsq0ae5occ","tag_id":"cl0rqqlzj001nugqsmj4wi5fd","_id":"cl0rqqlzm001vugqsu5a9hku5"},{"post_id":"cl0rqqlz2000jugqsg6jg1ey6","tag_id":"cl0rqqlzl001sugqs3dpu0rzf","_id":"cl0rqqlzo0021ugqsqaevdlb8"},{"post_id":"cl0rqqlz2000jugqsg6jg1ey6","tag_id":"cl0rqqlzm001xugqsd106qoaf","_id":"cl0rqqlzp0023ugqss1gglw2p"},{"post_id":"cl0rqqlz3000lugqsnxsydsl4","tag_id":"cl0rqqlzo0020ugqsztq9yake","_id":"cl0rqqlzp0025ugqs3ojyiurm"},{"post_id":"cl0rqqlz5000pugqss7pfbkf6","tag_id":"cl0rqqlyl0005ugqs6283sa32","_id":"cl0rqqlzr0028ugqsy9q2z25q"},{"post_id":"cl0rqqlz5000pugqss7pfbkf6","tag_id":"cl0rqqlzp0024ugqsc4il2vyd","_id":"cl0rqqlzr0029ugqspa6cdj6s"},{"post_id":"cl0rqqlz6000sugqs5deha9yi","tag_id":"cl0rqqlzb0012ugqsh9l25hqn","_id":"cl0rqqlzs002cugqsio0yvlz5"},{"post_id":"cl0rqqlz6000sugqs5deha9yi","tag_id":"cl0rqqlzr002augqsbv34bj5a","_id":"cl0rqqlzt002dugqsamk6w9n1"},{"post_id":"cl0rqqlz8000xugqs2ihd1ac9","tag_id":"cl0rqqlzb0012ugqsh9l25hqn","_id":"cl0rqqlzu002gugqsr1lzgdyv"},{"post_id":"cl0rqqlz8000xugqs2ihd1ac9","tag_id":"cl0rqqlzr002augqsbv34bj5a","_id":"cl0rqqlzv002hugqsi4yeu0qn"},{"post_id":"cl0rqqlza000zugqso7c0c3kh","tag_id":"cl0rqqlze001augqsrv5sev70","_id":"cl0rqqlzv002jugqsgxttrptg"},{"post_id":"cl0rqqlzb0013ugqsrj94b7xb","tag_id":"cl0rqqlzl001sugqs3dpu0rzf","_id":"cl0rqqlzx002mugqs476osujw"},{"post_id":"cl0rqqlzb0013ugqsrj94b7xb","tag_id":"cl0rqqlzm001xugqsd106qoaf","_id":"cl0rqqlzy002nugqsyaxcpopf"},{"post_id":"cl0rqqlze001bugqs4ggeshcf","tag_id":"cl0rqqlzx002lugqsjg7pa9uf","_id":"cl0rqqlzz002qugqsx7enj3xb"},{"post_id":"cl0rqqlze001bugqs4ggeshcf","tag_id":"cl0rqqlzy002ougqstmbqyc64","_id":"cl0rqqm00002rugqs961s6z2c"},{"post_id":"cl0rqqlzg001dugqsce3v854k","tag_id":"cl0rqqlzx002lugqsjg7pa9uf","_id":"cl0rqqm01002tugqswhtvti8o"},{"post_id":"cl0rqqlzg001dugqsce3v854k","tag_id":"cl0rqqlzy002ougqstmbqyc64","_id":"cl0rqqm01002uugqsh3v9p45l"},{"post_id":"cl0rqqm0o002vugqs7p85e829","tag_id":"cl0rqqlzh001iugqs2opyrcs8","_id":"cl0rqqm0t002wugqswxuad1jg"},{"post_id":"cl0rqqm21002yugqsw178c5nw","tag_id":"cl0rqqlzo0020ugqsztq9yake","_id":"cl0rqqm22002zugqsrvlj9tp9"},{"post_id":"cl0rr1szz0008ywqsc8onlnyi","tag_id":"cl0rqqlyl0005ugqs6283sa32","_id":"cl0rr1t010009ywqss1joqdjo"},{"post_id":"cl0rr1szz0008ywqsc8onlnyi","tag_id":"cl0rqqlz8000wugqsq8xhhvpi","_id":"cl0rr1t01000aywqs3x76t3bk"}],"Tag":[{"name":"docker","_id":"cl0rqqlyl0005ugqs6283sa32"},{"name":"mysql","_id":"cl0rqqlz1000iugqsgtiglr6g"},{"name":"redis","_id":"cl0rqqlz8000wugqsq8xhhvpi"},{"name":"nginx","_id":"cl0rqqlzb0012ugqsh9l25hqn"},{"name":"postgresql","_id":"cl0rqqlze001augqsrv5sev70"},{"name":"git","_id":"cl0rqqlzh001iugqs2opyrcs8"},{"name":"springboot","_id":"cl0rqqlzj001nugqsmj4wi5fd"},{"name":"linux","_id":"cl0rqqlzl001sugqs3dpu0rzf"},{"name":"nload","_id":"cl0rqqlzm001xugqsd106qoaf"},{"name":"java","_id":"cl0rqqlzo0020ugqsztq9yake"},{"name":"vsftpd","_id":"cl0rqqlzp0024ugqsc4il2vyd"},{"name":"proxy","_id":"cl0rqqlzr002augqsbv34bj5a"},{"name":"web","_id":"cl0rqqlzx002lugqsjg7pa9uf"},{"name":"security","_id":"cl0rqqlzy002ougqstmbqyc64"}]}}